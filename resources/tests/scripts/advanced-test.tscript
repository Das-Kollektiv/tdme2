# sort function for ascending order
function: sortFunctionDesc($a, $b)
	return($a > $b)
end

# sort function for descending order
function: sortFunctionAsc($a, $b)
	return($a < $b)
end

# initialize
on: initialize
	console.printLine("---------------------------")
	console.printLine("advanced-test: Initialize")
	console.printLine("--------------------------")
	console.printLine()
end

# if no condition is met, nothing will be executed, lol :D
on: nothing
	console.printLine("------------------------")
	console.printLine("advanced-test: Nothing")
	console.printLine("------------------------")
	console.printLine()
	console.printLine("---------")
	console.printLine("Arrays")
	console.printLine("---------")
	$array = [1, 2, 3, [1, 2, 3], {a: xxx, b: yyy, c: zzz}, {a, b, c}]
	console.printLine("array initialized with: $array = [1, 2, 3, [1, 2, 3], {a: xxx, b: yyy, c: zzz}, {a, b, c}]: " + $array)
	$array = array(1, 2, 3)
	console.printLine("array initialized with: $array = array(1, 2, 3): " + $array)
	$array->push(8, 9, 10, 99, 10)
	console.printLine("array pushed values with: $array->push(8, 9, 10, 99, 10)")
	console.printLine("array now looks like: ", $array)
	$array[] = 123
	$array[] = 1234
	$array[] = 12345
	$array[] = array(1,2,3)
	console.printLine("array values added with [] operator: 123, 1234, 12345, array(1,2,3)")
	console.printLine("array now looks like: ", $array)
	console.printLine("array values added with [] operator to push to array of array: 50, 60")
	$array[11][] = 50
	$array[11][] = 60
	$array[11][$array[11]->length() - 1] = 61
	console.printLine("array length: ", $array->length())
	console.printLine("array iteration with $array->get(): ")
	$i = 0
	forCondition($i < $array->length())
		console.printLine($i + ": " + $array->get($i))
		++$i
	end 
	console.printLine("array iteration with [] operator: ")
	$i = 0
	forCondition($i < $array->length())
		console.printLine($i + ": " + $array[$i])
		++$i
	end
	console.printLine("array iteration with [] opertator and some index math: ")
	$i = 0
	forCondition($i < $array->length() / 2)
		console.printLine($i + "-a: " + $array[$i * 2 + 0])
		console.printLine($i + "-b: " + $array[$i * 2 + 1])
		++$i
	end
	console.printLine("array removal of 123, 1234, 12345 using array.removeOf")
	$array->removeOf(123)
	$array->removeOf(1234)
	$array->removeOf(12345)
	console.printLine("array now looks like: ", $array)
	console.printLine("array indexOf 10: ", $array->indexOf(10))
	console.printLine("array indexOf 10 beginning to search from 6: ", $array->indexOf(10, 6))
	console.printLine("sorting of array('abc', 'def', 'ghi', 'jkl', 'mno'): ", $array = array("abc", "def", "ghi", "jkl", "mno"))
	$array->sort("sortFunctionDesc")
	console.printLine("$array->sort('sortFunctionDesc'): ", $array)
	$array->sort("sortFunctionAsc")
	console.printLine("$array->sort('sortFunctionAsc'): ", $array)
	$array->reverse()
	console.printLine("array reverse: ", $array)
	console.printLine("---------")
	console.printLine("Maps")
	console.printLine("----------")
	$map = {test1: 123, test2: 456, test3: 789, test4: [1, 2, 3], test5: {a: xxx, b: yyy, c: zzz}, test6: {a, b, c}}
	console.printLine("map initialized with: $map = {test1: 123, test2: 456, test3: 789, test4: [1, 2, 3], test5: {a: xxx, b: yyy, c: zzz}, test6: {a, b, c}}: " + $map)
	$map = map()
	console.printLine("map initialized with: $map = map(): " + $map)
	console.printLine("put some key value pairs into map: map->set()")
	$map->set("test1", 123)
	$map->set("test2", 456)
	$map->set("test3", 789)
	$map->set("test4", array(1,2,3))
	$map->set("test5", "Yaaaa")
	console.printLine("map now looks like: ", $map)
	console.printLine("remove test2 via $map->remove: ")
	$map->remove("test2")
	console.printLine("map now looks like: ", $map)
	$map->set("test2", 456)
	console.printLine("reading map key(+value) pairs: ")
	console.printLine("map does have test2 key using $map->has(): ", $map->has("test2"))
	console.printLine("map does have test8 key using $map->has(): ", $map->has("test8"))
	console.printLine("map value for test1 key using $map->get(): ", $map->get("test1"))
	console.printLine("map value for test2 key using $map->get(): ", $map->get("test2"))
	console.printLine("map value for test3 key using $map->get(): ", $map->get("test3"))
	console.printLine("map value for test4 key using $map->get(): ", $map->get("test4"))
	console.printLine("map value for test5 key using $map->get(): ", $map->get("test5"))
	console.printLine("map value for test1 using map dot operator: ", $map.test1)
	console.printLine("map value for test2 using map dot operator: ", $map.test2)
	console.printLine("map value for test3 using map dot operator: ", $map.test3)
	console.printLine("map value for test4 using map dot operator: ", $map.test4)
	console.printLine("map value for test5 using map dot operator: ", $map.test5)
	console.printLine("adding map values using map dot operator: ")
	$map.test6 = 666
	$map.test7 = 770
	$map.test8 = 890
	console.printLine("map keys: ", $map->getKeys())
	console.printLine("map values: ", $map->getValues())
	console.printLine("iterating keys and values using $map->getKeys(): ")
	$mapKeys = $map->getKeys()
	$i = 0
	forCondition($i < $mapKeys->length())
		console.printLine($mapKeys[$i] + " = " + $map->get($mapKeys[$i]))
		++$i
	end
	console.printLine("---------")
	console.printLine("Sets")
	console.printLine("----------")
	$set = {test1, test2, test3, test4, test5}
	console.printLine("set initialized with: $set = {test1, test2, test3, test4, test5}: " + $set)
	$set = set()
	console.printLine("set initialized with: $set = set(): " + $set)
	console.printLine("put some keys into set: $set->insert()")
	$set->insert("test1")
	$set->insert("test2")
	$set->insert("test3")
	$set->insert("test4")
	$set->insert("test5")
	console.printLine("set now looks like: ", $set)
	console.printLine("remove test2 via $set->remove: ")
	$set->remove("test2")
	console.printLine("set now looks like: ", $set)
	console.printLine("set does have test1 key using $set->has(): ", $set->has("test1"))
	console.printLine("set does have test2 key using $set->has(): ", $set->has("test2"))
	console.printLine("set does have test3 key using $set->has(): ", $set->has("test3"))
	console.printLine("set does have test4 key using $set->has(): ", $set->has("test4"))
	console.printLine("set does have test5 key using $set->has(): ", $set->has("test5"))
	console.printLine("set key for test1 using set dot operator: ", $set.test1)
	console.printLine("set key for test2 using set dot operator: ", $set.test2)
	console.printLine("set key for test3 using set dot operator: ", $set.test3)
	console.printLine("set key for test4 using set dot operator: ", $set.test4)
	console.printLine("set key for test5 using set dot operator: ", $set.test5)
	console.printLine("inserting set values using set dot operator: ")
	$set.test6 = true
	$set.test7 = true
	$set.test8 = false
	$set.test9 = true
	console.printLine("set keys: ", $set->getKeys())
	script.stop()
end

# an error has occurred
on: error
	console.printLine("----------------------")
	console.printLine("advanced-test: Error")
	console.printLine("----------------------")
	console.printLine("An error occurred")
	script.wait(1000)
end