module

use: make-module.tscript

function: findLibMSC($fileNamePrefix, $pathName)
	$files = filesystem.list($pathName)
	forEach($file in $files)
		if ($file == "..")
			continue
		end
		# TODO: $file->toLowerCase()->startsWith($fileNamePrefix)
		$fileLowerCase = $file->toLowerCase()
		if (filesystem.isPath($pathName + "/" + $file) == false && 
			$fileLowerCase->startsWith($fileNamePrefix) == true && 
			$fileLowerCase->endsWith(".lib") == true)
			return($pathName + "/" + $file)
		end
	end
	forEach($file in $files)
		if ($file == "..")
			continue
		end
		if (filesystem.isPath($pathName + "/" + $file) == true)
			$result = findLibMSC($fileNamePrefix, $pathName + "/" + $file)
			if ($result != null) 
				return($result)
			end
		end
	end
	return(null)
end

function: determineLibraryFlagsMSC($libraries, &$librariesIncludes, &$librariesLdFlags, $optional)
	$librariesIncludesArray = []
	$librariesLdFlagsArray = []

	# we look for .lib files
	forEach($library in $libraries)
		# find lib file
		$libraryLibFile = findLibMSC($library, "./ext")
		if ($libraryLibFile == null)
			console.printLine("Could not find library in ext: " + $library)
			if ($optional == false)
				console.printLine()
				application.exit($$.application::EXITCODE_FAILURE)
			end
			return(false)
		end
		# add to ld flags array
		if ($librariesLdFlagsArray->contains($libraryLibFile) == false)
			$librariesLdFlagsArray->push($libraryLibFile)
		end
		# find include
		$includePathName = null
		$includePathNameCandidate = filesystem.getPathName($libraryLibFile)
		forCondition($includePathNameCandidate != "./ext")
			$includePathNameCandidate = filesystem.getPathName($includePathNameCandidate)
			if (filesystem.exists($includePathNameCandidate + "/include") == true)
				$includePathName = $includePathNameCandidate + "/include"
				break
			end  
			if (filesystem.exists($includePathNameCandidate + "/includes") == true)
				$includePathName = $includePathNameCandidate + "/includes"
				break
			end
		end
		if ($includePathName == null)
			console.printLine("Could not find library include in ext: " + $library)
			if ($optional == false)
				console.printLine()
				application.exit($$.application::EXITCODE_FAILURE)
			end
			return(false)
		end
		# add to ld flags array
		if ($librariesIncludesArray->contains($includePathName) == false)
			$librariesIncludesArray->push($includePathName)
		end
	end

	$librariesIncludes = ""
	forEach($librariesInclude in $librariesIncludesArray)
		$librariesIncludes = $librariesIncludes + " /I \"" + $librariesInclude + "\""
	end
	$librariesIncludes = $librariesIncludes->trim()

	$librariesLdFlags = ""
	forEach($libraryLdFlag in $librariesLdFlagsArray)
		$librariesLdFlags = $librariesLdFlags + " /LIBPATH \"" + $libraryLdFlag + "\""
	end
	$librariesLdFlags = $librariesLdFlags->trim()

	return(true)
end

function: generateLibSymbolsMSC($linkerSymbolsFile, $linkerDefFile, $libraryDLLFile)
	$fileContent = filesystem.getContentAsStringArray(
		filesystem.getPathName($linkerSymbolsFile),
		filesystem.getFileName($linkerSymbolsFile)
	)
	$symbolsMode = false
	$symbols = Set()
	for($i = 0, $i < $fileContent->getSize(), $i++)
		$line = $fileContent[$i]->trim()
		if ($symbolsMode == false)
			if ($line->endsWith(" public symbols") == true)
				$symbolsMode = true
				$i++
			end
		else
			if ($line->isEmpty() == true)
				$symbolsMode = false
			else
				$lineTokens = $line->tokenize(" ")
				if ($lineTokens->getSize() > 1)
					$symbols->insert($lineTokens[1]);
				end
			end
		end
	end
	$fileContent = []
	$fileContent[] = "LIBRARY " + $libraryDLLFile
	$fileContent[] = "EXPORTS"
	forEach ($symbol in $symbols)
		$fileContent[] = "\t" + $symbol
	end
	filesystem.setContentFromStringArray(
		filesystem.getPathName($linkerDefFile),
		filesystem.getFileName($linkerDefFile),
		$fileContent
	)
end

function: generateRCMSC($template, $fileName)
	$rc = filesystem.getContentAsString(
		filesystem.getPathName($template),
		filesystem.getFileName($template)
	)

	if ($fileName->endsWith(".exe") == true)
		$executable = $fileName->substring($fileName->lastIndexOf("/") + 1, $fileName->indexOf(".exe"))
		$executableLowerCase = $executable->toLowerCase()
		$rc = $rc->replace("{__EXECUTABLE__}", $executable)
		if (filesystem.exists("resources/platforms/win32/" + $executableLowerCase + "-icon.ico") == true)
			$rc = $rc->replace("{__ICON__}", "resources/platforms/win32/" + $executableLowerCase + "-icon.ico")
		else
			$rc = $rc->replace("{__ICON__}", "resources/platforms/win32/default-icon.ico")
		end
	elseif ($fileName->endsWith(".dll") == true)
		$library = $fileName->substring($fileName->lastIndexOf("/") + 1, $fileName->indexOf(".dll"))
		$rc = $rc->replace("{__LIBRARY__}", $library)
	end

	filesystem.setContentFromString(
		filesystem.getPathName($fileName),
		filesystem.getFileName($fileName) + ".rc",
		$rc
	)
end

function: buildLibraryWindowsMSC($name, $libraries, $definitions, $includes, $ldFlags, $files, $optional)
	console.printLine("Building library: " + $name)
	console.printLine()

	$librariesIncludes = ""
	$librariesLdFlags = ""
	if (determineLibraryFlagsMSC($libraries, $librariesIncludes, $librariesLdFlags, $optional) == false)
		return
	end

	# TODO: find newest version by name in folder
	$WINDOWS_SDK_DIR = "C:/Program Files (x86)/Windows Kits/10/Lib/10.0.20348.0"

	# minimal required MSC libraries
	# TODO: " is not working
	$librariesLdFlags = $librariesLdFlags + " /LIBPATH \"" + $WINDOWS_SDK_DIR + "/um/x64/user32.lib" + "\""
	$librariesLdFlags = $librariesLdFlags + " /LIBPATH \"" + $WINDOWS_SDK_DIR + "/um/x64/ws2_32.lib" + "\""
	$librariesLdFlags = $librariesLdFlags + " /LIBPATH \"" + $WINDOWS_SDK_DIR + "/um/x64/dbghelp.lib" + "\""

	$concurrency = integer(math.ceil(concurrency.getHardwareThreadCount() / 1.5))

	console.printLine("concurrency: " + $concurrency)
	console.printLine("definitions: " + $definitions)
	console.printLine("includes: " + $includes)
	console.printLine("ld flags: " + $ldFlags)
	console.printLine("libraries: " + $libraries)
	console.printLine("libraries includes: " + $librariesIncludes)
	console.printLine("libraries ld flags: " + $librariesLdFlags)

	$cxxFlags = "/MT /MP /EHsc /O2 /std:c++20 /Zi /F 10485760 /D GLFW_DLL " + $definitions->replace("-", "/")

	try
		#
		$objectPath = "obj"	
		$libraryPath = "lib"

		# create paths
		createPathRecusively($objectPath)
		createPathRecusively($libraryPath)

		# CXX arguments
		$cxx = "cl"
		$libraryExtension = ".dll"

		$includes = $librariesIncludes + " " + $includes->replace("-I", "/I ")
		$cxxFlags = "/MT /MP /EHsc /O2 /std:c++20 /F 10485760 /D GLFW_DLL " + $definitions->replace("-", "/")

		# compile each compilation units
		$commands = []
		$compilationUnits = ""
		forEach($file in $files)
			#
			$fileObjectPath = filesystem.getPathName($file)
			
			# create file object path
			createPathRecusively($objectPath + "/" + $fileObjectPath)

			#
			$compilationUnit = $objectPath + "/" + $file + ".o"
			if ($compilationUnits->isEmpty() == false)
				$compilationUnits = $compilationUnits + " "
			end
			$compilationUnits = $compilationUnits + $compilationUnit

			#
			$timeStampFile = 0
			$timeStampCompilationUnit = 0;
			if (filesystem.exists($file) == true)
				$timeStampFile = filesystem.getFileTimeStamp(
					filesystem.getPathName($file),
					filesystem.getFileName($file)
				)
			end
			if (filesystem.exists($compilationUnit) == true)
				$timeStampCompilationUnit = filesystem.getFileTimeStamp(
					filesystem.getPathName($compilationUnit),
					filesystem.getFileName($compilationUnit)
				)
			end
			if ($timeStampFile != 0 &&
				$timeStampCompilationUnit != 0 &&
				$timeStampCompilationUnit > $timeStampFile)
				continue
			end
			
			# command
			$command =
				$cxx +
				" " +
				"/c" +
				" " +				
				"/Fo:" +
				$compilationUnit +
				" " +
				$cxxFlags +
				" " +
				$librariesIncludes +
				" " +
				$includes +
				" " +
				$file + 
				" " + 
				"> nul 2>&1"
			#
			if ($command == null)
				continue
			end

			#
			$commands[] = $command
		end

		# execute commands
		if (application.executeMultiple($commands, $concurrency) == false)
			console.printLine()
			console.printLine("Not all files have been compiled. Stopping")
			if ($optional == false)
				console.printLine()
				application.exit($$.application::EXITCODE_FAILURE)
			end
		else
			$libraryFile = $libraryPath + "/" + $name + ".lib"
			$libraryDLLFile = $libraryPath + "/" + $name + ".dll"
			$libraryDLLRESFile = $libraryPath + "/" + $name + ".dll.res"
			$linkerSymbolsFile = $libraryPath + "/" + $name + ".symbols"
			$linkerDefFile = $libraryPath + "/" + $name + ".def"

			# link #1
			$command =
				"lib" +
				" " +
				"/OUT:" +
				$libraryPath + "/" + $name + ".lib" +
				" " +
				$compilationUnits
			console.printLine($command)

			# execute
			$exitCode = $$.application::EXITCODE_SUCCESS
			$error = null
			$result = application.execute($command, $exitCode, $error)

			if ($exitCode != $$.application::EXITCODE_SUCCESS)
				console.printLine("lib exited with exit code " + $exitCode + ", see error: " + $error)
				if ($optional == false)
					console.printLine()
					application.exit($$.application::EXITCODE_FAILURE)
				end
			end

			# dump bin
			$command =
				"dumpbin" +
				" " +
				"/LINKERMEMBER" +
				" " +
				$libraryFile +
				" " +
				"> " + 
				$linkerSymbolsFile

			# execute
			$exitCode = $$.application::EXITCODE_SUCCESS
			$error = null
			$result = application.execute($command, $exitCode, $error)

			if ($exitCode != $$.application::EXITCODE_SUCCESS)
				console.printLine("dumpbin exited with exit code " + $exitCode + ", see error: " + $error)
				if ($optional == false)
					console.printLine()
					application.exit($$.application::EXITCODE_FAILURE)
				end
			end

			if (filesystem.exists($libraryFile) == true)
				filesystem.removeFile(
					filesystem.getPathName($libraryFile),
					filesystem.getFileName($libraryFile)
				)
			end

			generateLibSymbolsMSC(
				$linkerSymbolsFile,
				$linkerDefFile,
				$libraryDLLFile
			)

			generateRCMSC(
				"resources/platforms/win32/lib.rc", 
				$libraryDLLFile
			)

			# rc
			$command =
				"rc" +
				" " +
				$libraryDLLFile + ".rc"
			console.printLine($command)

			# execute
			$exitCode = $$.application::EXITCODE_SUCCESS
			$error = null
			$result = application.execute($command, $exitCode, $error)

			if ($exitCode != $$.application::EXITCODE_SUCCESS)
				console.printLine("rc exited with exit code " + $exitCode + ", see error: " + $error)
				if ($optional == false)
					console.printLine()
					application.exit($$.application::EXITCODE_FAILURE)
				end
			end

			# link $(LD_FLAGS) /DLL /DEF:$(MSCBIN)\libtdme.def /DEBUG /IGNORE:4197 /IGNORE:4102 $** $(MSCBIN)\libtdme.dll.res $(LIBS_LDFLAGS) /LIBPATH $(MSCBIN)\libtdme-ext.lib /OUT:$(MSCBIN)\libtdme.dll

			# link
			$command =
				"link" +
				" " +
				$librariesLdFlags +
				" " +
				$ldFlags +
				" " +
				"/DLL" +
				" " +
				"/DEF:" + $linkerDefFile +
				" " +
				"/DEBUG" +
				" " +
				"/IGNORE:4197" +
				" " +
				"/IGNORE:4102" +
				" " +
				$compilationUnits +
				" " +
				$libraryDLLRESFile + 
				" " +
				"/OUT:" + $libraryDLLFile 

			console.printLine($command)

			# execute
			$exitCode = $$.application::EXITCODE_SUCCESS
			$error = null
			$result = application.execute($command, $exitCode, $error)
			console.printLine($result)
			if ($exitCode != $$.application::EXITCODE_SUCCESS)
				console.printLine("link exited with exit code " + $exitCode + ", see error: " + $error)
				if ($optional == false)
					console.printLine()
					application.exit($$.application::EXITCODE_FAILURE)
				end
			end
			
		end
	catch ($exception)
		console.printLine("An error occurred: " + $exception)
	end
	
	console.printLine()
end
