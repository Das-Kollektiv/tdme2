diff --git a/shader/gl3/skinning/skinning.c b/shader/gl3/skinning/skinning.c
index 2dd5e2ef..0c055aa7 100644
--- a/shader/gl3/skinning/skinning.c
+++ b/shader/gl3/skinning/skinning.c
@@ -7,38 +7,100 @@ layout(std430,binding=1) buffer InNormal { float inNormalFloatArray[]; };
 layout(std430,binding=2) buffer InSkinningVertexJoints { int inSkinningVertexJoints[]; };
 layout(std430,binding=3) buffer InSkinningVertexJointIdxs { int inSkinningVertexJointIdxs[]; };
 layout(std430,binding=4) buffer InSkinningVertexJointWeights { float inSkinningVertexJointWeights[]; };
-layout(std430,binding=5) buffer OutVertex { float outVertexFloatArray[]; };
-layout(std430,binding=6) buffer OutNormal { float outNormalFloatArray[]; };
-layout(std430,binding=7) buffer InSkinningJointsTransformationMatrices{ mat4 inSkinningJointsTransformationsMatrices[]; };
+layout(std430,binding=5) buffer OutVertex0 { float outVertexFloatArray0[]; };
+layout(std430,binding=6) buffer OutNormal0 { float outNormalFloatArray0[]; };
+layout(std430,binding=7) buffer InSkinningJointsTransformationMatrices0 { mat4 inSkinningJointsTransformationsMatrices0[]; };
+layout(std430,binding=8) buffer OutVertex1 { float outVertexFloatArray1[]; };
+layout(std430,binding=9) buffer OutNormal1 { float outNormalFloatArray1[]; };
+layout(std430,binding=10) buffer InSkinningJointsTransformationMatrices1 { mat4 inSkinningJointsTransformationsMatrices1[]; };
+layout(std430,binding=11) buffer OutVertex2 { float outVertexFloatArray2[]; };
+layout(std430,binding=12) buffer OutNormal2 { float outNormalFloatArray2[]; };
+layout(std430,binding=13) buffer InSkinningJointsTransformationMatrices2 { mat4 inSkinningJointsTransformationsMatrices2[]; };
+layout(std430,binding=14) buffer OutVertex3 { float outVertexFloatArray3[]; };
+layout(std430,binding=15) buffer OutNormal3 { float outNormalFloatArray3[]; };
+layout(std430,binding=16) buffer InSkinningJointsTransformationMatrices3 { mat4 inSkinningJointsTransformationsMatrices3[]; };
+layout(std430,binding=17) buffer OutVertex4 { float outVertexFloatArray4[]; };
+layout(std430,binding=18) buffer OutNormal4 { float outNormalFloatArray4[]; };
+layout(std430,binding=19) buffer InSkinningJointsTransformationMatrices4 { mat4 inSkinningJointsTransformationsMatrices4[]; };
+layout(std430,binding=20) buffer OutVertex5 { float outVertexFloatArray5[]; };
+layout(std430,binding=21) buffer OutNormal5 { float outNormalFloatArray5[]; };
+layout(std430,binding=22) buffer InSkinningJointsTransformationMatrices5 { mat4 inSkinningJointsTransformationsMatrices5[]; };
+layout(std430,binding=23) buffer OutVertex6 { float outVertexFloatArray6[]; };
+layout(std430,binding=24) buffer OutNormal6 { float outNormalFloatArray6[]; };
+layout(std430,binding=25) buffer InSkinningJointsTransformationMatrices6 { mat4 inSkinningJointsTransformationsMatrices6[]; };
+layout(std430,binding=26) buffer OutVertex7 { float outVertexFloatArray7[]; };
+layout(std430,binding=27) buffer OutNormal7 { float outNormalFloatArray7[]; };
+layout(std430,binding=28) buffer InSkinningJointsTransformationMatrices7 { mat4 inSkinningJointsTransformationsMatrices7[]; };
+layout(std430,binding=29) buffer OutVertex8 { float outVertexFloatArray8[]; };
+layout(std430,binding=30) buffer OutNormal8 { float outNormalFloatArray8[]; };
+layout(std430,binding=31) buffer InSkinningJointsTransformationMatrices8 { mat4 inSkinningJointsTransformationsMatrices8[]; };
+layout(std430,binding=32) buffer OutVertex9 { float outVertexFloatArray9[]; };
+layout(std430,binding=33) buffer OutNormal9 { float outNormalFloatArray9[]; };
+layout(std430,binding=34) buffer InSkinningJointsTransformationMatrices9 { mat4 inSkinningJointsTransformationsMatrices9[]; };
+layout(std430,binding=35) buffer OutVertex10 { float outVertexFloatArray10[]; };
+layout(std430,binding=36) buffer OutNormal10 { float outNormalFloatArray10[]; };
+layout(std430,binding=37) buffer InSkinningJointsTransformationMatrices10 { mat4 inSkinningJointsTransformationsMatrices10[]; };
+layout(std430,binding=38) buffer OutVertex11 { float outVertexFloatArray11[]; };
+layout(std430,binding=39) buffer OutNormal11 { float outNormalFloatArray11[]; };
+layout(std430,binding=40) buffer InSkinningJointsTransformationMatrices11 { mat4 inSkinningJointsTransformationsMatrices11[]; };
+layout(std430,binding=41) buffer OutVertex12 { float outVertexFloatArray12[]; };
+layout(std430,binding=42) buffer OutNormal12 { float outNormalFloatArray12[]; };
+layout(std430,binding=43) buffer InSkinningJointsTransformationMatrices12 { mat4 inSkinningJointsTransformationsMatrices12[]; };
+layout(std430,binding=44) buffer OutVertex13 { float outVertexFloatArray13[]; };
+layout(std430,binding=45) buffer OutNormal13 { float outNormalFloatArray13[]; };
+layout(std430,binding=46) buffer InSkinningJointsTransformationMatrices13 { mat4 inSkinningJointsTransformationsMatrices13[]; };
+layout(std430,binding=47) buffer OutVertex14 { float outVertexFloatArray14[]; };
+layout(std430,binding=48) buffer OutNormal14 { float outNormalFloatArray14[]; };
+layout(std430,binding=49) buffer InSkinningJointsTransformationMatrices14 { mat4 inSkinningJointsTransformationsMatrices14[]; };
 
 // uniforms
-uniform int skinningCount;
+uniform int instanceCount;
+uniform int vertexCount;
+
+#define computeSkinning(outVertexFloatArray, outNormalFloatArray, inSkinningJointsTransformationsMatrices) \
+{ \
+	vec3 skinnedVertex = vec3(0.0, 0.0, 0.0); \
+	vec3 skinnedNormal = vec3(0.0, 0.0, 0.0); \
+	float totalWeights = 0.0; \
+	vec3 inVertex = vec3(inVertexFloatArray[offset * 3 + 0], inVertexFloatArray[offset * 3 + 1], inVertexFloatArray[offset * 3 + 2]); \
+	vec3 inNormal = vec3(inNormalFloatArray[offset * 3 + 0], inNormalFloatArray[offset * 3 + 1], inNormalFloatArray[offset * 3 + 2]); \
+	for (int i = 0; i < inSkinningVertexJoints[offset]; i++) { \
+		mat4 transformationsMatrix = inSkinningJointsTransformationsMatrices[inSkinningVertexJointIdxs[offset * 4 + i]]; \
+		skinnedVertex+= (transformationsMatrix * vec4(inVertex, 1.0)).xyz * inSkinningVertexJointWeights[offset * 4 + i]; \
+		skinnedNormal+= (mat3(transformationsMatrix) * inNormal) * inSkinningVertexJointWeights[offset * 4 + i]; \
+		totalWeights+= inSkinningVertexJointWeights[offset * 4 + i]; \
+	} \
+	if (totalWeights != 1.0) { \
+		float weightNormalized = totalWeights != 0.0?1.0 / totalWeights:0.0; \
+		skinnedVertex*= weightNormalized; \
+		skinnedNormal*= weightNormalized; \
+	} \
+	outVertexFloatArray[offset * 3 + 0] = skinnedVertex.x; \
+	outVertexFloatArray[offset * 3 + 1] = skinnedVertex.y; \
+	outVertexFloatArray[offset * 3 + 2] = skinnedVertex.z; \
+	outNormalFloatArray[offset * 3 + 0] = skinnedNormal.x; \
+	outNormalFloatArray[offset * 3 + 1] = skinnedNormal.y; \
+	outNormalFloatArray[offset * 3 + 2] = skinnedNormal.z; \
+}
 
 void main() {
 	// TODO: tangents and bitangents
 	int offset = int(gl_GlobalInvocationID.x);
-	if (offset < skinningCount) {
-		vec3 skinnedVertex = vec3(0.0, 0.0, 0.0);
-		vec3 skinnedNormal = vec3(0.0, 0.0, 0.0);
-		float totalWeights = 0.0;
-		vec3 inVertex = vec3(inVertexFloatArray[offset * 3 + 0], inVertexFloatArray[offset * 3 + 1], inVertexFloatArray[offset * 3 + 2]);
-		vec3 inNormal = vec3(inNormalFloatArray[offset * 3 + 0], inNormalFloatArray[offset * 3 + 1], inNormalFloatArray[offset * 3 + 2]);
-		for (int i = 0; i < inSkinningVertexJoints[offset]; i++) {
-			mat4 transformationsMatrix = inSkinningJointsTransformationsMatrices[inSkinningVertexJointIdxs[offset * 4 + i]];
-			skinnedVertex+= (transformationsMatrix * vec4(inVertex, 1.0)).xyz * inSkinningVertexJointWeights[offset * 4 + i];
-			skinnedNormal+= (mat3(transformationsMatrix) * inNormal) * inSkinningVertexJointWeights[offset * 4 + i];
-			totalWeights+= inSkinningVertexJointWeights[offset * 4 + i];
-		}
-		if (totalWeights != 1.0) {
-			float weightNormalized = totalWeights != 0.0?1.0 / totalWeights:0.0;
-			skinnedVertex*= weightNormalized;
-			skinnedNormal*= weightNormalized;
-		}
-		outVertexFloatArray[offset * 3 + 0] = skinnedVertex.x;
-		outVertexFloatArray[offset * 3 + 1] = skinnedVertex.y;
-		outVertexFloatArray[offset * 3 + 2] = skinnedVertex.z;
-		outNormalFloatArray[offset * 3 + 0] = skinnedNormal.x;
-		outNormalFloatArray[offset * 3 + 1] = skinnedNormal.y;
-		outNormalFloatArray[offset * 3 + 2] = skinnedNormal.z;
+	if (offset < vertexCount) {
+		if (instanceCount >= 1) computeSkinning(outVertexFloatArray0, outNormalFloatArray0, inSkinningJointsTransformationsMatrices0);
+		if (instanceCount >= 2) computeSkinning(outVertexFloatArray1, outNormalFloatArray1, inSkinningJointsTransformationsMatrices1);
+		if (instanceCount >= 3) computeSkinning(outVertexFloatArray2, outNormalFloatArray2, inSkinningJointsTransformationsMatrices2);
+		if (instanceCount >= 4) computeSkinning(outVertexFloatArray3, outNormalFloatArray3, inSkinningJointsTransformationsMatrices3);
+		if (instanceCount >= 5) computeSkinning(outVertexFloatArray4, outNormalFloatArray4, inSkinningJointsTransformationsMatrices4);
+		if (instanceCount >= 6) computeSkinning(outVertexFloatArray5, outNormalFloatArray5, inSkinningJointsTransformationsMatrices5);
+		if (instanceCount >= 7) computeSkinning(outVertexFloatArray6, outNormalFloatArray6, inSkinningJointsTransformationsMatrices6);
+		if (instanceCount >= 8) computeSkinning(outVertexFloatArray7, outNormalFloatArray7, inSkinningJointsTransformationsMatrices7);
+		if (instanceCount >= 9) computeSkinning(outVertexFloatArray8, outNormalFloatArray8, inSkinningJointsTransformationsMatrices8);
+		if (instanceCount >= 10) computeSkinning(outVertexFloatArray9, outNormalFloatArray9, inSkinningJointsTransformationsMatrices9);
+		if (instanceCount >= 11) computeSkinning(outVertexFloatArray10, outNormalFloatArray10, inSkinningJointsTransformationsMatrices10);
+		if (instanceCount >= 12) computeSkinning(outVertexFloatArray11, outNormalFloatArray11, inSkinningJointsTransformationsMatrices11);
+		if (instanceCount >= 13) computeSkinning(outVertexFloatArray12, outNormalFloatArray12, inSkinningJointsTransformationsMatrices12);
+		if (instanceCount >= 14) computeSkinning(outVertexFloatArray13, outNormalFloatArray13, inSkinningJointsTransformationsMatrices13);
+		if (instanceCount >= 15) computeSkinning(outVertexFloatArray14, outNormalFloatArray14, inSkinningJointsTransformationsMatrices14);
 	}
 }
diff --git a/src/tdme/engine/subsystems/renderer/GL2Renderer.cpp b/src/tdme/engine/subsystems/renderer/GL2Renderer.cpp
index ac6c92a9..3f49419a 100644
--- a/src/tdme/engine/subsystems/renderer/GL2Renderer.cpp
+++ b/src/tdme/engine/subsystems/renderer/GL2Renderer.cpp
@@ -756,15 +756,15 @@ void GL2Renderer::bindSkinningVertexJointWeightsBufferObject(void* context, int3
 	Console::println("GL2Renderer::bindSkinningVertexJointWeightsBufferObject(): Not implemented");
 }
 
-void GL2Renderer::bindSkinningVerticesResultBufferObject(void* context, int32_t bufferObjectId) {
+void GL2Renderer::bindSkinningVerticesResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
 	Console::println("GL2Renderer::bindSkinningVerticesResultBufferObject(): Not implemented");
 }
 
-void GL2Renderer::bindSkinningNormalsResultBufferObject(void* context, int32_t bufferObjectId) {
+void GL2Renderer::bindSkinningNormalsResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
 	Console::println("GL2Renderer::bindSkinningNormalsResultBufferObject(): Not implemented");
 }
 
-void GL2Renderer::bindSkinningMatricesBufferObject(void* context, int32_t bufferObjectId) {
+void GL2Renderer::bindSkinningMatricesBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
 	Console::println("GL2Renderer::bindSkinningMatricesBufferObject(): Not implemented");
 }
 
diff --git a/src/tdme/engine/subsystems/renderer/GL2Renderer.h b/src/tdme/engine/subsystems/renderer/GL2Renderer.h
index 4fe009bf..d837ee37 100644
--- a/src/tdme/engine/subsystems/renderer/GL2Renderer.h
+++ b/src/tdme/engine/subsystems/renderer/GL2Renderer.h
@@ -155,9 +155,9 @@ public:
 	void bindSkinningVertexJointsBufferObject(void* context, int32_t bufferObjectId) override;
 	void bindSkinningVertexJointIdxsBufferObject(void* context, int32_t bufferObjectId) override;
 	void bindSkinningVertexJointWeightsBufferObject(void* context, int32_t bufferObjectId) override;
-	void bindSkinningVerticesResultBufferObject(void* context, int32_t bufferObjectId) override;
-	void bindSkinningNormalsResultBufferObject(void* context, int32_t bufferObjectId) override;
-	void bindSkinningMatricesBufferObject(void* context, 	int32_t bufferObjectId) override;
+	void bindSkinningVerticesResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
+	void bindSkinningNormalsResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
+	void bindSkinningMatricesBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
 
 	//
 	int32_t createVertexArrayObject() override;
diff --git a/src/tdme/engine/subsystems/renderer/GL3Renderer.cpp b/src/tdme/engine/subsystems/renderer/GL3Renderer.cpp
index 5da1e23f..2c15b23f 100644
--- a/src/tdme/engine/subsystems/renderer/GL3Renderer.cpp
+++ b/src/tdme/engine/subsystems/renderer/GL3Renderer.cpp
@@ -833,27 +833,27 @@ void GL3Renderer::bindSkinningVertexJointWeightsBufferObject(void* context, int3
 	#endif
 }
 
-void GL3Renderer::bindSkinningVerticesResultBufferObject(void* context, int32_t bufferObjectId) {
+void GL3Renderer::bindSkinningVerticesResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
 	#if defined (__APPLE__)
 		Console::println("GL3Renderer::bindSkinningVerticesResultBufferObject(): Not implemented");
 	#else
-		glBindBufferBase(GL_SHADER_STORAGE_BUFFER, 5, bufferObjectId);
+		glBindBufferBase(GL_SHADER_STORAGE_BUFFER, 5 + instanceId * 3, bufferObjectId);
 	#endif
 }
 
-void GL3Renderer::bindSkinningNormalsResultBufferObject(void* context, int32_t bufferObjectId) {
+void GL3Renderer::bindSkinningNormalsResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
 	#if defined (__APPLE__)
 		Console::println("GL3Renderer::bindSkinningNormalsResultBufferObject(): Not implemented");
 	#else
-		glBindBufferBase(GL_SHADER_STORAGE_BUFFER, 6, bufferObjectId);
+		glBindBufferBase(GL_SHADER_STORAGE_BUFFER, 6 + instanceId * 3, bufferObjectId);
 	#endif
 }
 
-void GL3Renderer::bindSkinningMatricesBufferObject(void* context, int32_t bufferObjectId) {
+void GL3Renderer::bindSkinningMatricesBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
 	#if defined (__APPLE__)
 		Console::println("GL3Renderer::bindSkinningMatricesBufferObject(): Not implemented");
 	#else
-		glBindBufferBase(GL_SHADER_STORAGE_BUFFER, 7, bufferObjectId);
+		glBindBufferBase(GL_SHADER_STORAGE_BUFFER, 7 + instanceId * 3, bufferObjectId);
 	#endif
 }
 
diff --git a/src/tdme/engine/subsystems/renderer/GL3Renderer.h b/src/tdme/engine/subsystems/renderer/GL3Renderer.h
index 6023419e..38318ad7 100644
--- a/src/tdme/engine/subsystems/renderer/GL3Renderer.h
+++ b/src/tdme/engine/subsystems/renderer/GL3Renderer.h
@@ -136,9 +136,9 @@ public:
 	void bindSkinningVertexJointsBufferObject(void* context, int32_t bufferObjectId) override;
 	void bindSkinningVertexJointIdxsBufferObject(void* context, int32_t bufferObjectId) override;
 	void bindSkinningVertexJointWeightsBufferObject(void* context, int32_t bufferObjectId) override;
-	void bindSkinningVerticesResultBufferObject(void* context, int32_t bufferObjectId) override;
-	void bindSkinningNormalsResultBufferObject(void* context, int32_t bufferObjectId) override;
-	void bindSkinningMatricesBufferObject(void* context, int32_t bufferObjectId) override;
+	void bindSkinningVerticesResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
+	void bindSkinningNormalsResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
+	void bindSkinningMatricesBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
 	int32_t createVertexArrayObject() override;
 	void disposeVertexArrayObject(int32_t vertexArrayObjectId) override;
 	void bindVertexArrayObject(int32_t vertexArrayObjectId) override;
diff --git a/src/tdme/engine/subsystems/renderer/GLES2Renderer.cpp b/src/tdme/engine/subsystems/renderer/GLES2Renderer.cpp
index 311ca162..e3eb325e 100644
--- a/src/tdme/engine/subsystems/renderer/GLES2Renderer.cpp
+++ b/src/tdme/engine/subsystems/renderer/GLES2Renderer.cpp
@@ -713,15 +713,15 @@ void GLES2Renderer::bindSkinningVertexJointWeightsBufferObject(void* context, in
 	Console::println("GLES2Renderer::bindSkinningVertexJointWeightsBufferObject(): Not implemented");
 }
 
-void GLES2Renderer::bindSkinningVerticesResultBufferObject(void* context, int32_t bufferObjectId) {
+void GLES2Renderer::bindSkinningVerticesResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
 	Console::println("GLES2Renderer::bindSkinningVerticesResultBufferObject(): Not implemented");
 }
 
-void GLES2Renderer::bindSkinningNormalsResultBufferObject(void* context, int32_t bufferObjectId) {
+void GLES2Renderer::bindSkinningNormalsResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
 	Console::println("GLES2Renderer::bindSkinningNormalsResultBufferObject(): Not implemented");
 }
 
-void GLES2Renderer::bindSkinningMatricesBufferObject(void* context, int32_t bufferObjectId) {
+void GLES2Renderer::bindSkinningMatricesBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
 	Console::println("GLES2Renderer::bindSkinningMatricesBufferObject(): Not implemented");
 }
 
diff --git a/src/tdme/engine/subsystems/renderer/GLES2Renderer.h b/src/tdme/engine/subsystems/renderer/GLES2Renderer.h
index 8859d025..f676e8b7 100644
--- a/src/tdme/engine/subsystems/renderer/GLES2Renderer.h
+++ b/src/tdme/engine/subsystems/renderer/GLES2Renderer.h
@@ -134,9 +134,9 @@ public:
 	void bindSkinningVertexJointsBufferObject(void* context, int32_t bufferObjectId) override;
 	void bindSkinningVertexJointIdxsBufferObject(void* context, int32_t bufferObjectId) override;
 	void bindSkinningVertexJointWeightsBufferObject(void* context, int32_t bufferObjectId) override;
-	void bindSkinningVerticesResultBufferObject(void* context, int32_t bufferObjectId) override;
-	void bindSkinningNormalsResultBufferObject(void* context, int32_t bufferObjectId) override;
-	void bindSkinningMatricesBufferObject(void* context, int32_t bufferObjectId) override;
+	void bindSkinningVerticesResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
+	void bindSkinningNormalsResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
+	void bindSkinningMatricesBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
 
 	//
 	int32_t createVertexArrayObject() override;
diff --git a/src/tdme/engine/subsystems/renderer/Renderer.h b/src/tdme/engine/subsystems/renderer/Renderer.h
index 4d5a29b3..5042f4c6 100644
--- a/src/tdme/engine/subsystems/renderer/Renderer.h
+++ b/src/tdme/engine/subsystems/renderer/Renderer.h
@@ -985,21 +985,21 @@ public:
 	 * @param context context
 	 * @param bufferObjectId buffer object id
 	 */
-	virtual void bindSkinningVerticesResultBufferObject(void* context, int32_t bufferObjectId) = 0;
+	virtual void bindSkinningVerticesResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) = 0;
 
 	/**
 	 * Bind skinning normals result buffer object
 	 * @param context context
 	 * @param bufferObjectId buffer object id
 	 */
-	virtual void bindSkinningNormalsResultBufferObject(void* context, int32_t bufferObjectId) = 0;
+	virtual void bindSkinningNormalsResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) = 0;
 
 	/**
 	 * Bind skinning matrices result buffer object
 	 * @param context context
 	 * @param bufferObjectId buffer object id
 	 */
-	virtual void bindSkinningMatricesBufferObject(void* context, int32_t bufferObjectId) = 0;
+	virtual void bindSkinningMatricesBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) = 0;
 
 	/**
 	 * Create a single vertex array object
diff --git a/src/tdme/engine/subsystems/renderer/VKRenderer.cpp b/src/tdme/engine/subsystems/renderer/VKRenderer.cpp
index ae97f58c..fbeaf70c 100644
--- a/src/tdme/engine/subsystems/renderer/VKRenderer.cpp
+++ b/src/tdme/engine/subsystems/renderer/VKRenderer.cpp
@@ -5441,15 +5441,15 @@ void VKRenderer::bindSkinningVertexJointWeightsBufferObject(void* context, int32
 	(*static_cast<context_type*>(context)).bound_buffers[4] = bufferObjectId;
 }
 
-void VKRenderer::bindSkinningVerticesResultBufferObject(void* context, int32_t bufferObjectId) {
+void VKRenderer::bindSkinningVerticesResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
 	(*static_cast<context_type*>(context)).bound_buffers[5] = bufferObjectId;
 }
 
-void VKRenderer::bindSkinningNormalsResultBufferObject(void* context, int32_t bufferObjectId) {
+void VKRenderer::bindSkinningNormalsResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
 	(*static_cast<context_type*>(context)).bound_buffers[6] = bufferObjectId;
 }
 
-void VKRenderer::bindSkinningMatricesBufferObject(void* context, int32_t bufferObjectId) {
+void VKRenderer::bindSkinningMatricesBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
 	(*static_cast<context_type*>(context)).bound_buffers[7] = bufferObjectId;
 }
 
diff --git a/src/tdme/engine/subsystems/renderer/VKRenderer.h b/src/tdme/engine/subsystems/renderer/VKRenderer.h
index 0ae450f6..3f2600b0 100644
--- a/src/tdme/engine/subsystems/renderer/VKRenderer.h
+++ b/src/tdme/engine/subsystems/renderer/VKRenderer.h
@@ -486,9 +486,9 @@ public:
 	void bindSkinningVertexJointsBufferObject(void* context, int32_t bufferObjectId) override;
 	void bindSkinningVertexJointIdxsBufferObject(void* context, int32_t bufferObjectId) override;
 	void bindSkinningVertexJointWeightsBufferObject(void* context, int32_t bufferObjectId) override;
-	void bindSkinningVerticesResultBufferObject(void* context, int32_t bufferObjectId) override;
-	void bindSkinningNormalsResultBufferObject(void* context, int32_t bufferObjectId) override;
-	void bindSkinningMatricesBufferObject(void* context, int32_t bufferObjectId) override;
+	void bindSkinningVerticesResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
+	void bindSkinningNormalsResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
+	void bindSkinningMatricesBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
 
 	//
 	int32_t createVertexArrayObject() override;
diff --git a/src/tdme/engine/subsystems/skinning/SkinningShader.cpp b/src/tdme/engine/subsystems/skinning/SkinningShader.cpp
index 6b11211b..37595037 100644
--- a/src/tdme/engine/subsystems/skinning/SkinningShader.cpp
+++ b/src/tdme/engine/subsystems/skinning/SkinningShader.cpp
@@ -77,8 +77,10 @@ void SkinningShader::initialize()
 	if (renderer->linkProgram(programId) == false) return;
 
 	//
-	uniformSkinningCount = renderer->getProgramUniformLocation(programId, "skinningCount");
-	if (uniformSkinningCount == -1) return;
+	uniformVertexCount = renderer->getProgramUniformLocation(programId, "vertexCount");
+	if (uniformVertexCount == -1) return;
+	uniformInstanceCount = renderer->getProgramUniformLocation(programId, "instanceCount");
+	if (uniformInstanceCount == -1) return;
 
 	//
 	initialized = true;
@@ -90,6 +92,40 @@ void SkinningShader::useProgram()
 	renderer->useProgram(programId);
 }
 
+void SkinningShader::flushComputeCommands(void* context, ModelSkinningCache* modelSkinningCache) {
+	auto contextIdx = renderer->getContextIndex(context);
+	auto instanceCount = 0;
+
+	// bind shared data
+	renderer->bindSkinningVerticesBufferObject(context, (*modelSkinningCache->vboIds)[0]);
+	renderer->bindSkinningNormalsBufferObject(context, (*modelSkinningCache->vboIds)[1]);
+	renderer->bindSkinningVertexJointsBufferObject(context, (*modelSkinningCache->vboIds)[2]);
+	renderer->bindSkinningVertexJointIdxsBufferObject(context, (*modelSkinningCache->vboIds)[3]);
+	renderer->bindSkinningVertexJointWeightsBufferObject(context, (*modelSkinningCache->vboIds)[4]);
+
+	//
+	for (auto& computeCommand: modelSkinningCache->computeCommands[contextIdx]) {
+		renderer->bindSkinningMatricesBufferObject(context, computeCommand.idx, (*modelSkinningCache->matricesVboIds[computeCommand.idx][contextIdx])[0]);
+
+		// bind output / result buffers
+		renderer->bindSkinningVerticesResultBufferObject(context, computeCommand.idx, computeCommand.verticesBufferObjectId);
+		renderer->bindSkinningNormalsResultBufferObject(context, computeCommand.idx, computeCommand.normalsBufferObjectId);
+
+		//
+		instanceCount++;
+	}
+
+	// skinning count
+	renderer->setProgramUniformInteger(context, uniformInstanceCount, instanceCount);
+	renderer->setProgramUniformInteger(context, uniformVertexCount, modelSkinningCache->vertexCount);
+
+	// do it so
+	renderer->dispatchCompute(context, (int)Math::ceil(modelSkinningCache->vertexCount / 16.0f), 1, 1);
+
+	//
+	modelSkinningCache->computeCommands[contextIdx].clear();
+}
+
 void SkinningShader::computeSkinning(void* context, Object3DGroupMesh* object3DGroupMesh)
 {
 	//
@@ -103,7 +139,7 @@ void SkinningShader::computeSkinning(void* context, Object3DGroupMesh* object3DG
 	auto group = object3DGroupMesh->group;
 	auto& vertices = *group->getVertices();
 	auto id = group->getModel()->getId() + "." + group->getId();
-	mutex.lock();
+	//mutex.lock();
 	auto cacheIt = cache.find(id);
 	if (cacheIt == cache.end()) {
 		ModelSkinningCache modelSkinningCache;
@@ -112,20 +148,19 @@ void SkinningShader::computeSkinning(void* context, Object3DGroupMesh* object3DG
 		auto& verticesJointsWeights = *skinning->getVerticesJointsWeights();
 		auto& weights = *skinning->getWeights();
 
+		// init per thread compute commands
+		modelSkinningCache.computeCommands.resize(Engine::getThreadCount());
+
 		// vbos
 		{
 			auto vboManaged = Engine::getVBOManager()->addVBO("skinning_compute_shader." + id + ".vbos", 5, true);
 			modelSkinningCache.vboIds = vboManaged->getVBOIds();
 		}
 		{
-			if (renderer->isSupportingMultithreadedRendering() == true) {
-				for (auto i = 0; i < Engine::getThreadCount(); i++) {
-					auto vboManaged = Engine::getVBOManager()->addVBO("skinning_compute_shader." + id + ".vbos.matrices." + to_string(i), 1, false);
-					modelSkinningCache.matricesVboIds.push_back(vboManaged->getVBOIds());
-				}
-			} else {
-				auto vboManaged = Engine::getVBOManager()->addVBO("skinning_compute_shader." + id + ".vbos.matrices", 1, false);
-				modelSkinningCache.matricesVboIds.push_back(vboManaged->getVBOIds());
+			for (auto i = 0; i < modelSkinningCache.matricesVboIds.size(); i++)
+			for (auto j = 0; j < Engine::getThreadCount(); j++) {
+				auto vboManaged = Engine::getVBOManager()->addVBO("skinning_compute_shader." + id + ".vbos.matrices." + to_string(i) + "." + to_string(j), 1, false);
+				modelSkinningCache.matricesVboIds[i].push_back(vboManaged->getVBOIds());
 			}
 		}
 
@@ -177,25 +212,20 @@ void SkinningShader::computeSkinning(void* context, Object3DGroupMesh* object3DG
 			renderer->uploadSkinningBufferObject(context, (*modelSkinningCache.vboIds)[4], fbVerticesVertexJointsWeights.getPosition() * sizeof(float), &fbVerticesVertexJointsWeights);
 		}
 
+		modelSkinningCache.vertexCount = vertices.size();
+
 		// add to cache
 		cache[id] = modelSkinningCache;
 		modelSkinningCacheCached = &cache[id];
 	} else {
 		modelSkinningCacheCached = &cacheIt->second;
 	}
-	mutex.unlock();
+	//mutex.unlock();
 
-	// bind
-	renderer->bindSkinningVerticesBufferObject(context, (*modelSkinningCacheCached->vboIds)[0]);
-	renderer->bindSkinningNormalsBufferObject(context, (*modelSkinningCacheCached->vboIds)[1]);
-	renderer->bindSkinningVertexJointsBufferObject(context, (*modelSkinningCacheCached->vboIds)[2]);
-	renderer->bindSkinningVertexJointIdxsBufferObject(context, (*modelSkinningCacheCached->vboIds)[3]);
-	renderer->bindSkinningVertexJointWeightsBufferObject(context, (*modelSkinningCacheCached->vboIds)[4]);
-	renderer->bindSkinningMatricesBufferObject(context, (*modelSkinningCacheCached->matricesVboIds[contextIdx])[0]);
-
-	// bind output / result buffers
-	renderer->bindSkinningVerticesResultBufferObject(context, (*vboBaseIds)[1]);
-	renderer->bindSkinningNormalsResultBufferObject(context, (*vboBaseIds)[2]);
+	// flush if required
+	if (modelSkinningCacheCached->computeCommands[contextIdx].size() >= 15) {
+		flushComputeCommands(context, modelSkinningCacheCached);
+	}
 
 	// upload matrices
 	{
@@ -205,14 +235,19 @@ void SkinningShader::computeSkinning(void* context, Object3DGroupMesh* object3DG
 		for (auto& joint: *skinningJoints) {
 			fbMatrices.put(object3DGroupMesh->skinningMatrices->find(joint.getGroupId())->second->getArray());
 		}
-		renderer->uploadSkinningBufferObject(context, (*modelSkinningCacheCached->matricesVboIds[contextIdx])[0], fbMatrices.getPosition() * sizeof(float), &fbMatrices);
+		renderer->uploadSkinningBufferObject(
+			context, (*modelSkinningCacheCached->matricesVboIds[modelSkinningCacheCached->computeCommands[contextIdx].size()][contextIdx])[0],
+			fbMatrices.getPosition() * sizeof(float),
+			&fbMatrices
+		);
 	}
 
-	// skinning count
-	renderer->setProgramUniformInteger(context, uniformSkinningCount, vertices.size());
-
-	// do it so
-	renderer->dispatchCompute(context, (int)Math::ceil(vertices.size() / 16.0f), 1, 1);
+	// add to compute commands
+	modelSkinningCacheCached->computeCommands[contextIdx].push_back({
+		.idx = modelSkinningCacheCached->computeCommands[contextIdx].size(),
+		.verticesBufferObjectId = (*vboBaseIds)[1],
+		.normalsBufferObjectId = (*vboBaseIds)[2]
+	});
 }
 
 void SkinningShader::unUseProgram()
diff --git a/src/tdme/engine/subsystems/skinning/SkinningShader.h b/src/tdme/engine/subsystems/skinning/SkinningShader.h
index b8862d61..cad5e423 100644
--- a/src/tdme/engine/subsystems/skinning/SkinningShader.h
+++ b/src/tdme/engine/subsystems/skinning/SkinningShader.h
@@ -1,5 +1,6 @@
 #pragma once
 
+#include <array>
 #include <map>
 #include <string>
 #include <vector>
@@ -11,6 +12,7 @@
 #include <tdme/math/Matrix4x4.h>
 #include <tdme/os/threading/Mutex.h>
 
+using std::array;
 using std::map;
 using std::string;
 using std::vector;
@@ -28,21 +30,36 @@ using tdme::os::threading::Mutex;
 class tdme::engine::subsystems::skinning::SkinningShader final
 {
 private:
+	struct ModelSkinningComputeCommand {
+		int32_t idx;
+		int32_t verticesBufferObjectId;
+		int32_t normalsBufferObjectId;
+	};
 	struct ModelSkinningCache {
 		string id;
 		vector<int32_t>* vboIds;
-		vector<vector<int32_t>*> matricesVboIds;
+		array<vector<vector<int32_t>*>, 15> matricesVboIds;
+		int32_t vertexCount;
+		vector<vector<ModelSkinningComputeCommand>> computeCommands;
 	};
 
 	int32_t programId {  };
 	int32_t shaderId {  };
-	int32_t uniformSkinningCount { -1 };
+	int32_t uniformInstanceCount { -1 };
+	int32_t uniformVertexCount { -1 };
 	bool isRunning {  };
 	bool initialized {  };
 	Renderer* renderer {  };
 	map<string, ModelSkinningCache> cache;
 	Mutex mutex;
 
+	/**
+	 * Flush compute commands
+	 * @param context context
+	 * @param modelSkinningCache model skinning cache
+	 */
+	void flushComputeCommands(void* context, ModelSkinningCache* modelSkinningCache);
+
 public:
 
 	/** 
