diff --git a/patches/190920-skinning.diff b/patches/190920-skinning.diff
deleted file mode 100644
index c94cde81..00000000
--- a/patches/190920-skinning.diff
+++ /dev/null
@@ -1,548 +0,0 @@
-diff --git a/shader/gl3/skinning/skinning.c b/shader/gl3/skinning/skinning.c
-index 2dd5e2ef..0c055aa7 100644
---- a/shader/gl3/skinning/skinning.c
-+++ b/shader/gl3/skinning/skinning.c
-@@ -7,38 +7,100 @@ layout(std430,binding=1) buffer InNormal { float inNormalFloatArray[]; };
- layout(std430,binding=2) buffer InSkinningVertexJoints { int inSkinningVertexJoints[]; };
- layout(std430,binding=3) buffer InSkinningVertexJointIdxs { int inSkinningVertexJointIdxs[]; };
- layout(std430,binding=4) buffer InSkinningVertexJointWeights { float inSkinningVertexJointWeights[]; };
--layout(std430,binding=5) buffer OutVertex { float outVertexFloatArray[]; };
--layout(std430,binding=6) buffer OutNormal { float outNormalFloatArray[]; };
--layout(std430,binding=7) buffer InSkinningJointsTransformationMatrices{ mat4 inSkinningJointsTransformationsMatrices[]; };
-+layout(std430,binding=5) buffer OutVertex0 { float outVertexFloatArray0[]; };
-+layout(std430,binding=6) buffer OutNormal0 { float outNormalFloatArray0[]; };
-+layout(std430,binding=7) buffer InSkinningJointsTransformationMatrices0 { mat4 inSkinningJointsTransformationsMatrices0[]; };
-+layout(std430,binding=8) buffer OutVertex1 { float outVertexFloatArray1[]; };
-+layout(std430,binding=9) buffer OutNormal1 { float outNormalFloatArray1[]; };
-+layout(std430,binding=10) buffer InSkinningJointsTransformationMatrices1 { mat4 inSkinningJointsTransformationsMatrices1[]; };
-+layout(std430,binding=11) buffer OutVertex2 { float outVertexFloatArray2[]; };
-+layout(std430,binding=12) buffer OutNormal2 { float outNormalFloatArray2[]; };
-+layout(std430,binding=13) buffer InSkinningJointsTransformationMatrices2 { mat4 inSkinningJointsTransformationsMatrices2[]; };
-+layout(std430,binding=14) buffer OutVertex3 { float outVertexFloatArray3[]; };
-+layout(std430,binding=15) buffer OutNormal3 { float outNormalFloatArray3[]; };
-+layout(std430,binding=16) buffer InSkinningJointsTransformationMatrices3 { mat4 inSkinningJointsTransformationsMatrices3[]; };
-+layout(std430,binding=17) buffer OutVertex4 { float outVertexFloatArray4[]; };
-+layout(std430,binding=18) buffer OutNormal4 { float outNormalFloatArray4[]; };
-+layout(std430,binding=19) buffer InSkinningJointsTransformationMatrices4 { mat4 inSkinningJointsTransformationsMatrices4[]; };
-+layout(std430,binding=20) buffer OutVertex5 { float outVertexFloatArray5[]; };
-+layout(std430,binding=21) buffer OutNormal5 { float outNormalFloatArray5[]; };
-+layout(std430,binding=22) buffer InSkinningJointsTransformationMatrices5 { mat4 inSkinningJointsTransformationsMatrices5[]; };
-+layout(std430,binding=23) buffer OutVertex6 { float outVertexFloatArray6[]; };
-+layout(std430,binding=24) buffer OutNormal6 { float outNormalFloatArray6[]; };
-+layout(std430,binding=25) buffer InSkinningJointsTransformationMatrices6 { mat4 inSkinningJointsTransformationsMatrices6[]; };
-+layout(std430,binding=26) buffer OutVertex7 { float outVertexFloatArray7[]; };
-+layout(std430,binding=27) buffer OutNormal7 { float outNormalFloatArray7[]; };
-+layout(std430,binding=28) buffer InSkinningJointsTransformationMatrices7 { mat4 inSkinningJointsTransformationsMatrices7[]; };
-+layout(std430,binding=29) buffer OutVertex8 { float outVertexFloatArray8[]; };
-+layout(std430,binding=30) buffer OutNormal8 { float outNormalFloatArray8[]; };
-+layout(std430,binding=31) buffer InSkinningJointsTransformationMatrices8 { mat4 inSkinningJointsTransformationsMatrices8[]; };
-+layout(std430,binding=32) buffer OutVertex9 { float outVertexFloatArray9[]; };
-+layout(std430,binding=33) buffer OutNormal9 { float outNormalFloatArray9[]; };
-+layout(std430,binding=34) buffer InSkinningJointsTransformationMatrices9 { mat4 inSkinningJointsTransformationsMatrices9[]; };
-+layout(std430,binding=35) buffer OutVertex10 { float outVertexFloatArray10[]; };
-+layout(std430,binding=36) buffer OutNormal10 { float outNormalFloatArray10[]; };
-+layout(std430,binding=37) buffer InSkinningJointsTransformationMatrices10 { mat4 inSkinningJointsTransformationsMatrices10[]; };
-+layout(std430,binding=38) buffer OutVertex11 { float outVertexFloatArray11[]; };
-+layout(std430,binding=39) buffer OutNormal11 { float outNormalFloatArray11[]; };
-+layout(std430,binding=40) buffer InSkinningJointsTransformationMatrices11 { mat4 inSkinningJointsTransformationsMatrices11[]; };
-+layout(std430,binding=41) buffer OutVertex12 { float outVertexFloatArray12[]; };
-+layout(std430,binding=42) buffer OutNormal12 { float outNormalFloatArray12[]; };
-+layout(std430,binding=43) buffer InSkinningJointsTransformationMatrices12 { mat4 inSkinningJointsTransformationsMatrices12[]; };
-+layout(std430,binding=44) buffer OutVertex13 { float outVertexFloatArray13[]; };
-+layout(std430,binding=45) buffer OutNormal13 { float outNormalFloatArray13[]; };
-+layout(std430,binding=46) buffer InSkinningJointsTransformationMatrices13 { mat4 inSkinningJointsTransformationsMatrices13[]; };
-+layout(std430,binding=47) buffer OutVertex14 { float outVertexFloatArray14[]; };
-+layout(std430,binding=48) buffer OutNormal14 { float outNormalFloatArray14[]; };
-+layout(std430,binding=49) buffer InSkinningJointsTransformationMatrices14 { mat4 inSkinningJointsTransformationsMatrices14[]; };
- 
- // uniforms
--uniform int skinningCount;
-+uniform int instanceCount;
-+uniform int vertexCount;
-+
-+#define computeSkinning(outVertexFloatArray, outNormalFloatArray, inSkinningJointsTransformationsMatrices) \
-+{ \
-+	vec3 skinnedVertex = vec3(0.0, 0.0, 0.0); \
-+	vec3 skinnedNormal = vec3(0.0, 0.0, 0.0); \
-+	float totalWeights = 0.0; \
-+	vec3 inVertex = vec3(inVertexFloatArray[offset * 3 + 0], inVertexFloatArray[offset * 3 + 1], inVertexFloatArray[offset * 3 + 2]); \
-+	vec3 inNormal = vec3(inNormalFloatArray[offset * 3 + 0], inNormalFloatArray[offset * 3 + 1], inNormalFloatArray[offset * 3 + 2]); \
-+	for (int i = 0; i < inSkinningVertexJoints[offset]; i++) { \
-+		mat4 transformationsMatrix = inSkinningJointsTransformationsMatrices[inSkinningVertexJointIdxs[offset * 4 + i]]; \
-+		skinnedVertex+= (transformationsMatrix * vec4(inVertex, 1.0)).xyz * inSkinningVertexJointWeights[offset * 4 + i]; \
-+		skinnedNormal+= (mat3(transformationsMatrix) * inNormal) * inSkinningVertexJointWeights[offset * 4 + i]; \
-+		totalWeights+= inSkinningVertexJointWeights[offset * 4 + i]; \
-+	} \
-+	if (totalWeights != 1.0) { \
-+		float weightNormalized = totalWeights != 0.0?1.0 / totalWeights:0.0; \
-+		skinnedVertex*= weightNormalized; \
-+		skinnedNormal*= weightNormalized; \
-+	} \
-+	outVertexFloatArray[offset * 3 + 0] = skinnedVertex.x; \
-+	outVertexFloatArray[offset * 3 + 1] = skinnedVertex.y; \
-+	outVertexFloatArray[offset * 3 + 2] = skinnedVertex.z; \
-+	outNormalFloatArray[offset * 3 + 0] = skinnedNormal.x; \
-+	outNormalFloatArray[offset * 3 + 1] = skinnedNormal.y; \
-+	outNormalFloatArray[offset * 3 + 2] = skinnedNormal.z; \
-+}
- 
- void main() {
- 	// TODO: tangents and bitangents
- 	int offset = int(gl_GlobalInvocationID.x);
--	if (offset < skinningCount) {
--		vec3 skinnedVertex = vec3(0.0, 0.0, 0.0);
--		vec3 skinnedNormal = vec3(0.0, 0.0, 0.0);
--		float totalWeights = 0.0;
--		vec3 inVertex = vec3(inVertexFloatArray[offset * 3 + 0], inVertexFloatArray[offset * 3 + 1], inVertexFloatArray[offset * 3 + 2]);
--		vec3 inNormal = vec3(inNormalFloatArray[offset * 3 + 0], inNormalFloatArray[offset * 3 + 1], inNormalFloatArray[offset * 3 + 2]);
--		for (int i = 0; i < inSkinningVertexJoints[offset]; i++) {
--			mat4 transformationsMatrix = inSkinningJointsTransformationsMatrices[inSkinningVertexJointIdxs[offset * 4 + i]];
--			skinnedVertex+= (transformationsMatrix * vec4(inVertex, 1.0)).xyz * inSkinningVertexJointWeights[offset * 4 + i];
--			skinnedNormal+= (mat3(transformationsMatrix) * inNormal) * inSkinningVertexJointWeights[offset * 4 + i];
--			totalWeights+= inSkinningVertexJointWeights[offset * 4 + i];
--		}
--		if (totalWeights != 1.0) {
--			float weightNormalized = totalWeights != 0.0?1.0 / totalWeights:0.0;
--			skinnedVertex*= weightNormalized;
--			skinnedNormal*= weightNormalized;
--		}
--		outVertexFloatArray[offset * 3 + 0] = skinnedVertex.x;
--		outVertexFloatArray[offset * 3 + 1] = skinnedVertex.y;
--		outVertexFloatArray[offset * 3 + 2] = skinnedVertex.z;
--		outNormalFloatArray[offset * 3 + 0] = skinnedNormal.x;
--		outNormalFloatArray[offset * 3 + 1] = skinnedNormal.y;
--		outNormalFloatArray[offset * 3 + 2] = skinnedNormal.z;
-+	if (offset < vertexCount) {
-+		if (instanceCount >= 1) computeSkinning(outVertexFloatArray0, outNormalFloatArray0, inSkinningJointsTransformationsMatrices0);
-+		if (instanceCount >= 2) computeSkinning(outVertexFloatArray1, outNormalFloatArray1, inSkinningJointsTransformationsMatrices1);
-+		if (instanceCount >= 3) computeSkinning(outVertexFloatArray2, outNormalFloatArray2, inSkinningJointsTransformationsMatrices2);
-+		if (instanceCount >= 4) computeSkinning(outVertexFloatArray3, outNormalFloatArray3, inSkinningJointsTransformationsMatrices3);
-+		if (instanceCount >= 5) computeSkinning(outVertexFloatArray4, outNormalFloatArray4, inSkinningJointsTransformationsMatrices4);
-+		if (instanceCount >= 6) computeSkinning(outVertexFloatArray5, outNormalFloatArray5, inSkinningJointsTransformationsMatrices5);
-+		if (instanceCount >= 7) computeSkinning(outVertexFloatArray6, outNormalFloatArray6, inSkinningJointsTransformationsMatrices6);
-+		if (instanceCount >= 8) computeSkinning(outVertexFloatArray7, outNormalFloatArray7, inSkinningJointsTransformationsMatrices7);
-+		if (instanceCount >= 9) computeSkinning(outVertexFloatArray8, outNormalFloatArray8, inSkinningJointsTransformationsMatrices8);
-+		if (instanceCount >= 10) computeSkinning(outVertexFloatArray9, outNormalFloatArray9, inSkinningJointsTransformationsMatrices9);
-+		if (instanceCount >= 11) computeSkinning(outVertexFloatArray10, outNormalFloatArray10, inSkinningJointsTransformationsMatrices10);
-+		if (instanceCount >= 12) computeSkinning(outVertexFloatArray11, outNormalFloatArray11, inSkinningJointsTransformationsMatrices11);
-+		if (instanceCount >= 13) computeSkinning(outVertexFloatArray12, outNormalFloatArray12, inSkinningJointsTransformationsMatrices12);
-+		if (instanceCount >= 14) computeSkinning(outVertexFloatArray13, outNormalFloatArray13, inSkinningJointsTransformationsMatrices13);
-+		if (instanceCount >= 15) computeSkinning(outVertexFloatArray14, outNormalFloatArray14, inSkinningJointsTransformationsMatrices14);
- 	}
- }
-diff --git a/src/tdme/engine/subsystems/renderer/GL2Renderer.cpp b/src/tdme/engine/subsystems/renderer/GL2Renderer.cpp
-index ac6c92a9..3f49419a 100644
---- a/src/tdme/engine/subsystems/renderer/GL2Renderer.cpp
-+++ b/src/tdme/engine/subsystems/renderer/GL2Renderer.cpp
-@@ -756,15 +756,15 @@ void GL2Renderer::bindSkinningVertexJointWeightsBufferObject(void* context, int3
- 	Console::println("GL2Renderer::bindSkinningVertexJointWeightsBufferObject(): Not implemented");
- }
- 
--void GL2Renderer::bindSkinningVerticesResultBufferObject(void* context, int32_t bufferObjectId) {
-+void GL2Renderer::bindSkinningVerticesResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
- 	Console::println("GL2Renderer::bindSkinningVerticesResultBufferObject(): Not implemented");
- }
- 
--void GL2Renderer::bindSkinningNormalsResultBufferObject(void* context, int32_t bufferObjectId) {
-+void GL2Renderer::bindSkinningNormalsResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
- 	Console::println("GL2Renderer::bindSkinningNormalsResultBufferObject(): Not implemented");
- }
- 
--void GL2Renderer::bindSkinningMatricesBufferObject(void* context, int32_t bufferObjectId) {
-+void GL2Renderer::bindSkinningMatricesBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
- 	Console::println("GL2Renderer::bindSkinningMatricesBufferObject(): Not implemented");
- }
- 
-diff --git a/src/tdme/engine/subsystems/renderer/GL2Renderer.h b/src/tdme/engine/subsystems/renderer/GL2Renderer.h
-index 4fe009bf..d837ee37 100644
---- a/src/tdme/engine/subsystems/renderer/GL2Renderer.h
-+++ b/src/tdme/engine/subsystems/renderer/GL2Renderer.h
-@@ -155,9 +155,9 @@ public:
- 	void bindSkinningVertexJointsBufferObject(void* context, int32_t bufferObjectId) override;
- 	void bindSkinningVertexJointIdxsBufferObject(void* context, int32_t bufferObjectId) override;
- 	void bindSkinningVertexJointWeightsBufferObject(void* context, int32_t bufferObjectId) override;
--	void bindSkinningVerticesResultBufferObject(void* context, int32_t bufferObjectId) override;
--	void bindSkinningNormalsResultBufferObject(void* context, int32_t bufferObjectId) override;
--	void bindSkinningMatricesBufferObject(void* context, 	int32_t bufferObjectId) override;
-+	void bindSkinningVerticesResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
-+	void bindSkinningNormalsResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
-+	void bindSkinningMatricesBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
- 
- 	//
- 	int32_t createVertexArrayObject() override;
-diff --git a/src/tdme/engine/subsystems/renderer/GL3Renderer.cpp b/src/tdme/engine/subsystems/renderer/GL3Renderer.cpp
-index 5da1e23f..2c15b23f 100644
---- a/src/tdme/engine/subsystems/renderer/GL3Renderer.cpp
-+++ b/src/tdme/engine/subsystems/renderer/GL3Renderer.cpp
-@@ -833,27 +833,27 @@ void GL3Renderer::bindSkinningVertexJointWeightsBufferObject(void* context, int3
- 	#endif
- }
- 
--void GL3Renderer::bindSkinningVerticesResultBufferObject(void* context, int32_t bufferObjectId) {
-+void GL3Renderer::bindSkinningVerticesResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
- 	#if defined (__APPLE__)
- 		Console::println("GL3Renderer::bindSkinningVerticesResultBufferObject(): Not implemented");
- 	#else
--		glBindBufferBase(GL_SHADER_STORAGE_BUFFER, 5, bufferObjectId);
-+		glBindBufferBase(GL_SHADER_STORAGE_BUFFER, 5 + instanceId * 3, bufferObjectId);
- 	#endif
- }
- 
--void GL3Renderer::bindSkinningNormalsResultBufferObject(void* context, int32_t bufferObjectId) {
-+void GL3Renderer::bindSkinningNormalsResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
- 	#if defined (__APPLE__)
- 		Console::println("GL3Renderer::bindSkinningNormalsResultBufferObject(): Not implemented");
- 	#else
--		glBindBufferBase(GL_SHADER_STORAGE_BUFFER, 6, bufferObjectId);
-+		glBindBufferBase(GL_SHADER_STORAGE_BUFFER, 6 + instanceId * 3, bufferObjectId);
- 	#endif
- }
- 
--void GL3Renderer::bindSkinningMatricesBufferObject(void* context, int32_t bufferObjectId) {
-+void GL3Renderer::bindSkinningMatricesBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
- 	#if defined (__APPLE__)
- 		Console::println("GL3Renderer::bindSkinningMatricesBufferObject(): Not implemented");
- 	#else
--		glBindBufferBase(GL_SHADER_STORAGE_BUFFER, 7, bufferObjectId);
-+		glBindBufferBase(GL_SHADER_STORAGE_BUFFER, 7 + instanceId * 3, bufferObjectId);
- 	#endif
- }
- 
-diff --git a/src/tdme/engine/subsystems/renderer/GL3Renderer.h b/src/tdme/engine/subsystems/renderer/GL3Renderer.h
-index 6023419e..38318ad7 100644
---- a/src/tdme/engine/subsystems/renderer/GL3Renderer.h
-+++ b/src/tdme/engine/subsystems/renderer/GL3Renderer.h
-@@ -136,9 +136,9 @@ public:
- 	void bindSkinningVertexJointsBufferObject(void* context, int32_t bufferObjectId) override;
- 	void bindSkinningVertexJointIdxsBufferObject(void* context, int32_t bufferObjectId) override;
- 	void bindSkinningVertexJointWeightsBufferObject(void* context, int32_t bufferObjectId) override;
--	void bindSkinningVerticesResultBufferObject(void* context, int32_t bufferObjectId) override;
--	void bindSkinningNormalsResultBufferObject(void* context, int32_t bufferObjectId) override;
--	void bindSkinningMatricesBufferObject(void* context, int32_t bufferObjectId) override;
-+	void bindSkinningVerticesResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
-+	void bindSkinningNormalsResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
-+	void bindSkinningMatricesBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
- 	int32_t createVertexArrayObject() override;
- 	void disposeVertexArrayObject(int32_t vertexArrayObjectId) override;
- 	void bindVertexArrayObject(int32_t vertexArrayObjectId) override;
-diff --git a/src/tdme/engine/subsystems/renderer/GLES2Renderer.cpp b/src/tdme/engine/subsystems/renderer/GLES2Renderer.cpp
-index 311ca162..e3eb325e 100644
---- a/src/tdme/engine/subsystems/renderer/GLES2Renderer.cpp
-+++ b/src/tdme/engine/subsystems/renderer/GLES2Renderer.cpp
-@@ -713,15 +713,15 @@ void GLES2Renderer::bindSkinningVertexJointWeightsBufferObject(void* context, in
- 	Console::println("GLES2Renderer::bindSkinningVertexJointWeightsBufferObject(): Not implemented");
- }
- 
--void GLES2Renderer::bindSkinningVerticesResultBufferObject(void* context, int32_t bufferObjectId) {
-+void GLES2Renderer::bindSkinningVerticesResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
- 	Console::println("GLES2Renderer::bindSkinningVerticesResultBufferObject(): Not implemented");
- }
- 
--void GLES2Renderer::bindSkinningNormalsResultBufferObject(void* context, int32_t bufferObjectId) {
-+void GLES2Renderer::bindSkinningNormalsResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
- 	Console::println("GLES2Renderer::bindSkinningNormalsResultBufferObject(): Not implemented");
- }
- 
--void GLES2Renderer::bindSkinningMatricesBufferObject(void* context, int32_t bufferObjectId) {
-+void GLES2Renderer::bindSkinningMatricesBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
- 	Console::println("GLES2Renderer::bindSkinningMatricesBufferObject(): Not implemented");
- }
- 
-diff --git a/src/tdme/engine/subsystems/renderer/GLES2Renderer.h b/src/tdme/engine/subsystems/renderer/GLES2Renderer.h
-index 8859d025..f676e8b7 100644
---- a/src/tdme/engine/subsystems/renderer/GLES2Renderer.h
-+++ b/src/tdme/engine/subsystems/renderer/GLES2Renderer.h
-@@ -134,9 +134,9 @@ public:
- 	void bindSkinningVertexJointsBufferObject(void* context, int32_t bufferObjectId) override;
- 	void bindSkinningVertexJointIdxsBufferObject(void* context, int32_t bufferObjectId) override;
- 	void bindSkinningVertexJointWeightsBufferObject(void* context, int32_t bufferObjectId) override;
--	void bindSkinningVerticesResultBufferObject(void* context, int32_t bufferObjectId) override;
--	void bindSkinningNormalsResultBufferObject(void* context, int32_t bufferObjectId) override;
--	void bindSkinningMatricesBufferObject(void* context, int32_t bufferObjectId) override;
-+	void bindSkinningVerticesResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
-+	void bindSkinningNormalsResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
-+	void bindSkinningMatricesBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
- 
- 	//
- 	int32_t createVertexArrayObject() override;
-diff --git a/src/tdme/engine/subsystems/renderer/Renderer.h b/src/tdme/engine/subsystems/renderer/Renderer.h
-index 4d5a29b3..5042f4c6 100644
---- a/src/tdme/engine/subsystems/renderer/Renderer.h
-+++ b/src/tdme/engine/subsystems/renderer/Renderer.h
-@@ -985,21 +985,21 @@ public:
- 	 * @param context context
- 	 * @param bufferObjectId buffer object id
- 	 */
--	virtual void bindSkinningVerticesResultBufferObject(void* context, int32_t bufferObjectId) = 0;
-+	virtual void bindSkinningVerticesResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) = 0;
- 
- 	/**
- 	 * Bind skinning normals result buffer object
- 	 * @param context context
- 	 * @param bufferObjectId buffer object id
- 	 */
--	virtual void bindSkinningNormalsResultBufferObject(void* context, int32_t bufferObjectId) = 0;
-+	virtual void bindSkinningNormalsResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) = 0;
- 
- 	/**
- 	 * Bind skinning matrices result buffer object
- 	 * @param context context
- 	 * @param bufferObjectId buffer object id
- 	 */
--	virtual void bindSkinningMatricesBufferObject(void* context, int32_t bufferObjectId) = 0;
-+	virtual void bindSkinningMatricesBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) = 0;
- 
- 	/**
- 	 * Create a single vertex array object
-diff --git a/src/tdme/engine/subsystems/renderer/VKRenderer.cpp b/src/tdme/engine/subsystems/renderer/VKRenderer.cpp
-index ae97f58c..fbeaf70c 100644
---- a/src/tdme/engine/subsystems/renderer/VKRenderer.cpp
-+++ b/src/tdme/engine/subsystems/renderer/VKRenderer.cpp
-@@ -5441,15 +5441,15 @@ void VKRenderer::bindSkinningVertexJointWeightsBufferObject(void* context, int32
- 	(*static_cast<context_type*>(context)).bound_buffers[4] = bufferObjectId;
- }
- 
--void VKRenderer::bindSkinningVerticesResultBufferObject(void* context, int32_t bufferObjectId) {
-+void VKRenderer::bindSkinningVerticesResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
- 	(*static_cast<context_type*>(context)).bound_buffers[5] = bufferObjectId;
- }
- 
--void VKRenderer::bindSkinningNormalsResultBufferObject(void* context, int32_t bufferObjectId) {
-+void VKRenderer::bindSkinningNormalsResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
- 	(*static_cast<context_type*>(context)).bound_buffers[6] = bufferObjectId;
- }
- 
--void VKRenderer::bindSkinningMatricesBufferObject(void* context, int32_t bufferObjectId) {
-+void VKRenderer::bindSkinningMatricesBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
- 	(*static_cast<context_type*>(context)).bound_buffers[7] = bufferObjectId;
- }
- 
-diff --git a/src/tdme/engine/subsystems/renderer/VKRenderer.h b/src/tdme/engine/subsystems/renderer/VKRenderer.h
-index 0ae450f6..3f2600b0 100644
---- a/src/tdme/engine/subsystems/renderer/VKRenderer.h
-+++ b/src/tdme/engine/subsystems/renderer/VKRenderer.h
-@@ -486,9 +486,9 @@ public:
- 	void bindSkinningVertexJointsBufferObject(void* context, int32_t bufferObjectId) override;
- 	void bindSkinningVertexJointIdxsBufferObject(void* context, int32_t bufferObjectId) override;
- 	void bindSkinningVertexJointWeightsBufferObject(void* context, int32_t bufferObjectId) override;
--	void bindSkinningVerticesResultBufferObject(void* context, int32_t bufferObjectId) override;
--	void bindSkinningNormalsResultBufferObject(void* context, int32_t bufferObjectId) override;
--	void bindSkinningMatricesBufferObject(void* context, int32_t bufferObjectId) override;
-+	void bindSkinningVerticesResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
-+	void bindSkinningNormalsResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
-+	void bindSkinningMatricesBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
- 
- 	//
- 	int32_t createVertexArrayObject() override;
-diff --git a/src/tdme/engine/subsystems/skinning/SkinningShader.cpp b/src/tdme/engine/subsystems/skinning/SkinningShader.cpp
-index 6b11211b..37595037 100644
---- a/src/tdme/engine/subsystems/skinning/SkinningShader.cpp
-+++ b/src/tdme/engine/subsystems/skinning/SkinningShader.cpp
-@@ -77,8 +77,10 @@ void SkinningShader::initialize()
- 	if (renderer->linkProgram(programId) == false) return;
- 
- 	//
--	uniformSkinningCount = renderer->getProgramUniformLocation(programId, "skinningCount");
--	if (uniformSkinningCount == -1) return;
-+	uniformVertexCount = renderer->getProgramUniformLocation(programId, "vertexCount");
-+	if (uniformVertexCount == -1) return;
-+	uniformInstanceCount = renderer->getProgramUniformLocation(programId, "instanceCount");
-+	if (uniformInstanceCount == -1) return;
- 
- 	//
- 	initialized = true;
-@@ -90,6 +92,40 @@ void SkinningShader::useProgram()
- 	renderer->useProgram(programId);
- }
- 
-+void SkinningShader::flushComputeCommands(void* context, ModelSkinningCache* modelSkinningCache) {
-+	auto contextIdx = renderer->getContextIndex(context);
-+	auto instanceCount = 0;
-+
-+	// bind shared data
-+	renderer->bindSkinningVerticesBufferObject(context, (*modelSkinningCache->vboIds)[0]);
-+	renderer->bindSkinningNormalsBufferObject(context, (*modelSkinningCache->vboIds)[1]);
-+	renderer->bindSkinningVertexJointsBufferObject(context, (*modelSkinningCache->vboIds)[2]);
-+	renderer->bindSkinningVertexJointIdxsBufferObject(context, (*modelSkinningCache->vboIds)[3]);
-+	renderer->bindSkinningVertexJointWeightsBufferObject(context, (*modelSkinningCache->vboIds)[4]);
-+
-+	//
-+	for (auto& computeCommand: modelSkinningCache->computeCommands[contextIdx]) {
-+		renderer->bindSkinningMatricesBufferObject(context, computeCommand.idx, (*modelSkinningCache->matricesVboIds[computeCommand.idx][contextIdx])[0]);
-+
-+		// bind output / result buffers
-+		renderer->bindSkinningVerticesResultBufferObject(context, computeCommand.idx, computeCommand.verticesBufferObjectId);
-+		renderer->bindSkinningNormalsResultBufferObject(context, computeCommand.idx, computeCommand.normalsBufferObjectId);
-+
-+		//
-+		instanceCount++;
-+	}
-+
-+	// skinning count
-+	renderer->setProgramUniformInteger(context, uniformInstanceCount, instanceCount);
-+	renderer->setProgramUniformInteger(context, uniformVertexCount, modelSkinningCache->vertexCount);
-+
-+	// do it so
-+	renderer->dispatchCompute(context, (int)Math::ceil(modelSkinningCache->vertexCount / 16.0f), 1, 1);
-+
-+	//
-+	modelSkinningCache->computeCommands[contextIdx].clear();
-+}
-+
- void SkinningShader::computeSkinning(void* context, Object3DGroupMesh* object3DGroupMesh)
- {
- 	//
-@@ -103,7 +139,7 @@ void SkinningShader::computeSkinning(void* context, Object3DGroupMesh* object3DG
- 	auto group = object3DGroupMesh->group;
- 	auto& vertices = *group->getVertices();
- 	auto id = group->getModel()->getId() + "." + group->getId();
--	mutex.lock();
-+	//mutex.lock();
- 	auto cacheIt = cache.find(id);
- 	if (cacheIt == cache.end()) {
- 		ModelSkinningCache modelSkinningCache;
-@@ -112,20 +148,19 @@ void SkinningShader::computeSkinning(void* context, Object3DGroupMesh* object3DG
- 		auto& verticesJointsWeights = *skinning->getVerticesJointsWeights();
- 		auto& weights = *skinning->getWeights();
- 
-+		// init per thread compute commands
-+		modelSkinningCache.computeCommands.resize(Engine::getThreadCount());
-+
- 		// vbos
- 		{
- 			auto vboManaged = Engine::getVBOManager()->addVBO("skinning_compute_shader." + id + ".vbos", 5, true);
- 			modelSkinningCache.vboIds = vboManaged->getVBOIds();
- 		}
- 		{
--			if (renderer->isSupportingMultithreadedRendering() == true) {
--				for (auto i = 0; i < Engine::getThreadCount(); i++) {
--					auto vboManaged = Engine::getVBOManager()->addVBO("skinning_compute_shader." + id + ".vbos.matrices." + to_string(i), 1, false);
--					modelSkinningCache.matricesVboIds.push_back(vboManaged->getVBOIds());
--				}
--			} else {
--				auto vboManaged = Engine::getVBOManager()->addVBO("skinning_compute_shader." + id + ".vbos.matrices", 1, false);
--				modelSkinningCache.matricesVboIds.push_back(vboManaged->getVBOIds());
-+			for (auto i = 0; i < modelSkinningCache.matricesVboIds.size(); i++)
-+			for (auto j = 0; j < Engine::getThreadCount(); j++) {
-+				auto vboManaged = Engine::getVBOManager()->addVBO("skinning_compute_shader." + id + ".vbos.matrices." + to_string(i) + "." + to_string(j), 1, false);
-+				modelSkinningCache.matricesVboIds[i].push_back(vboManaged->getVBOIds());
- 			}
- 		}
- 
-@@ -177,25 +212,20 @@ void SkinningShader::computeSkinning(void* context, Object3DGroupMesh* object3DG
- 			renderer->uploadSkinningBufferObject(context, (*modelSkinningCache.vboIds)[4], fbVerticesVertexJointsWeights.getPosition() * sizeof(float), &fbVerticesVertexJointsWeights);
- 		}
- 
-+		modelSkinningCache.vertexCount = vertices.size();
-+
- 		// add to cache
- 		cache[id] = modelSkinningCache;
- 		modelSkinningCacheCached = &cache[id];
- 	} else {
- 		modelSkinningCacheCached = &cacheIt->second;
- 	}
--	mutex.unlock();
-+	//mutex.unlock();
- 
--	// bind
--	renderer->bindSkinningVerticesBufferObject(context, (*modelSkinningCacheCached->vboIds)[0]);
--	renderer->bindSkinningNormalsBufferObject(context, (*modelSkinningCacheCached->vboIds)[1]);
--	renderer->bindSkinningVertexJointsBufferObject(context, (*modelSkinningCacheCached->vboIds)[2]);
--	renderer->bindSkinningVertexJointIdxsBufferObject(context, (*modelSkinningCacheCached->vboIds)[3]);
--	renderer->bindSkinningVertexJointWeightsBufferObject(context, (*modelSkinningCacheCached->vboIds)[4]);
--	renderer->bindSkinningMatricesBufferObject(context, (*modelSkinningCacheCached->matricesVboIds[contextIdx])[0]);
--
--	// bind output / result buffers
--	renderer->bindSkinningVerticesResultBufferObject(context, (*vboBaseIds)[1]);
--	renderer->bindSkinningNormalsResultBufferObject(context, (*vboBaseIds)[2]);
-+	// flush if required
-+	if (modelSkinningCacheCached->computeCommands[contextIdx].size() >= 15) {
-+		flushComputeCommands(context, modelSkinningCacheCached);
-+	}
- 
- 	// upload matrices
- 	{
-@@ -205,14 +235,19 @@ void SkinningShader::computeSkinning(void* context, Object3DGroupMesh* object3DG
- 		for (auto& joint: *skinningJoints) {
- 			fbMatrices.put(object3DGroupMesh->skinningMatrices->find(joint.getGroupId())->second->getArray());
- 		}
--		renderer->uploadSkinningBufferObject(context, (*modelSkinningCacheCached->matricesVboIds[contextIdx])[0], fbMatrices.getPosition() * sizeof(float), &fbMatrices);
-+		renderer->uploadSkinningBufferObject(
-+			context, (*modelSkinningCacheCached->matricesVboIds[modelSkinningCacheCached->computeCommands[contextIdx].size()][contextIdx])[0],
-+			fbMatrices.getPosition() * sizeof(float),
-+			&fbMatrices
-+		);
- 	}
- 
--	// skinning count
--	renderer->setProgramUniformInteger(context, uniformSkinningCount, vertices.size());
--
--	// do it so
--	renderer->dispatchCompute(context, (int)Math::ceil(vertices.size() / 16.0f), 1, 1);
-+	// add to compute commands
-+	modelSkinningCacheCached->computeCommands[contextIdx].push_back({
-+		.idx = modelSkinningCacheCached->computeCommands[contextIdx].size(),
-+		.verticesBufferObjectId = (*vboBaseIds)[1],
-+		.normalsBufferObjectId = (*vboBaseIds)[2]
-+	});
- }
- 
- void SkinningShader::unUseProgram()
-diff --git a/src/tdme/engine/subsystems/skinning/SkinningShader.h b/src/tdme/engine/subsystems/skinning/SkinningShader.h
-index b8862d61..cad5e423 100644
---- a/src/tdme/engine/subsystems/skinning/SkinningShader.h
-+++ b/src/tdme/engine/subsystems/skinning/SkinningShader.h
-@@ -1,5 +1,6 @@
- #pragma once
- 
-+#include <array>
- #include <map>
- #include <string>
- #include <vector>
-@@ -11,6 +12,7 @@
- #include <tdme/math/Matrix4x4.h>
- #include <tdme/os/threading/Mutex.h>
- 
-+using std::array;
- using std::map;
- using std::string;
- using std::vector;
-@@ -28,21 +30,36 @@ using tdme::os::threading::Mutex;
- class tdme::engine::subsystems::skinning::SkinningShader final
- {
- private:
-+	struct ModelSkinningComputeCommand {
-+		int32_t idx;
-+		int32_t verticesBufferObjectId;
-+		int32_t normalsBufferObjectId;
-+	};
- 	struct ModelSkinningCache {
- 		string id;
- 		vector<int32_t>* vboIds;
--		vector<vector<int32_t>*> matricesVboIds;
-+		array<vector<vector<int32_t>*>, 15> matricesVboIds;
-+		int32_t vertexCount;
-+		vector<vector<ModelSkinningComputeCommand>> computeCommands;
- 	};
- 
- 	int32_t programId {  };
- 	int32_t shaderId {  };
--	int32_t uniformSkinningCount { -1 };
-+	int32_t uniformInstanceCount { -1 };
-+	int32_t uniformVertexCount { -1 };
- 	bool isRunning {  };
- 	bool initialized {  };
- 	Renderer* renderer {  };
- 	map<string, ModelSkinningCache> cache;
- 	Mutex mutex;
- 
-+	/**
-+	 * Flush compute commands
-+	 * @param context context
-+	 * @param modelSkinningCache model skinning cache
-+	 */
-+	void flushComputeCommands(void* context, ModelSkinningCache* modelSkinningCache);
-+
- public:
- 
- 	/** 
diff --git a/patches/200128-so3drg.patch b/patches/200128-so3drg.patch
index c36fc52d..a1bfa4af 100644
--- a/patches/200128-so3drg.patch
+++ b/patches/200128-so3drg.patch
@@ -553,10 +553,10 @@ index c94cde81..00000000
 - 
 - 	/** 
 diff --git a/patches/200128-so3drg.patch b/patches/200128-so3drg.patch
-index ef8a3902..e69de29b 100644
+index c36fc52d..e69de29b 100644
 --- a/patches/200128-so3drg.patch
 +++ b/patches/200128-so3drg.patch
-@@ -1,1823 +0,0 @@
+@@ -1,3651 +0,0 @@
 -diff --git a/patches/190920-skinning.diff b/patches/190920-skinning.diff
 -deleted file mode 100644
 -index c94cde81..00000000
@@ -1111,6 +1111,1834 @@ index ef8a3902..e69de29b 100644
 -- public:
 -- 
 -- 	/** 
+-diff --git a/patches/200128-so3drg.patch b/patches/200128-so3drg.patch
+-index ef8a3902..e69de29b 100644
+---- a/patches/200128-so3drg.patch
+-+++ b/patches/200128-so3drg.patch
+-@@ -1,1823 +0,0 @@
+--diff --git a/patches/190920-skinning.diff b/patches/190920-skinning.diff
+--deleted file mode 100644
+--index c94cde81..00000000
+----- a/patches/190920-skinning.diff
+--+++ /dev/null
+--@@ -1,548 +0,0 @@
+---diff --git a/shader/gl3/skinning/skinning.c b/shader/gl3/skinning/skinning.c
+---index 2dd5e2ef..0c055aa7 100644
+------ a/shader/gl3/skinning/skinning.c
+---+++ b/shader/gl3/skinning/skinning.c
+---@@ -7,38 +7,100 @@ layout(std430,binding=1) buffer InNormal { float inNormalFloatArray[]; };
+--- layout(std430,binding=2) buffer InSkinningVertexJoints { int inSkinningVertexJoints[]; };
+--- layout(std430,binding=3) buffer InSkinningVertexJointIdxs { int inSkinningVertexJointIdxs[]; };
+--- layout(std430,binding=4) buffer InSkinningVertexJointWeights { float inSkinningVertexJointWeights[]; };
+----layout(std430,binding=5) buffer OutVertex { float outVertexFloatArray[]; };
+----layout(std430,binding=6) buffer OutNormal { float outNormalFloatArray[]; };
+----layout(std430,binding=7) buffer InSkinningJointsTransformationMatrices{ mat4 inSkinningJointsTransformationsMatrices[]; };
+---+layout(std430,binding=5) buffer OutVertex0 { float outVertexFloatArray0[]; };
+---+layout(std430,binding=6) buffer OutNormal0 { float outNormalFloatArray0[]; };
+---+layout(std430,binding=7) buffer InSkinningJointsTransformationMatrices0 { mat4 inSkinningJointsTransformationsMatrices0[]; };
+---+layout(std430,binding=8) buffer OutVertex1 { float outVertexFloatArray1[]; };
+---+layout(std430,binding=9) buffer OutNormal1 { float outNormalFloatArray1[]; };
+---+layout(std430,binding=10) buffer InSkinningJointsTransformationMatrices1 { mat4 inSkinningJointsTransformationsMatrices1[]; };
+---+layout(std430,binding=11) buffer OutVertex2 { float outVertexFloatArray2[]; };
+---+layout(std430,binding=12) buffer OutNormal2 { float outNormalFloatArray2[]; };
+---+layout(std430,binding=13) buffer InSkinningJointsTransformationMatrices2 { mat4 inSkinningJointsTransformationsMatrices2[]; };
+---+layout(std430,binding=14) buffer OutVertex3 { float outVertexFloatArray3[]; };
+---+layout(std430,binding=15) buffer OutNormal3 { float outNormalFloatArray3[]; };
+---+layout(std430,binding=16) buffer InSkinningJointsTransformationMatrices3 { mat4 inSkinningJointsTransformationsMatrices3[]; };
+---+layout(std430,binding=17) buffer OutVertex4 { float outVertexFloatArray4[]; };
+---+layout(std430,binding=18) buffer OutNormal4 { float outNormalFloatArray4[]; };
+---+layout(std430,binding=19) buffer InSkinningJointsTransformationMatrices4 { mat4 inSkinningJointsTransformationsMatrices4[]; };
+---+layout(std430,binding=20) buffer OutVertex5 { float outVertexFloatArray5[]; };
+---+layout(std430,binding=21) buffer OutNormal5 { float outNormalFloatArray5[]; };
+---+layout(std430,binding=22) buffer InSkinningJointsTransformationMatrices5 { mat4 inSkinningJointsTransformationsMatrices5[]; };
+---+layout(std430,binding=23) buffer OutVertex6 { float outVertexFloatArray6[]; };
+---+layout(std430,binding=24) buffer OutNormal6 { float outNormalFloatArray6[]; };
+---+layout(std430,binding=25) buffer InSkinningJointsTransformationMatrices6 { mat4 inSkinningJointsTransformationsMatrices6[]; };
+---+layout(std430,binding=26) buffer OutVertex7 { float outVertexFloatArray7[]; };
+---+layout(std430,binding=27) buffer OutNormal7 { float outNormalFloatArray7[]; };
+---+layout(std430,binding=28) buffer InSkinningJointsTransformationMatrices7 { mat4 inSkinningJointsTransformationsMatrices7[]; };
+---+layout(std430,binding=29) buffer OutVertex8 { float outVertexFloatArray8[]; };
+---+layout(std430,binding=30) buffer OutNormal8 { float outNormalFloatArray8[]; };
+---+layout(std430,binding=31) buffer InSkinningJointsTransformationMatrices8 { mat4 inSkinningJointsTransformationsMatrices8[]; };
+---+layout(std430,binding=32) buffer OutVertex9 { float outVertexFloatArray9[]; };
+---+layout(std430,binding=33) buffer OutNormal9 { float outNormalFloatArray9[]; };
+---+layout(std430,binding=34) buffer InSkinningJointsTransformationMatrices9 { mat4 inSkinningJointsTransformationsMatrices9[]; };
+---+layout(std430,binding=35) buffer OutVertex10 { float outVertexFloatArray10[]; };
+---+layout(std430,binding=36) buffer OutNormal10 { float outNormalFloatArray10[]; };
+---+layout(std430,binding=37) buffer InSkinningJointsTransformationMatrices10 { mat4 inSkinningJointsTransformationsMatrices10[]; };
+---+layout(std430,binding=38) buffer OutVertex11 { float outVertexFloatArray11[]; };
+---+layout(std430,binding=39) buffer OutNormal11 { float outNormalFloatArray11[]; };
+---+layout(std430,binding=40) buffer InSkinningJointsTransformationMatrices11 { mat4 inSkinningJointsTransformationsMatrices11[]; };
+---+layout(std430,binding=41) buffer OutVertex12 { float outVertexFloatArray12[]; };
+---+layout(std430,binding=42) buffer OutNormal12 { float outNormalFloatArray12[]; };
+---+layout(std430,binding=43) buffer InSkinningJointsTransformationMatrices12 { mat4 inSkinningJointsTransformationsMatrices12[]; };
+---+layout(std430,binding=44) buffer OutVertex13 { float outVertexFloatArray13[]; };
+---+layout(std430,binding=45) buffer OutNormal13 { float outNormalFloatArray13[]; };
+---+layout(std430,binding=46) buffer InSkinningJointsTransformationMatrices13 { mat4 inSkinningJointsTransformationsMatrices13[]; };
+---+layout(std430,binding=47) buffer OutVertex14 { float outVertexFloatArray14[]; };
+---+layout(std430,binding=48) buffer OutNormal14 { float outNormalFloatArray14[]; };
+---+layout(std430,binding=49) buffer InSkinningJointsTransformationMatrices14 { mat4 inSkinningJointsTransformationsMatrices14[]; };
+--- 
+--- // uniforms
+----uniform int skinningCount;
+---+uniform int instanceCount;
+---+uniform int vertexCount;
+---+
+---+#define computeSkinning(outVertexFloatArray, outNormalFloatArray, inSkinningJointsTransformationsMatrices) \
+---+{ \
+---+	vec3 skinnedVertex = vec3(0.0, 0.0, 0.0); \
+---+	vec3 skinnedNormal = vec3(0.0, 0.0, 0.0); \
+---+	float totalWeights = 0.0; \
+---+	vec3 inVertex = vec3(inVertexFloatArray[offset * 3 + 0], inVertexFloatArray[offset * 3 + 1], inVertexFloatArray[offset * 3 + 2]); \
+---+	vec3 inNormal = vec3(inNormalFloatArray[offset * 3 + 0], inNormalFloatArray[offset * 3 + 1], inNormalFloatArray[offset * 3 + 2]); \
+---+	for (int i = 0; i < inSkinningVertexJoints[offset]; i++) { \
+---+		mat4 transformationsMatrix = inSkinningJointsTransformationsMatrices[inSkinningVertexJointIdxs[offset * 4 + i]]; \
+---+		skinnedVertex+= (transformationsMatrix * vec4(inVertex, 1.0)).xyz * inSkinningVertexJointWeights[offset * 4 + i]; \
+---+		skinnedNormal+= (mat3(transformationsMatrix) * inNormal) * inSkinningVertexJointWeights[offset * 4 + i]; \
+---+		totalWeights+= inSkinningVertexJointWeights[offset * 4 + i]; \
+---+	} \
+---+	if (totalWeights != 1.0) { \
+---+		float weightNormalized = totalWeights != 0.0?1.0 / totalWeights:0.0; \
+---+		skinnedVertex*= weightNormalized; \
+---+		skinnedNormal*= weightNormalized; \
+---+	} \
+---+	outVertexFloatArray[offset * 3 + 0] = skinnedVertex.x; \
+---+	outVertexFloatArray[offset * 3 + 1] = skinnedVertex.y; \
+---+	outVertexFloatArray[offset * 3 + 2] = skinnedVertex.z; \
+---+	outNormalFloatArray[offset * 3 + 0] = skinnedNormal.x; \
+---+	outNormalFloatArray[offset * 3 + 1] = skinnedNormal.y; \
+---+	outNormalFloatArray[offset * 3 + 2] = skinnedNormal.z; \
+---+}
+--- 
+--- void main() {
+--- 	// TODO: tangents and bitangents
+--- 	int offset = int(gl_GlobalInvocationID.x);
+----	if (offset < skinningCount) {
+----		vec3 skinnedVertex = vec3(0.0, 0.0, 0.0);
+----		vec3 skinnedNormal = vec3(0.0, 0.0, 0.0);
+----		float totalWeights = 0.0;
+----		vec3 inVertex = vec3(inVertexFloatArray[offset * 3 + 0], inVertexFloatArray[offset * 3 + 1], inVertexFloatArray[offset * 3 + 2]);
+----		vec3 inNormal = vec3(inNormalFloatArray[offset * 3 + 0], inNormalFloatArray[offset * 3 + 1], inNormalFloatArray[offset * 3 + 2]);
+----		for (int i = 0; i < inSkinningVertexJoints[offset]; i++) {
+----			mat4 transformationsMatrix = inSkinningJointsTransformationsMatrices[inSkinningVertexJointIdxs[offset * 4 + i]];
+----			skinnedVertex+= (transformationsMatrix * vec4(inVertex, 1.0)).xyz * inSkinningVertexJointWeights[offset * 4 + i];
+----			skinnedNormal+= (mat3(transformationsMatrix) * inNormal) * inSkinningVertexJointWeights[offset * 4 + i];
+----			totalWeights+= inSkinningVertexJointWeights[offset * 4 + i];
+----		}
+----		if (totalWeights != 1.0) {
+----			float weightNormalized = totalWeights != 0.0?1.0 / totalWeights:0.0;
+----			skinnedVertex*= weightNormalized;
+----			skinnedNormal*= weightNormalized;
+----		}
+----		outVertexFloatArray[offset * 3 + 0] = skinnedVertex.x;
+----		outVertexFloatArray[offset * 3 + 1] = skinnedVertex.y;
+----		outVertexFloatArray[offset * 3 + 2] = skinnedVertex.z;
+----		outNormalFloatArray[offset * 3 + 0] = skinnedNormal.x;
+----		outNormalFloatArray[offset * 3 + 1] = skinnedNormal.y;
+----		outNormalFloatArray[offset * 3 + 2] = skinnedNormal.z;
+---+	if (offset < vertexCount) {
+---+		if (instanceCount >= 1) computeSkinning(outVertexFloatArray0, outNormalFloatArray0, inSkinningJointsTransformationsMatrices0);
+---+		if (instanceCount >= 2) computeSkinning(outVertexFloatArray1, outNormalFloatArray1, inSkinningJointsTransformationsMatrices1);
+---+		if (instanceCount >= 3) computeSkinning(outVertexFloatArray2, outNormalFloatArray2, inSkinningJointsTransformationsMatrices2);
+---+		if (instanceCount >= 4) computeSkinning(outVertexFloatArray3, outNormalFloatArray3, inSkinningJointsTransformationsMatrices3);
+---+		if (instanceCount >= 5) computeSkinning(outVertexFloatArray4, outNormalFloatArray4, inSkinningJointsTransformationsMatrices4);
+---+		if (instanceCount >= 6) computeSkinning(outVertexFloatArray5, outNormalFloatArray5, inSkinningJointsTransformationsMatrices5);
+---+		if (instanceCount >= 7) computeSkinning(outVertexFloatArray6, outNormalFloatArray6, inSkinningJointsTransformationsMatrices6);
+---+		if (instanceCount >= 8) computeSkinning(outVertexFloatArray7, outNormalFloatArray7, inSkinningJointsTransformationsMatrices7);
+---+		if (instanceCount >= 9) computeSkinning(outVertexFloatArray8, outNormalFloatArray8, inSkinningJointsTransformationsMatrices8);
+---+		if (instanceCount >= 10) computeSkinning(outVertexFloatArray9, outNormalFloatArray9, inSkinningJointsTransformationsMatrices9);
+---+		if (instanceCount >= 11) computeSkinning(outVertexFloatArray10, outNormalFloatArray10, inSkinningJointsTransformationsMatrices10);
+---+		if (instanceCount >= 12) computeSkinning(outVertexFloatArray11, outNormalFloatArray11, inSkinningJointsTransformationsMatrices11);
+---+		if (instanceCount >= 13) computeSkinning(outVertexFloatArray12, outNormalFloatArray12, inSkinningJointsTransformationsMatrices12);
+---+		if (instanceCount >= 14) computeSkinning(outVertexFloatArray13, outNormalFloatArray13, inSkinningJointsTransformationsMatrices13);
+---+		if (instanceCount >= 15) computeSkinning(outVertexFloatArray14, outNormalFloatArray14, inSkinningJointsTransformationsMatrices14);
+--- 	}
+--- }
+---diff --git a/src/tdme/engine/subsystems/renderer/GL2Renderer.cpp b/src/tdme/engine/subsystems/renderer/GL2Renderer.cpp
+---index ac6c92a9..3f49419a 100644
+------ a/src/tdme/engine/subsystems/renderer/GL2Renderer.cpp
+---+++ b/src/tdme/engine/subsystems/renderer/GL2Renderer.cpp
+---@@ -756,15 +756,15 @@ void GL2Renderer::bindSkinningVertexJointWeightsBufferObject(void* context, int3
+--- 	Console::println("GL2Renderer::bindSkinningVertexJointWeightsBufferObject(): Not implemented");
+--- }
+--- 
+----void GL2Renderer::bindSkinningVerticesResultBufferObject(void* context, int32_t bufferObjectId) {
+---+void GL2Renderer::bindSkinningVerticesResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
+--- 	Console::println("GL2Renderer::bindSkinningVerticesResultBufferObject(): Not implemented");
+--- }
+--- 
+----void GL2Renderer::bindSkinningNormalsResultBufferObject(void* context, int32_t bufferObjectId) {
+---+void GL2Renderer::bindSkinningNormalsResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
+--- 	Console::println("GL2Renderer::bindSkinningNormalsResultBufferObject(): Not implemented");
+--- }
+--- 
+----void GL2Renderer::bindSkinningMatricesBufferObject(void* context, int32_t bufferObjectId) {
+---+void GL2Renderer::bindSkinningMatricesBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
+--- 	Console::println("GL2Renderer::bindSkinningMatricesBufferObject(): Not implemented");
+--- }
+--- 
+---diff --git a/src/tdme/engine/subsystems/renderer/GL2Renderer.h b/src/tdme/engine/subsystems/renderer/GL2Renderer.h
+---index 4fe009bf..d837ee37 100644
+------ a/src/tdme/engine/subsystems/renderer/GL2Renderer.h
+---+++ b/src/tdme/engine/subsystems/renderer/GL2Renderer.h
+---@@ -155,9 +155,9 @@ public:
+--- 	void bindSkinningVertexJointsBufferObject(void* context, int32_t bufferObjectId) override;
+--- 	void bindSkinningVertexJointIdxsBufferObject(void* context, int32_t bufferObjectId) override;
+--- 	void bindSkinningVertexJointWeightsBufferObject(void* context, int32_t bufferObjectId) override;
+----	void bindSkinningVerticesResultBufferObject(void* context, int32_t bufferObjectId) override;
+----	void bindSkinningNormalsResultBufferObject(void* context, int32_t bufferObjectId) override;
+----	void bindSkinningMatricesBufferObject(void* context, 	int32_t bufferObjectId) override;
+---+	void bindSkinningVerticesResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
+---+	void bindSkinningNormalsResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
+---+	void bindSkinningMatricesBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
+--- 
+--- 	//
+--- 	int32_t createVertexArrayObject() override;
+---diff --git a/src/tdme/engine/subsystems/renderer/GL3Renderer.cpp b/src/tdme/engine/subsystems/renderer/GL3Renderer.cpp
+---index 5da1e23f..2c15b23f 100644
+------ a/src/tdme/engine/subsystems/renderer/GL3Renderer.cpp
+---+++ b/src/tdme/engine/subsystems/renderer/GL3Renderer.cpp
+---@@ -833,27 +833,27 @@ void GL3Renderer::bindSkinningVertexJointWeightsBufferObject(void* context, int3
+--- 	#endif
+--- }
+--- 
+----void GL3Renderer::bindSkinningVerticesResultBufferObject(void* context, int32_t bufferObjectId) {
+---+void GL3Renderer::bindSkinningVerticesResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
+--- 	#if defined (__APPLE__)
+--- 		Console::println("GL3Renderer::bindSkinningVerticesResultBufferObject(): Not implemented");
+--- 	#else
+----		glBindBufferBase(GL_SHADER_STORAGE_BUFFER, 5, bufferObjectId);
+---+		glBindBufferBase(GL_SHADER_STORAGE_BUFFER, 5 + instanceId * 3, bufferObjectId);
+--- 	#endif
+--- }
+--- 
+----void GL3Renderer::bindSkinningNormalsResultBufferObject(void* context, int32_t bufferObjectId) {
+---+void GL3Renderer::bindSkinningNormalsResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
+--- 	#if defined (__APPLE__)
+--- 		Console::println("GL3Renderer::bindSkinningNormalsResultBufferObject(): Not implemented");
+--- 	#else
+----		glBindBufferBase(GL_SHADER_STORAGE_BUFFER, 6, bufferObjectId);
+---+		glBindBufferBase(GL_SHADER_STORAGE_BUFFER, 6 + instanceId * 3, bufferObjectId);
+--- 	#endif
+--- }
+--- 
+----void GL3Renderer::bindSkinningMatricesBufferObject(void* context, int32_t bufferObjectId) {
+---+void GL3Renderer::bindSkinningMatricesBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
+--- 	#if defined (__APPLE__)
+--- 		Console::println("GL3Renderer::bindSkinningMatricesBufferObject(): Not implemented");
+--- 	#else
+----		glBindBufferBase(GL_SHADER_STORAGE_BUFFER, 7, bufferObjectId);
+---+		glBindBufferBase(GL_SHADER_STORAGE_BUFFER, 7 + instanceId * 3, bufferObjectId);
+--- 	#endif
+--- }
+--- 
+---diff --git a/src/tdme/engine/subsystems/renderer/GL3Renderer.h b/src/tdme/engine/subsystems/renderer/GL3Renderer.h
+---index 6023419e..38318ad7 100644
+------ a/src/tdme/engine/subsystems/renderer/GL3Renderer.h
+---+++ b/src/tdme/engine/subsystems/renderer/GL3Renderer.h
+---@@ -136,9 +136,9 @@ public:
+--- 	void bindSkinningVertexJointsBufferObject(void* context, int32_t bufferObjectId) override;
+--- 	void bindSkinningVertexJointIdxsBufferObject(void* context, int32_t bufferObjectId) override;
+--- 	void bindSkinningVertexJointWeightsBufferObject(void* context, int32_t bufferObjectId) override;
+----	void bindSkinningVerticesResultBufferObject(void* context, int32_t bufferObjectId) override;
+----	void bindSkinningNormalsResultBufferObject(void* context, int32_t bufferObjectId) override;
+----	void bindSkinningMatricesBufferObject(void* context, int32_t bufferObjectId) override;
+---+	void bindSkinningVerticesResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
+---+	void bindSkinningNormalsResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
+---+	void bindSkinningMatricesBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
+--- 	int32_t createVertexArrayObject() override;
+--- 	void disposeVertexArrayObject(int32_t vertexArrayObjectId) override;
+--- 	void bindVertexArrayObject(int32_t vertexArrayObjectId) override;
+---diff --git a/src/tdme/engine/subsystems/renderer/GLES2Renderer.cpp b/src/tdme/engine/subsystems/renderer/GLES2Renderer.cpp
+---index 311ca162..e3eb325e 100644
+------ a/src/tdme/engine/subsystems/renderer/GLES2Renderer.cpp
+---+++ b/src/tdme/engine/subsystems/renderer/GLES2Renderer.cpp
+---@@ -713,15 +713,15 @@ void GLES2Renderer::bindSkinningVertexJointWeightsBufferObject(void* context, in
+--- 	Console::println("GLES2Renderer::bindSkinningVertexJointWeightsBufferObject(): Not implemented");
+--- }
+--- 
+----void GLES2Renderer::bindSkinningVerticesResultBufferObject(void* context, int32_t bufferObjectId) {
+---+void GLES2Renderer::bindSkinningVerticesResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
+--- 	Console::println("GLES2Renderer::bindSkinningVerticesResultBufferObject(): Not implemented");
+--- }
+--- 
+----void GLES2Renderer::bindSkinningNormalsResultBufferObject(void* context, int32_t bufferObjectId) {
+---+void GLES2Renderer::bindSkinningNormalsResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
+--- 	Console::println("GLES2Renderer::bindSkinningNormalsResultBufferObject(): Not implemented");
+--- }
+--- 
+----void GLES2Renderer::bindSkinningMatricesBufferObject(void* context, int32_t bufferObjectId) {
+---+void GLES2Renderer::bindSkinningMatricesBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
+--- 	Console::println("GLES2Renderer::bindSkinningMatricesBufferObject(): Not implemented");
+--- }
+--- 
+---diff --git a/src/tdme/engine/subsystems/renderer/GLES2Renderer.h b/src/tdme/engine/subsystems/renderer/GLES2Renderer.h
+---index 8859d025..f676e8b7 100644
+------ a/src/tdme/engine/subsystems/renderer/GLES2Renderer.h
+---+++ b/src/tdme/engine/subsystems/renderer/GLES2Renderer.h
+---@@ -134,9 +134,9 @@ public:
+--- 	void bindSkinningVertexJointsBufferObject(void* context, int32_t bufferObjectId) override;
+--- 	void bindSkinningVertexJointIdxsBufferObject(void* context, int32_t bufferObjectId) override;
+--- 	void bindSkinningVertexJointWeightsBufferObject(void* context, int32_t bufferObjectId) override;
+----	void bindSkinningVerticesResultBufferObject(void* context, int32_t bufferObjectId) override;
+----	void bindSkinningNormalsResultBufferObject(void* context, int32_t bufferObjectId) override;
+----	void bindSkinningMatricesBufferObject(void* context, int32_t bufferObjectId) override;
+---+	void bindSkinningVerticesResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
+---+	void bindSkinningNormalsResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
+---+	void bindSkinningMatricesBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
+--- 
+--- 	//
+--- 	int32_t createVertexArrayObject() override;
+---diff --git a/src/tdme/engine/subsystems/renderer/Renderer.h b/src/tdme/engine/subsystems/renderer/Renderer.h
+---index 4d5a29b3..5042f4c6 100644
+------ a/src/tdme/engine/subsystems/renderer/Renderer.h
+---+++ b/src/tdme/engine/subsystems/renderer/Renderer.h
+---@@ -985,21 +985,21 @@ public:
+--- 	 * @param context context
+--- 	 * @param bufferObjectId buffer object id
+--- 	 */
+----	virtual void bindSkinningVerticesResultBufferObject(void* context, int32_t bufferObjectId) = 0;
+---+	virtual void bindSkinningVerticesResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) = 0;
+--- 
+--- 	/**
+--- 	 * Bind skinning normals result buffer object
+--- 	 * @param context context
+--- 	 * @param bufferObjectId buffer object id
+--- 	 */
+----	virtual void bindSkinningNormalsResultBufferObject(void* context, int32_t bufferObjectId) = 0;
+---+	virtual void bindSkinningNormalsResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) = 0;
+--- 
+--- 	/**
+--- 	 * Bind skinning matrices result buffer object
+--- 	 * @param context context
+--- 	 * @param bufferObjectId buffer object id
+--- 	 */
+----	virtual void bindSkinningMatricesBufferObject(void* context, int32_t bufferObjectId) = 0;
+---+	virtual void bindSkinningMatricesBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) = 0;
+--- 
+--- 	/**
+--- 	 * Create a single vertex array object
+---diff --git a/src/tdme/engine/subsystems/renderer/VKRenderer.cpp b/src/tdme/engine/subsystems/renderer/VKRenderer.cpp
+---index ae97f58c..fbeaf70c 100644
+------ a/src/tdme/engine/subsystems/renderer/VKRenderer.cpp
+---+++ b/src/tdme/engine/subsystems/renderer/VKRenderer.cpp
+---@@ -5441,15 +5441,15 @@ void VKRenderer::bindSkinningVertexJointWeightsBufferObject(void* context, int32
+--- 	(*static_cast<context_type*>(context)).bound_buffers[4] = bufferObjectId;
+--- }
+--- 
+----void VKRenderer::bindSkinningVerticesResultBufferObject(void* context, int32_t bufferObjectId) {
+---+void VKRenderer::bindSkinningVerticesResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
+--- 	(*static_cast<context_type*>(context)).bound_buffers[5] = bufferObjectId;
+--- }
+--- 
+----void VKRenderer::bindSkinningNormalsResultBufferObject(void* context, int32_t bufferObjectId) {
+---+void VKRenderer::bindSkinningNormalsResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
+--- 	(*static_cast<context_type*>(context)).bound_buffers[6] = bufferObjectId;
+--- }
+--- 
+----void VKRenderer::bindSkinningMatricesBufferObject(void* context, int32_t bufferObjectId) {
+---+void VKRenderer::bindSkinningMatricesBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) {
+--- 	(*static_cast<context_type*>(context)).bound_buffers[7] = bufferObjectId;
+--- }
+--- 
+---diff --git a/src/tdme/engine/subsystems/renderer/VKRenderer.h b/src/tdme/engine/subsystems/renderer/VKRenderer.h
+---index 0ae450f6..3f2600b0 100644
+------ a/src/tdme/engine/subsystems/renderer/VKRenderer.h
+---+++ b/src/tdme/engine/subsystems/renderer/VKRenderer.h
+---@@ -486,9 +486,9 @@ public:
+--- 	void bindSkinningVertexJointsBufferObject(void* context, int32_t bufferObjectId) override;
+--- 	void bindSkinningVertexJointIdxsBufferObject(void* context, int32_t bufferObjectId) override;
+--- 	void bindSkinningVertexJointWeightsBufferObject(void* context, int32_t bufferObjectId) override;
+----	void bindSkinningVerticesResultBufferObject(void* context, int32_t bufferObjectId) override;
+----	void bindSkinningNormalsResultBufferObject(void* context, int32_t bufferObjectId) override;
+----	void bindSkinningMatricesBufferObject(void* context, int32_t bufferObjectId) override;
+---+	void bindSkinningVerticesResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
+---+	void bindSkinningNormalsResultBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
+---+	void bindSkinningMatricesBufferObject(void* context, int32_t instanceId, int32_t bufferObjectId) override;
+--- 
+--- 	//
+--- 	int32_t createVertexArrayObject() override;
+---diff --git a/src/tdme/engine/subsystems/skinning/SkinningShader.cpp b/src/tdme/engine/subsystems/skinning/SkinningShader.cpp
+---index 6b11211b..37595037 100644
+------ a/src/tdme/engine/subsystems/skinning/SkinningShader.cpp
+---+++ b/src/tdme/engine/subsystems/skinning/SkinningShader.cpp
+---@@ -77,8 +77,10 @@ void SkinningShader::initialize()
+--- 	if (renderer->linkProgram(programId) == false) return;
+--- 
+--- 	//
+----	uniformSkinningCount = renderer->getProgramUniformLocation(programId, "skinningCount");
+----	if (uniformSkinningCount == -1) return;
+---+	uniformVertexCount = renderer->getProgramUniformLocation(programId, "vertexCount");
+---+	if (uniformVertexCount == -1) return;
+---+	uniformInstanceCount = renderer->getProgramUniformLocation(programId, "instanceCount");
+---+	if (uniformInstanceCount == -1) return;
+--- 
+--- 	//
+--- 	initialized = true;
+---@@ -90,6 +92,40 @@ void SkinningShader::useProgram()
+--- 	renderer->useProgram(programId);
+--- }
+--- 
+---+void SkinningShader::flushComputeCommands(void* context, ModelSkinningCache* modelSkinningCache) {
+---+	auto contextIdx = renderer->getContextIndex(context);
+---+	auto instanceCount = 0;
+---+
+---+	// bind shared data
+---+	renderer->bindSkinningVerticesBufferObject(context, (*modelSkinningCache->vboIds)[0]);
+---+	renderer->bindSkinningNormalsBufferObject(context, (*modelSkinningCache->vboIds)[1]);
+---+	renderer->bindSkinningVertexJointsBufferObject(context, (*modelSkinningCache->vboIds)[2]);
+---+	renderer->bindSkinningVertexJointIdxsBufferObject(context, (*modelSkinningCache->vboIds)[3]);
+---+	renderer->bindSkinningVertexJointWeightsBufferObject(context, (*modelSkinningCache->vboIds)[4]);
+---+
+---+	//
+---+	for (auto& computeCommand: modelSkinningCache->computeCommands[contextIdx]) {
+---+		renderer->bindSkinningMatricesBufferObject(context, computeCommand.idx, (*modelSkinningCache->matricesVboIds[computeCommand.idx][contextIdx])[0]);
+---+
+---+		// bind output / result buffers
+---+		renderer->bindSkinningVerticesResultBufferObject(context, computeCommand.idx, computeCommand.verticesBufferObjectId);
+---+		renderer->bindSkinningNormalsResultBufferObject(context, computeCommand.idx, computeCommand.normalsBufferObjectId);
+---+
+---+		//
+---+		instanceCount++;
+---+	}
+---+
+---+	// skinning count
+---+	renderer->setProgramUniformInteger(context, uniformInstanceCount, instanceCount);
+---+	renderer->setProgramUniformInteger(context, uniformVertexCount, modelSkinningCache->vertexCount);
+---+
+---+	// do it so
+---+	renderer->dispatchCompute(context, (int)Math::ceil(modelSkinningCache->vertexCount / 16.0f), 1, 1);
+---+
+---+	//
+---+	modelSkinningCache->computeCommands[contextIdx].clear();
+---+}
+---+
+--- void SkinningShader::computeSkinning(void* context, Object3DGroupMesh* object3DGroupMesh)
+--- {
+--- 	//
+---@@ -103,7 +139,7 @@ void SkinningShader::computeSkinning(void* context, Object3DGroupMesh* object3DG
+--- 	auto group = object3DGroupMesh->group;
+--- 	auto& vertices = *group->getVertices();
+--- 	auto id = group->getModel()->getId() + "." + group->getId();
+----	mutex.lock();
+---+	//mutex.lock();
+--- 	auto cacheIt = cache.find(id);
+--- 	if (cacheIt == cache.end()) {
+--- 		ModelSkinningCache modelSkinningCache;
+---@@ -112,20 +148,19 @@ void SkinningShader::computeSkinning(void* context, Object3DGroupMesh* object3DG
+--- 		auto& verticesJointsWeights = *skinning->getVerticesJointsWeights();
+--- 		auto& weights = *skinning->getWeights();
+--- 
+---+		// init per thread compute commands
+---+		modelSkinningCache.computeCommands.resize(Engine::getThreadCount());
+---+
+--- 		// vbos
+--- 		{
+--- 			auto vboManaged = Engine::getVBOManager()->addVBO("skinning_compute_shader." + id + ".vbos", 5, true);
+--- 			modelSkinningCache.vboIds = vboManaged->getVBOIds();
+--- 		}
+--- 		{
+----			if (renderer->isSupportingMultithreadedRendering() == true) {
+----				for (auto i = 0; i < Engine::getThreadCount(); i++) {
+----					auto vboManaged = Engine::getVBOManager()->addVBO("skinning_compute_shader." + id + ".vbos.matrices." + to_string(i), 1, false);
+----					modelSkinningCache.matricesVboIds.push_back(vboManaged->getVBOIds());
+----				}
+----			} else {
+----				auto vboManaged = Engine::getVBOManager()->addVBO("skinning_compute_shader." + id + ".vbos.matrices", 1, false);
+----				modelSkinningCache.matricesVboIds.push_back(vboManaged->getVBOIds());
+---+			for (auto i = 0; i < modelSkinningCache.matricesVboIds.size(); i++)
+---+			for (auto j = 0; j < Engine::getThreadCount(); j++) {
+---+				auto vboManaged = Engine::getVBOManager()->addVBO("skinning_compute_shader." + id + ".vbos.matrices." + to_string(i) + "." + to_string(j), 1, false);
+---+				modelSkinningCache.matricesVboIds[i].push_back(vboManaged->getVBOIds());
+--- 			}
+--- 		}
+--- 
+---@@ -177,25 +212,20 @@ void SkinningShader::computeSkinning(void* context, Object3DGroupMesh* object3DG
+--- 			renderer->uploadSkinningBufferObject(context, (*modelSkinningCache.vboIds)[4], fbVerticesVertexJointsWeights.getPosition() * sizeof(float), &fbVerticesVertexJointsWeights);
+--- 		}
+--- 
+---+		modelSkinningCache.vertexCount = vertices.size();
+---+
+--- 		// add to cache
+--- 		cache[id] = modelSkinningCache;
+--- 		modelSkinningCacheCached = &cache[id];
+--- 	} else {
+--- 		modelSkinningCacheCached = &cacheIt->second;
+--- 	}
+----	mutex.unlock();
+---+	//mutex.unlock();
+--- 
+----	// bind
+----	renderer->bindSkinningVerticesBufferObject(context, (*modelSkinningCacheCached->vboIds)[0]);
+----	renderer->bindSkinningNormalsBufferObject(context, (*modelSkinningCacheCached->vboIds)[1]);
+----	renderer->bindSkinningVertexJointsBufferObject(context, (*modelSkinningCacheCached->vboIds)[2]);
+----	renderer->bindSkinningVertexJointIdxsBufferObject(context, (*modelSkinningCacheCached->vboIds)[3]);
+----	renderer->bindSkinningVertexJointWeightsBufferObject(context, (*modelSkinningCacheCached->vboIds)[4]);
+----	renderer->bindSkinningMatricesBufferObject(context, (*modelSkinningCacheCached->matricesVboIds[contextIdx])[0]);
+----
+----	// bind output / result buffers
+----	renderer->bindSkinningVerticesResultBufferObject(context, (*vboBaseIds)[1]);
+----	renderer->bindSkinningNormalsResultBufferObject(context, (*vboBaseIds)[2]);
+---+	// flush if required
+---+	if (modelSkinningCacheCached->computeCommands[contextIdx].size() >= 15) {
+---+		flushComputeCommands(context, modelSkinningCacheCached);
+---+	}
+--- 
+--- 	// upload matrices
+--- 	{
+---@@ -205,14 +235,19 @@ void SkinningShader::computeSkinning(void* context, Object3DGroupMesh* object3DG
+--- 		for (auto& joint: *skinningJoints) {
+--- 			fbMatrices.put(object3DGroupMesh->skinningMatrices->find(joint.getGroupId())->second->getArray());
+--- 		}
+----		renderer->uploadSkinningBufferObject(context, (*modelSkinningCacheCached->matricesVboIds[contextIdx])[0], fbMatrices.getPosition() * sizeof(float), &fbMatrices);
+---+		renderer->uploadSkinningBufferObject(
+---+			context, (*modelSkinningCacheCached->matricesVboIds[modelSkinningCacheCached->computeCommands[contextIdx].size()][contextIdx])[0],
+---+			fbMatrices.getPosition() * sizeof(float),
+---+			&fbMatrices
+---+		);
+--- 	}
+--- 
+----	// skinning count
+----	renderer->setProgramUniformInteger(context, uniformSkinningCount, vertices.size());
+----
+----	// do it so
+----	renderer->dispatchCompute(context, (int)Math::ceil(vertices.size() / 16.0f), 1, 1);
+---+	// add to compute commands
+---+	modelSkinningCacheCached->computeCommands[contextIdx].push_back({
+---+		.idx = modelSkinningCacheCached->computeCommands[contextIdx].size(),
+---+		.verticesBufferObjectId = (*vboBaseIds)[1],
+---+		.normalsBufferObjectId = (*vboBaseIds)[2]
+---+	});
+--- }
+--- 
+--- void SkinningShader::unUseProgram()
+---diff --git a/src/tdme/engine/subsystems/skinning/SkinningShader.h b/src/tdme/engine/subsystems/skinning/SkinningShader.h
+---index b8862d61..cad5e423 100644
+------ a/src/tdme/engine/subsystems/skinning/SkinningShader.h
+---+++ b/src/tdme/engine/subsystems/skinning/SkinningShader.h
+---@@ -1,5 +1,6 @@
+--- #pragma once
+--- 
+---+#include <array>
+--- #include <map>
+--- #include <string>
+--- #include <vector>
+---@@ -11,6 +12,7 @@
+--- #include <tdme/math/Matrix4x4.h>
+--- #include <tdme/os/threading/Mutex.h>
+--- 
+---+using std::array;
+--- using std::map;
+--- using std::string;
+--- using std::vector;
+---@@ -28,21 +30,36 @@ using tdme::os::threading::Mutex;
+--- class tdme::engine::subsystems::skinning::SkinningShader final
+--- {
+--- private:
+---+	struct ModelSkinningComputeCommand {
+---+		int32_t idx;
+---+		int32_t verticesBufferObjectId;
+---+		int32_t normalsBufferObjectId;
+---+	};
+--- 	struct ModelSkinningCache {
+--- 		string id;
+--- 		vector<int32_t>* vboIds;
+----		vector<vector<int32_t>*> matricesVboIds;
+---+		array<vector<vector<int32_t>*>, 15> matricesVboIds;
+---+		int32_t vertexCount;
+---+		vector<vector<ModelSkinningComputeCommand>> computeCommands;
+--- 	};
+--- 
+--- 	int32_t programId {  };
+--- 	int32_t shaderId {  };
+----	int32_t uniformSkinningCount { -1 };
+---+	int32_t uniformInstanceCount { -1 };
+---+	int32_t uniformVertexCount { -1 };
+--- 	bool isRunning {  };
+--- 	bool initialized {  };
+--- 	Renderer* renderer {  };
+--- 	map<string, ModelSkinningCache> cache;
+--- 	Mutex mutex;
+--- 
+---+	/**
+---+	 * Flush compute commands
+---+	 * @param context context
+---+	 * @param modelSkinningCache model skinning cache
+---+	 */
+---+	void flushComputeCommands(void* context, ModelSkinningCache* modelSkinningCache);
+---+
+--- public:
+--- 
+--- 	/** 
+--diff --git a/src/tdme/engine/Engine.cpp b/src/tdme/engine/Engine.cpp
+--index 228a4a34..d7a8f1da 100644
+----- a/src/tdme/engine/Engine.cpp
+--+++ b/src/tdme/engine/Engine.cpp
+--@@ -473,7 +473,7 @@ void Engine::initialize()
+-- 				Console::println(string("TDME::Using GL2(" + to_string(glMajorVersion) + "." + to_string(glMinorVersion) + ")"));
+-- 				renderer = new EngineGL2Renderer(this);
+-- 			}
+---			skinningShaderEnabled = (glMajorVersion == 4 && glMinorVersion >= 3) || glMajorVersion > 4;
+--+			skinningShaderEnabled = false; //(glMajorVersion == 4 && glMinorVersion >= 3) || glMajorVersion > 4;
+-- 			// Console::println(string("TDME::Extensions: ") + gl->glGetString(GL::GL_EXTENSIONS));
+-- 			shadowMappingEnabled = true;
+-- 			if (getShadowMapWidth() == 0 || getShadowMapHeight() == 0) setShadowMapSize(2048, 2048);
+--@@ -742,6 +742,7 @@ void Engine::determineEntityTypes(
+-- 	vector<ParticleSystemGroup*>& psgs,
+-- 	vector<LinesObject3D*>& linesObjects,
+-- 	vector<Object3DRenderGroup*>& objectRenderGroups,
+--+	vector<SkinnedObject3DRenderGroup*>& skinnedObjectRenderGroups,
+-- 	vector<EntityHierarchy*>& entityHierarchies
+-- 	) {
+-- 	Object3D* object = nullptr;
+--@@ -751,6 +752,7 @@ void Engine::determineEntityTypes(
+-- 	PointsParticleSystem* ppse = nullptr;
+-- 	FogParticleSystem* fpse = nullptr;
+-- 	Object3DRenderGroup* org = nullptr;
+--+	SkinnedObject3DRenderGroup* sorg = nullptr;
+-- 	LinesObject3D* lo = nullptr;
+-- 	Entity* subEntity = nullptr;
+-- 	EntityHierarchy* eh = nullptr;
+--@@ -818,6 +820,10 @@ void Engine::determineEntityTypes(
+-- 			objectRenderGroups.push_back(org);
+-- 			if ((subEntity = org->getEntity()) != nullptr) COMPUTE_ENTITY_TRANSFORMATIONS(subEntity);
+-- 		} else
+--+		if ((sorg = dynamic_cast<SkinnedObject3DRenderGroup*>(entity)) != nullptr) {
+--+			skinnedObjectRenderGroups.push_back(sorg);
+--+			if ((subEntity = sorg->getObject()) != nullptr) COMPUTE_ENTITY_TRANSFORMATIONS(subEntity);
+--+		} else
+-- 		if ((psg = dynamic_cast<ParticleSystemGroup*>(entity)) != nullptr) {
+-- 			psgs.push_back(psg); \
+-- 			for (auto ps: psg->getParticleSystems()) COMPUTE_ENTITY_TRANSFORMATIONS(ps);
+--@@ -877,6 +883,7 @@ void Engine::computeTransformations()
+-- 		visiblePsgs,
+-- 		visibleLinesObjects,
+-- 		visibleObjectRenderGroups,
+--+		visibleSkinnedObjectRenderGroups,
+-- 		visibleObjectEntityHierarchies
+-- 	);
+-- 
+--@@ -903,6 +910,7 @@ void Engine::computeTransformations()
+-- 		visiblePsgs,
+-- 		visibleLinesObjects,
+-- 		visibleObjectRenderGroups,
+--+		visibleSkinnedObjectRenderGroups,
+-- 		visibleObjectEntityHierarchies
+-- 	);
+-- 
+--@@ -1403,6 +1411,7 @@ Entity* Engine::getEntityByMousePosition(
+-- 			vector<ParticleSystemGroup*> psgsEH;
+-- 			vector<LinesObject3D*> linesObjectsEH;
+-- 			vector<Object3DRenderGroup*> objectRenderGroupsEH;
+--+			vector<SkinnedObject3DRenderGroup*> skinnedObjectRenderGroupsEH;
+-- 			vector<EntityHierarchy*> entityHierarchiesEH;
+-- 			Group* object3DGroupEH = nullptr;
+-- 			determineEntityTypes(
+--@@ -1416,6 +1425,7 @@ Entity* Engine::getEntityByMousePosition(
+-- 				psgsEH,
+-- 				linesObjectsEH,
+-- 				objectRenderGroupsEH,
+--+				skinnedObjectRenderGroupsEH,
+-- 				entityHierarchiesEH
+-- 			);
+-- 			auto subEntity = getEntityByMousePosition(
+--@@ -1601,6 +1611,7 @@ Entity* Engine::doRayCasting(
+-- 			vector<ParticleSystemGroup*> psgsEH;
+-- 			vector<LinesObject3D*> linesObjectsEH;
+-- 			vector<Object3DRenderGroup*> objectRenderGroupsEH;
+--+			vector<SkinnedObject3DRenderGroup*> skinnedObjectRenderGroupsEH;
+-- 			vector<EntityHierarchy*> entityHierarchiesEH;
+-- 			determineEntityTypes(
+-- 				entity->getEntities(),
+--@@ -1613,6 +1624,7 @@ Entity* Engine::doRayCasting(
+-- 				psgsEH,
+-- 				linesObjectsEH,
+-- 				objectRenderGroupsEH,
+--+				skinnedObjectRenderGroupsEH,
+-- 				entityHierarchiesEH
+-- 			);
+-- 			Vector3 contactPointEH;
+--diff --git a/src/tdme/engine/Engine.h b/src/tdme/engine/Engine.h
+--index 5b5b84cf..160279de 100644
+----- a/src/tdme/engine/Engine.h
+--+++ b/src/tdme/engine/Engine.h
+--@@ -45,10 +45,19 @@ using tdme::engine::Camera;
+-- using tdme::engine::Entity;
+-- using tdme::engine::EntityHierarchy;
+-- using tdme::engine::EntityPickingFilter;
+--+using tdme::engine::FogParticleSystem;
+-- using tdme::engine::FrameBuffer;
+-- using tdme::engine::Light;
+--+using tdme::engine::LinesObject3D;
+--+using tdme::engine::LODObject3D;
+--+using tdme::engine::Object3D;
+--+using tdme::engine::Object3DRenderGroup;
+--+using tdme::engine::ObjectParticleSystem;
+-- using tdme::engine::ParticleSystemEntity;
+--+using tdme::engine::ParticleSystemGroup;
+-- using tdme::engine::Partition;
+--+using tdme::engine::PointsParticleSystem;
+--+using tdme::engine::SkinnedObject3DRenderGroup;
+-- using tdme::engine::Timing;
+-- using tdme::engine::model::Color4;
+-- using tdme::engine::model::Group;
+--@@ -196,6 +205,7 @@ private:
+-- 	vector<ParticleSystemGroup*> visiblePsgs;
+-- 	vector<LinesObject3D*> visibleLinesObjects;
+-- 	vector<Object3DRenderGroup*> visibleObjectRenderGroups;
+--+	vector<SkinnedObject3DRenderGroup*> visibleSkinnedObjectRenderGroups;
+-- 	vector<EntityHierarchy*> visibleObjectEntityHierarchies;
+-- 	vector<Entity*> noFrustumCullingEntities;
+-- 
+--@@ -351,6 +361,7 @@ private:
+-- 	 * @param psgs particle system groups
+-- 	 * @param linesObjects lines objects
+-- 	 * @param objectRenderGroups object render groups
+--+	 * @param skinnedObjectRenderGroups object render groups
+-- 	 * @param entityHierarchies entity hierarchies
+-- 	 */
+-- 	void determineEntityTypes(
+--@@ -364,6 +375,7 @@ private:
+-- 		vector<ParticleSystemGroup*>& psgs,
+-- 		vector<LinesObject3D*>& linesObjects,
+-- 		vector<Object3DRenderGroup*>& objectRenderGroups,
+--+		vector<SkinnedObject3DRenderGroup*>& skinnedObjectRenderGroups,
+-- 		vector<EntityHierarchy*>& entityHierarchies
+-- 	);
+-- 
+--diff --git a/src/tdme/engine/Object3D.cpp b/src/tdme/engine/Object3D.cpp
+--index 8d26e6f5..ff9986c3 100644
+----- a/src/tdme/engine/Object3D.cpp
+--+++ b/src/tdme/engine/Object3D.cpp
+--@@ -21,11 +21,10 @@ using tdme::math::Matrix4x4;
+-- using tdme::math::Vector3;
+-- using tdme::math::Quaternion;
+-- 
+---Object3D::Object3D(const string& id, Model* model, int instances): Object3D(id, model) {
+--+Object3D::Object3D(const string& id, Model* model, int instances): Object3DInternal(id, model, instances) {
+-- }
+-- 
+---Object3D::Object3D(const string& id, Model* model) :
+---	Object3DInternal(id, model)
+--+Object3D::Object3D(const string& id, Model* model): Object3DInternal(id, model, 1)
+-- {
+-- }
+-- 
+--diff --git a/src/tdme/engine/Object3D.h b/src/tdme/engine/Object3D.h
+--index bf993afe..d8fe0115 100644
+----- a/src/tdme/engine/Object3D.h
+--+++ b/src/tdme/engine/Object3D.h
+--@@ -10,6 +10,7 @@
+-- #include <tdme/engine/Entity.h>
+-- #include <tdme/engine/model/fwd-tdme.h>
+-- #include <tdme/engine/model/Color4.h>
+--+#include <tdme/engine/model/Model.h>
+-- #include <tdme/engine/primitives/fwd-tdme.h>
+-- #include <tdme/engine/subsystems/particlesystem/fwd-tdme.h>
+-- #include <tdme/engine/subsystems/renderer/fwd-tdme.h>
+--@@ -80,7 +81,7 @@ private:
+-- 	 * @param context context
+-- 	 */
+-- 	inline void computeTransformations(void* context) {
+---		if (hasSkinning == true || hasAnimations == true) {
+--+		if (getModel()->hasSkinning() == true || getModel()->hasAnimations() == true) {
+-- 			auto timing = engine->getTiming();
+-- 			auto currentFrameAtTime = timing->getCurrentFrameAtTime();
+-- 			auto currentFrame = timing->getFrame();
+--@@ -135,7 +136,7 @@ private:
+-- 	 * Private constructor
+-- 	 * @param id id
+-- 	 * @param model model
+---	 * @param instances render multiple objects at once by duplication
+--+	 * @param instances instances to compute and render by duplicating
+-- 	 */
+-- 	Object3D(const string& id, Model* model, int instances);
+-- 
+--diff --git a/src/tdme/engine/SkinnedObject3DRenderGroup.cpp b/src/tdme/engine/SkinnedObject3DRenderGroup.cpp
+--index 48d5dff2..dd6d4519 100644
+----- a/src/tdme/engine/SkinnedObject3DRenderGroup.cpp
+--+++ b/src/tdme/engine/SkinnedObject3DRenderGroup.cpp
+--@@ -40,10 +40,7 @@ SkinnedObject3DRenderGroup::SkinnedObject3DRenderGroup(
+-- {
+-- 	setModel(model);
+-- 	objectTransformations.resize(objectCount);
+---	objectAnimations.resize(objectCount);
+---	for (auto i = 0; i < objectCount; i++) {
+---		objectAnimations[i] = new Object3DAnimation(model, Engine::animationProcessingTarget);
+---	} 
+--+	objectAnimations = object->animations;
+-- }
+-- 
+-- SkinnedObject3DRenderGroup::~SkinnedObject3DRenderGroup() {
+--@@ -75,6 +72,7 @@ void SkinnedObject3DRenderGroup::updateBoundingBox() {
+-- }
+-- 
+-- void SkinnedObject3DRenderGroup::updateRenderGroup() {
+--+	for (auto i = 0; i < objectCount; i++) objectAnimations[i]->setTransformations(objectTransformations[i]);
+-- 	updateBoundingBox();
+-- }
+-- 
+--diff --git a/src/tdme/engine/subsystems/rendering/ModelUtilitiesInternal.cpp b/src/tdme/engine/subsystems/rendering/ModelUtilitiesInternal.cpp
+--index 5c693cfe..8378cb7f 100644
+----- a/src/tdme/engine/subsystems/rendering/ModelUtilitiesInternal.cpp
+--+++ b/src/tdme/engine/subsystems/rendering/ModelUtilitiesInternal.cpp
+--@@ -42,7 +42,7 @@ using tdme::math::Vector3;
+-- BoundingBox* ModelUtilitiesInternal::createBoundingBox(Model* model, const map<string, Matrix4x4*> overridenGroupTransformationsMatrices)
+-- {
+-- 	Object3DModelInternal object3dModel(model);
+---	object3dModel.overridenTransformationsMatrices = overridenGroupTransformationsMatrices;
+--+	object3dModel.animations[0]->overridenTransformationsMatrices = overridenGroupTransformationsMatrices;
+-- 	auto boundingBox = ModelUtilitiesInternal::createBoundingBox(&object3dModel);
+-- 	if (boundingBox == nullptr) boundingBox = ModelUtilitiesInternal::createBoundingBoxNoMesh(&object3dModel);
+-- 	return boundingBox;
+--@@ -66,7 +66,7 @@ BoundingBox* ModelUtilitiesInternal::createBoundingBox(Object3DModelInternal* ob
+-- 		// calculate transformations matrices without world transformations
+-- 		auto parentTransformationsMatrix = object3DModelInternal->getModel()->getImportTransformationsMatrix();
+-- 		parentTransformationsMatrix.multiply(object3DModelInternal->getTransformationsMatrix());
+---		object3DModelInternal->computeTransformationsMatrices(model->getSubGroups(), parentTransformationsMatrix, &animationState, object3DModelInternal->transformationsMatrices[0], 0);
+--+		object3DModelInternal->animations[0]->computeTransformationsMatrices(model->getSubGroups(), parentTransformationsMatrix, &animationState, object3DModelInternal->animations[0]->transformationsMatrices[0], 0);
+-- 		Object3DGroup::computeTransformations(nullptr, object3DModelInternal->object3dGroups);
+-- 		// parse through object groups to determine min, max
+-- 		for (auto object3DGroup : object3DModelInternal->object3dGroups) {
+--@@ -118,7 +118,7 @@ BoundingBox* ModelUtilitiesInternal::createBoundingBoxNoMesh(Object3DModelIntern
+-- 		// calculate transformations matrices without world transformations
+-- 		auto parentTransformationsMatrix = object3DModelInternal->getModel()->getImportTransformationsMatrix();
+-- 		parentTransformationsMatrix.multiply(object3DModelInternal->getTransformationsMatrix());
+---		object3DModelInternal->computeTransformationsMatrices(model->getSubGroups(), parentTransformationsMatrix, &animationState, object3DModelInternal->transformationsMatrices[0], 0);
+--+		object3DModelInternal->animations[0]->computeTransformationsMatrices(model->getSubGroups(), parentTransformationsMatrix, &animationState, object3DModelInternal->animations[0]->transformationsMatrices[0], 0);
+-- 		for (auto groupIt: model->getGroups()) {
+-- 			auto& transformedGroupMatrix = object3DModelInternal->getGroupTransformationsMatrix(groupIt.second->getId());
+-- 			transformedGroupMatrix.multiply(vertex.set(0.0f, 0.0f, 0.0f), vertex);
+--diff --git a/src/tdme/engine/subsystems/rendering/Object3DAnimation.cpp b/src/tdme/engine/subsystems/rendering/Object3DAnimation.cpp
+--index 8a9046e8..52e1a986 100644
+----- a/src/tdme/engine/subsystems/rendering/Object3DAnimation.cpp
+--+++ b/src/tdme/engine/subsystems/rendering/Object3DAnimation.cpp
+--@@ -41,6 +41,7 @@ Object3DAnimation::Object3DAnimation(Model* model, Engine::AnimationProcessingTa
+-- {
+-- 	this->animationProcessingTarget = animationProcessingTarget;
+-- 	this->model = model;
+--+	this->objectTransformationsMatrix.identity();
+-- 	// skinning
+-- 	hasSkinning = false;
+-- 	if (model->hasSkinning() == true) {
+--@@ -366,7 +367,7 @@ inline void Object3DAnimation::updateSkinningTransformationsMatrices(const map<s
+-- 	}
+-- }
+-- 
+---void Object3DAnimation::computeTransformations(const Matrix4x4& objectTransformationsMatrix, AnimationState& baseAnimation, map<string, Matrix4x4*>& transformationsMatrices, void* context, int64_t lastFrameAtTime, int64_t currentFrameAtTime)
+--+void Object3DAnimation::computeTransformations(AnimationState& baseAnimation, map<string, Matrix4x4*>& transformationsMatrices, void* context, int64_t lastFrameAtTime, int64_t currentFrameAtTime)
+-- {
+-- 	// do transformations if we have a animation
+-- 	if (baseAnimation.setup != nullptr) {
+--@@ -386,9 +387,7 @@ void Object3DAnimation::computeTransformations(const Matrix4x4& objectTransforma
+-- 		// set up parent transformations matrix
+-- 		Matrix4x4 parentTransformationsMatrix;
+-- 		parentTransformationsMatrix.set(model->getImportTransformationsMatrix());
+---		if (animationProcessingTarget == Engine::AnimationProcessingTarget::CPU_NORENDERING) {
+---			parentTransformationsMatrix.multiply(objectTransformationsMatrix);
+---		}
+--+		parentTransformationsMatrix.multiply(objectTransformationsMatrix);
+-- 		// calculate transformations matrices
+-- 		computeTransformationsMatrices(model->getSubGroups(), parentTransformationsMatrix, &baseAnimation, transformationsMatrices, 0);
+-- 		//
+--@@ -398,26 +397,24 @@ void Object3DAnimation::computeTransformations(const Matrix4x4& objectTransforma
+-- 		// set up parent transformations matrix
+-- 		Matrix4x4 parentTransformationsMatrix;
+-- 		parentTransformationsMatrix.set(model->getImportTransformationsMatrix());
+---		if (animationProcessingTarget == Engine::AnimationProcessingTarget::CPU_NORENDERING) {
+---			parentTransformationsMatrix.multiply(objectTransformationsMatrix);
+---		}
+--+		parentTransformationsMatrix.multiply(objectTransformationsMatrix);
+-- 		// calculate transformations matrices
+-- 		computeTransformationsMatrices(model->getSubGroups(), parentTransformationsMatrix, &baseAnimation, transformationsMatrices, 0);
+-- 	}
+-- }
+-- 
+---void Object3DAnimation::computeTransformations(void* context, const Matrix4x4& objectTransformationsMatrix, int64_t lastFrameAtTime, int64_t currentFrameAtTime) {
+--+void Object3DAnimation::computeTransformations(void* context, int64_t lastFrameAtTime, int64_t currentFrameAtTime) {
+-- 	// compute last animation matrices if required
+-- 	auto baseAnimationIdxLast = transformationsMatrices.size() > 1?(baseAnimationIdx + 1) % 2:-1;
+-- 	if (baseAnimationIdxLast != -1 &&
+-- 		baseAnimations[baseAnimationIdxLast].lastAtTime != -1LL) {
+---		computeTransformations(objectTransformationsMatrix, baseAnimations[baseAnimationIdxLast], transformationsMatrices[1 + baseAnimationIdxLast], context, lastFrameAtTime, currentFrameAtTime);
+--+		computeTransformations(baseAnimations[baseAnimationIdxLast], transformationsMatrices[1 + baseAnimationIdxLast], context, lastFrameAtTime, currentFrameAtTime);
+-- 	} else {
+-- 		baseAnimationIdxLast = -1;
+-- 	}
+-- 
+-- 	// compute current animation matrices
+---	computeTransformations(objectTransformationsMatrix, baseAnimations[baseAnimationIdx], transformationsMatrices[transformationsMatrices.size() > 1?1 + baseAnimationIdx:baseAnimationIdx], context, lastFrameAtTime, currentFrameAtTime);
+--+	computeTransformations(baseAnimations[baseAnimationIdx], transformationsMatrices[transformationsMatrices.size() > 1?1 + baseAnimationIdx:baseAnimationIdx], context, lastFrameAtTime, currentFrameAtTime);
+-- 
+-- 	// blend if required
+-- 	if (transformationsMatrices.size() > 1) {
+--diff --git a/src/tdme/engine/subsystems/rendering/Object3DAnimation.h b/src/tdme/engine/subsystems/rendering/Object3DAnimation.h
+--index 0850dcad..40023973 100644
+----- a/src/tdme/engine/subsystems/rendering/Object3DAnimation.h
+--+++ b/src/tdme/engine/subsystems/rendering/Object3DAnimation.h
+--@@ -10,7 +10,7 @@
+-- #include <tdme/engine/model/fwd-tdme.h>
+-- #include <tdme/engine/subsystems/rendering/fwd-tdme.h>
+-- #include <tdme/engine/subsystems/rendering/AnimationState.h>
+---#include <tdme/math/fwd-tdme.h>
+--+#include <tdme/math/Matrix4x4.h>
+-- 
+-- using std::map;
+-- using std::vector;
+--@@ -30,6 +30,10 @@ using tdme::math::Matrix4x4;
+-- class tdme::engine::subsystems::rendering::Object3DAnimation
+-- {
+-- 	friend class tdme::engine::SkinnedObject3DRenderGroup;
+--+	friend class tdme::engine::subsystems::rendering::ModelUtilitiesInternal;
+--+	friend class tdme::engine::subsystems::rendering::Object3DBase;
+--+	friend class tdme::engine::subsystems::rendering::Object3DGroup;
+--+	friend class tdme::engine::subsystems::rendering::Object3DInternal;
+-- 
+-- private:
+-- 	/**
+--@@ -53,8 +57,9 @@ private:
+-- 	 */
+-- 	int32_t determineSkinnedGroups(const map<string, Group*>&, vector<Group*>& skinningGroups, int32_t idx);
+-- 
+---protected:
+--+private:
+-- 	Model* model;
+--+	Matrix4x4 objectTransformationsMatrix;
+-- 	Engine::AnimationProcessingTarget animationProcessingTarget;
+-- 	map<string, Matrix4x4*> overridenTransformationsMatrices;
+-- 	vector<map<string, Matrix4x4*>> transformationsMatrices;
+--@@ -67,6 +72,14 @@ protected:
+-- 	map<string, AnimationState*> overlayAnimationsById;
+-- 	map<string, AnimationState*> overlayAnimationsByJointId;
+-- 
+--+	/**
+--+	 * Set transformations
+--+	 * @param transformations transformations
+--+	 */
+--+	void setTransformations(const Transformations& transformations) {
+--+		this->objectTransformationsMatrix = transformations.getTransformationsMatrix();
+--+	} 
+--+
+-- 	/**
+-- 	 * Creates all groups transformation matrices
+-- 	 * @param matrices matrices
+--@@ -86,14 +99,13 @@ protected:
+-- 
+-- 	/**
+-- 	 * Compute transformations for given animation state into given transformations matrices
+---	 * @param objectTransformationsMatrix object transformations matrix
+-- 	 * @param baseAnimation base animation
+-- 	 * @param transformationsMatrices transformations matrices
+-- 	 * @param context context
+-- 	 * @param lastFrameAtTime time of last animation computation
+-- 	 * @param currentFrameAtTime time of current animation computation
+-- 	 */
+---	void computeTransformations(const Matrix4x4& objectTransformationsMatrix, AnimationState& baseAnimation, map<string, Matrix4x4*>& transformationsMatrices, void* context, int64_t lastFrameAtTime, int64_t currentFrameAtTime);
+--+	void computeTransformations(AnimationState& baseAnimation, map<string, Matrix4x4*>& transformationsMatrices, void* context, int64_t lastFrameAtTime, int64_t currentFrameAtTime);
+-- 
+-- 	/**
+-- 	 * Update skinning transformations matrices
+--@@ -205,10 +217,9 @@ public:
+-- 	/**
+-- 	 * Pre render step, computes transformations
+-- 	 * @param context context
+---	 * @param objectTransformationsMatrix object transformations matrix
+-- 	 * @param lastFrameAtTime time of last animation computation
+-- 	 * @param currentFrameAtTime time of current animation computation
+-- 	 */
+---	void computeTransformations(void* context, const Matrix4x4& objectTransformationsMatrix, int64_t lastFrameAtTime, int64_t currentFrameAtTime);
+--+	void computeTransformations(void* context, int64_t lastFrameAtTime, int64_t currentFrameAtTime);
+-- 
+-- };
+--diff --git a/src/tdme/engine/subsystems/rendering/Object3DBase.cpp b/src/tdme/engine/subsystems/rendering/Object3DBase.cpp
+--index 9f202319..d8602ee9 100644
+----- a/src/tdme/engine/subsystems/rendering/Object3DBase.cpp
+--+++ b/src/tdme/engine/subsystems/rendering/Object3DBase.cpp
+--@@ -19,6 +19,7 @@
+-- #include <tdme/engine/primitives/Triangle.h>
+-- #include <tdme/engine/subsystems/manager/MeshManager.h>
+-- #include <tdme/engine/subsystems/rendering/AnimationState.h>
+--+#include <tdme/engine/subsystems/rendering/Object3DAnimation.h>
+-- #include <tdme/engine/subsystems/rendering/Object3DBase_TransformedFacesIterator.h>
+-- #include <tdme/engine/subsystems/rendering/Object3DGroup.h>
+-- #include <tdme/engine/subsystems/rendering/Object3DGroupMesh.h>
+--@@ -48,6 +49,7 @@ using tdme::engine::primitives::BoundingVolume;
+-- using tdme::engine::primitives::Triangle;
+-- using tdme::engine::subsystems::manager::MeshManager;
+-- using tdme::engine::subsystems::rendering::AnimationState;
+--+using tdme::engine::subsystems::rendering::Object3DAnimation;
+-- using tdme::engine::subsystems::rendering::Object3DBase_TransformedFacesIterator;
+-- using tdme::engine::subsystems::rendering::Object3DGroup;
+-- using tdme::engine::subsystems::rendering::Object3DGroupMesh;
+--@@ -56,11 +58,16 @@ using tdme::utils::Console;
+-- using tdme::math::Matrix4x4;
+-- using tdme::math::Vector3;
+-- 
+---Object3DBase::Object3DBase(Model* model, bool useManagers, Engine::AnimationProcessingTarget animationProcessingTarget): Object3DAnimation(model, animationProcessingTarget)
+--+Object3DBase::Object3DBase(Model* model, bool useManagers, Engine::AnimationProcessingTarget animationProcessingTarget, int instances)
+-- {
+-- 	this->model = model;
+-- 	this->animationProcessingTarget = animationProcessingTarget;
+-- 	this->usesManagers = useManagers;
+--+	this->instances = instances;
+--+	this->animations.resize(instances);
+--+	for (auto i = 0; i < animations.size(); i++) {
+--+		animations[i] = new Object3DAnimation(model, animationProcessingTarget);
+--+	} 
+-- 	transformedFacesIterator = nullptr;
+-- 	// object 3d groups
+-- 	Object3DGroup::createGroups(this, useManagers, animationProcessingTarget, object3dGroups);
+--@@ -141,6 +148,12 @@ void Object3DBase::initialize()
+-- 		auto object3DGroup = object3dGroups[i];
+-- 		// initiate mesh if not yet done, happens usually after disposing from engine and readding to engine
+-- 		if (object3DGroup->mesh == nullptr) {
+--+			vector<map<string, Matrix4x4*>*> instancesTransformationsMatrices;
+--+			vector<map<string, Matrix4x4*>*> instancesSkinningGroupsMatrices;
+--+			for (auto animation: object3DGroup->object->animations) {
+--+				instancesTransformationsMatrices.push_back(&animation->transformationsMatrices[0]);
+--+				instancesSkinningGroupsMatrices.push_back(animation->getSkinningGroupsMatrices(object3DGroup->group));
+--+			} 
+-- 			if (usesManagers == true) {
+-- 				object3DGroup->mesh = meshManager->getMesh(object3DGroup->id);
+-- 				if (object3DGroup->mesh == nullptr) {
+--@@ -148,8 +161,8 @@ void Object3DBase::initialize()
+-- 						object3DGroup->renderer,
+-- 						animationProcessingTarget,
+-- 						object3DGroup->group,
+---						object3DGroup->object->transformationsMatrices[0],
+---						getSkinningGroupsMatrices(object3DGroup->group)
+--+						instancesTransformationsMatrices,
+--+						instancesSkinningGroupsMatrices
+-- 					);
+-- 				}
+-- 			} else {
+--@@ -157,8 +170,8 @@ void Object3DBase::initialize()
+-- 					object3DGroup->renderer,
+-- 					animationProcessingTarget,
+-- 					object3DGroup->group,
+---					object3DGroup->object->transformationsMatrices[0],
+---					getSkinningGroupsMatrices(object3DGroup->group)
+--+					instancesTransformationsMatrices,
+--+					instancesSkinningGroupsMatrices
+-- 				);
+-- 			}
+-- 		}
+--diff --git a/src/tdme/engine/subsystems/rendering/Object3DBase.h b/src/tdme/engine/subsystems/rendering/Object3DBase.h
+--index 28429d3e..6dcd3d74 100644
+----- a/src/tdme/engine/subsystems/rendering/Object3DBase.h
+--+++ b/src/tdme/engine/subsystems/rendering/Object3DBase.h
+--@@ -33,9 +33,10 @@ using tdme::engine::subsystems::rendering::Object3DGroupMesh;
+--  * Object3D base class
+--  * @author Andreas Drewke
+--  */
+---class tdme::engine::subsystems::rendering::Object3DBase: public Transformations, public Object3DAnimation
+--+class tdme::engine::subsystems::rendering::Object3DBase: public Transformations
+-- {
+-- 	friend class Object3DGroup;
+--+	friend class Object3DGroupMesh;
+-- 	friend class Object3DBase_TransformedFacesIterator;
+-- 	friend class ModelUtilitiesInternal;
+-- 
+--@@ -46,14 +47,18 @@ protected:
+-- 	Model* model;
+-- 	vector<Object3DGroup*> object3dGroups;
+-- 	bool usesManagers;
+--+	int instances;
+--+	vector<Object3DAnimation*> animations;
+--+	Engine::AnimationProcessingTarget animationProcessingTarget;
+-- 
+-- 	/**
+-- 	 * Public constructor
+-- 	 * @param model model
+-- 	 * @param useManagers use mesh and object 3d group renderer model manager
+-- 	 * @param animationProcessingTarget animation processing target
+--+	 * @param instances instances to compute and render by multiplying
+-- 	 */
+---	Object3DBase(Model* model, bool useManagers, Engine::AnimationProcessingTarget animationProcessingTarget);
+--+	Object3DBase(Model* model, bool useManagers, Engine::AnimationProcessingTarget animationProcessingTarget, int instances);
+-- 
+-- 	/**
+-- 	 * Destructor
+--@@ -76,7 +81,7 @@ public:
+-- 	 * @param currentFrameAtTime time of current animation computation
+-- 	 */
+-- 	virtual inline void computeTransformations(void* context, int64_t lastFrameAtTime, int64_t currentFrameAtTime){
+---		Object3DAnimation::computeTransformations(context, Transformations::getTransformationsMatrix(), lastFrameAtTime, currentFrameAtTime);
+--+		for (auto animation: animations) animation->computeTransformations(context, lastFrameAtTime, currentFrameAtTime);
+-- 		Object3DGroup::computeTransformations(context, object3dGroups);
+-- 	} 
+-- 
+--@@ -113,4 +118,111 @@ public:
+-- 	 * Disposes this object3d 
+-- 	 */
+-- 	virtual void dispose();
+--+
+--+	/** 
+--+	 * Sets up a base animation to play
+--+	 * @param id id
+--+	 * @param speed speed whereas 1.0 is default speed
+--+	 */
+--+	inline void setAnimation(const string& id, float speed = 1.0f) {
+--+		animations[0]->setAnimation(id, speed);
+--+	}
+--+
+--+	/**
+--+	 * Set up animation speed
+--+	 * @param speed speed whereas 1.0 is default speed
+--+	 */
+--+	inline void setAnimationSpeed(float speed) {
+--+		animations[0]->setAnimationSpeed(speed);
+--+	}
+--+
+--+	/** 
+--+	 * Overlays a animation above the base animation
+--+	 * @param id id
+--+	 */
+--+	inline void addOverlayAnimation(const string& id) {
+--+		animations[0]->addOverlayAnimation(id);
+--+	}
+--+
+--+	/** 
+--+	 * Removes a overlay animation
+--+	 * @param id id
+--+	 */
+--+	inline void removeOverlayAnimation(const string& id) {
+--+		animations[0]->removeOverlayAnimation(id);
+--+	}
+--+
+--+	/** 
+--+	 * Removes all finished overlay animations
+--+	 */
+--+	inline void removeOverlayAnimationsFinished() {
+--+		animations[0]->removeOverlayAnimationsFinished();
+--+	}
+--+
+--+	/** 
+--+	 * Removes all overlay animations
+--+	 */
+--+	inline void removeOverlayAnimations() {
+--+		animations[0]->removeOverlayAnimations();
+--+	}
+--+
+--+	/** 
+--+	 * @return active animation setup id
+--+	 */
+--+	inline const string getAnimation() {
+--+		return animations[0]->getAnimation();
+--+	}
+--+
+--+	/** 
+--+	 * Returns current base animation time 
+--+	 * @return 0.0 <= time <= 1.0
+--+	 */
+--+	inline float getAnimationTime() {
+--+		return animations[0]->getAnimationTime();
+--+	}
+--+
+--+	/** 
+--+	 * Returns if there is currently running a overlay animation with given id
+--+	 * @param id id
+--+	 * @return animation is running
+--+	 */
+--+	inline bool hasOverlayAnimation(const string& id) {
+--+		return animations[0]->hasOverlayAnimation(id);
+--+	}
+--+
+--+	/** 
+--+	 * Returns current overlay animation time
+--+	 * @param id id 
+--+	 * @return 0.0 <= time <= 1.0
+--+	 */
+--+	inline float getOverlayAnimationTime(const string& id) {
+--+		return animations[0]->getOverlayAnimationTime(id);
+--+	}
+--+
+--+	/** 
+--+	 * Returns transformation matrix for given group
+--+	 * @param id group id
+--+	 * @return transformation matrix or identity matrix if not found
+--+	 */
+--+	inline const Matrix4x4 getGroupTransformationsMatrix(const string& id) {
+--+		return animations[0]->getGroupTransformationsMatrix(id);
+--+	}
+--+
+--+	/**
+--+	 * Set transformation matrix for given group
+--+	 * @param id group id
+--+	 * @param matrix transformation matrix
+--+	 */
+--+	inline void setGroupTransformationsMatrix(const string& id, const Matrix4x4& matrix) {
+--+		animations[0]->setGroupTransformationsMatrix(id, matrix);
+--+	}
+--+
+--+	/**
+--+	 * Unset transformation matrix for given group
+--+	 * @param id group id
+--+	 */
+--+	inline void unsetGroupTransformationsMatrix(const string& id) {
+--+		animations[0]->unsetGroupTransformationsMatrix(id);
+--+	}
+--+
+-- };
+--diff --git a/src/tdme/engine/subsystems/rendering/Object3DGroup.cpp b/src/tdme/engine/subsystems/rendering/Object3DGroup.cpp
+--index 120181be..ab8652ba 100644
+----- a/src/tdme/engine/subsystems/rendering/Object3DGroup.cpp
+--+++ b/src/tdme/engine/subsystems/rendering/Object3DGroup.cpp
+--@@ -86,7 +86,9 @@ void Object3DGroup::createGroups(Object3DBase* object3D, const map<string, Group
+-- 				":" +
+-- 				group->getId() +
+-- 				":" +
+---				to_string(animationProcessingTarget);
+--+				to_string(animationProcessingTarget) +
+--+				":" +
+--+				to_string(object3D->instances);
+-- 			if (group->getSkinning() != nullptr || (animationProcessingTarget == Engine::AnimationProcessingTarget::CPU_NORENDERING)) {
+-- 				object3DGroup->id =
+-- 					object3DGroup->id +
+--@@ -97,6 +99,12 @@ void Object3DGroup::createGroups(Object3DBase* object3D, const map<string, Group
+-- 			object3DGroup->group = group;
+-- 			object3DGroup->animated = animated;
+-- 			object3DGroup->renderer = new Object3DGroupRenderer(object3DGroup);
+--+			vector<map<string, Matrix4x4*>*> instancesTransformationsMatrices;
+--+			vector<map<string, Matrix4x4*>*> instancesSkinningGroupsMatrices;
+--+			for (auto animation: object3D->animations) {
+--+				instancesTransformationsMatrices.push_back(&animation->transformationsMatrices[0]);
+--+				instancesSkinningGroupsMatrices.push_back(animation->getSkinningGroupsMatrices(object3DGroup->group));
+--+			} 
+-- 			if (useManagers == true) {
+-- 				auto meshManager = Engine::getInstance()->getMeshManager();
+-- 				object3DGroup->mesh = meshManager->getMesh(object3DGroup->id);
+--@@ -105,8 +113,8 @@ void Object3DGroup::createGroups(Object3DBase* object3D, const map<string, Group
+-- 						object3DGroup->renderer,
+-- 						animationProcessingTarget,
+-- 						group,
+---						object3D->transformationsMatrices[0],
+---						object3D->getSkinningGroupsMatrices(group)
+--+						instancesTransformationsMatrices,
+--+						instancesSkinningGroupsMatrices
+-- 					);
+-- 					meshManager->addMesh(object3DGroup->id, object3DGroup->mesh);
+-- 				}
+--@@ -115,8 +123,8 @@ void Object3DGroup::createGroups(Object3DBase* object3D, const map<string, Group
+-- 					object3DGroup->renderer,
+-- 					animationProcessingTarget,
+-- 					group,
+---					object3D->transformationsMatrices[0],
+---					object3D->getSkinningGroupsMatrices(group)
+--+					instancesTransformationsMatrices,
+--+					instancesSkinningGroupsMatrices
+-- 				);
+-- 			}
+-- 			object3DGroup->textureMatricesByEntities.resize(group->getFacesEntities().size());
+--@@ -141,7 +149,7 @@ void Object3DGroup::createGroups(Object3DBase* object3D, const map<string, Group
+-- 				object3DGroup->materialNormalTextureIdsByEntities[j] = TEXTUREID_NONE;
+-- 			}
+-- 			// determine group transformations matrix
+---			object3DGroup->groupTransformationsMatrix = object3D->transformationsMatrices[0].find(group->getId())->second;
+--+			object3DGroup->groupTransformationsMatrix = object3D->animations[0]->transformationsMatrices[0].find(group->getId())->second;
+-- 		}
+-- 		// but still check sub groups
+-- 		createGroups(object3D, group->getSubGroups(), animated, useManagers, animationProcessingTarget, object3DGroups);
+--diff --git a/src/tdme/engine/subsystems/rendering/Object3DGroup.h b/src/tdme/engine/subsystems/rendering/Object3DGroup.h
+--index 3cc19c49..85c94e3c 100644
+----- a/src/tdme/engine/subsystems/rendering/Object3DGroup.h
+--+++ b/src/tdme/engine/subsystems/rendering/Object3DGroup.h
+--@@ -41,6 +41,7 @@ class tdme::engine::subsystems::rendering::Object3DGroup final
+-- 	friend class ModelUtilitiesInternal;
+-- 	friend class Object3DBase;
+-- 	friend class Object3DBase_TransformedFacesIterator;
+--+	friend class Object3DGroupMesh;
+-- 	friend class Object3DGroupRenderer;
+-- 	friend class Object3DInternal;
+-- 	friend class Object3DRenderer;
+--diff --git a/src/tdme/engine/subsystems/rendering/Object3DGroupMesh.cpp b/src/tdme/engine/subsystems/rendering/Object3DGroupMesh.cpp
+--index c6e60b7f..880258c5 100644
+----- a/src/tdme/engine/subsystems/rendering/Object3DGroupMesh.cpp
+--+++ b/src/tdme/engine/subsystems/rendering/Object3DGroupMesh.cpp
+--@@ -15,6 +15,7 @@
+-- #include <tdme/engine/model/Skinning.h>
+-- #include <tdme/engine/model/TextureCoordinate.h>
+-- #include <tdme/engine/subsystems/rendering/ObjectBuffer.h>
+--+#include <tdme/engine/subsystems/rendering/Object3DBase.h>
+-- #include <tdme/engine/subsystems/rendering/Object3DGroupMesh.h>
+-- #include <tdme/engine/subsystems/rendering/Object3DGroupRenderer.h>
+-- #include <tdme/engine/subsystems/renderer/Renderer.h>
+--@@ -38,6 +39,7 @@ using tdme::engine::model::Joint;
+-- using tdme::engine::model::JointWeight;
+-- using tdme::engine::model::Skinning;
+-- using tdme::engine::model::TextureCoordinate;
+--+using tdme::engine::subsystems::rendering::Object3DBase;
+-- using tdme::engine::subsystems::rendering::Object3DGroupRenderer;
+-- using tdme::engine::subsystems::rendering::ObjectBuffer;
+-- using tdme::engine::subsystems::renderer::Renderer;
+--@@ -59,16 +61,16 @@ Object3DGroupMesh::Object3DGroupMesh()
+-- 	skinning = false;
+-- 	skinningJoints = -1;
+-- 	object3DGroupRenderer = nullptr;
+---	skinningMatrices = nullptr;
+-- 	faceCount = 0;
+-- 	recreatedBuffers = false;
+-- 	animationProcessingTarget = Engine::AnimationProcessingTarget::NONE;
+-- }
+-- 
+---Object3DGroupMesh* Object3DGroupMesh::createMesh(Object3DGroupRenderer* object3DGroupRenderer, Engine::AnimationProcessingTarget animationProcessingTarget, Group* group, map<string, Matrix4x4*>& transformationMatrices, map<string, Matrix4x4*>* skinningMatrices)
+--+Object3DGroupMesh* Object3DGroupMesh::createMesh(Object3DGroupRenderer* object3DGroupRenderer, Engine::AnimationProcessingTarget animationProcessingTarget, Group* group, const vector<map<string, Matrix4x4*>*>& transformationMatrices, const vector<map<string, Matrix4x4*>*>& skinningMatrices)
+-- {
+-- 	auto mesh = new Object3DGroupMesh();
+-- 	//
+--+	mesh->instances = object3DGroupRenderer->object3DGroup->object->instances;
+-- 	mesh->object3DGroupRenderer = object3DGroupRenderer;
+-- 	mesh->group = group;
+-- 	// group data
+--@@ -86,40 +88,71 @@ Object3DGroupMesh* Object3DGroupMesh::createMesh(Object3DGroupRenderer* object3D
+-- 	mesh->skinning = skinning != nullptr;
+-- 	mesh->skinningMatrices = skinningMatrices;
+-- 	// set up transformed vertices, normals and friends
+---	if ((skinning != nullptr && animationProcessingTarget == Engine::AnimationProcessingTarget::CPU) ||
+--+	if (mesh->instances > 1 || (skinning != nullptr && animationProcessingTarget == Engine::AnimationProcessingTarget::CPU) ||
+-- 		animationProcessingTarget == Engine::AnimationProcessingTarget::CPU_NORENDERING) {
+-- 		// transformed mesh vertices
+---		mesh->transformedVertices.resize(groupVertices.size());
+--+		mesh->transformedVertices.resize(groupVertices.size() * mesh->instances);
+-- 		mesh->vertices = &mesh->transformedVertices;
+---		for (auto j = 0; j < mesh->vertices->size(); j++) {
+---			mesh->transformedVertices[j].set(groupVertices[j]);
+---		}
+--+		{
+--+			auto idx = 0;
+--+			for (auto i = 0; i < mesh->instances; i++)
+--+			for (auto j = 0; j < groupVertices.size(); j++) {
+--+				mesh->transformedVertices[idx++].set(groupVertices[j]);
+--+			}
+--+		}		
+-- 		// transformed mesh normals
+---		mesh->transformedNormals.resize(groupNormals.size());
+--+		mesh->transformedNormals.resize(groupNormals.size() * mesh->instances);
+-- 		mesh->normals = &mesh->transformedNormals;
+---		for (auto j = 0; j < mesh->normals->size(); j++) {
+---			mesh->transformedNormals[j].set(groupNormals[j]);
+--+		{
+--+			auto idx = 0;
+--+			for (auto i = 0; i < mesh->instances; i++)
+--+			for (auto j = 0; j < groupNormals.size(); j++) {
+--+				mesh->transformedNormals[idx++].set(groupNormals[j]);
+--+			}
+-- 		}
+--+		if (mesh->instances > 1) {
+--+			// transformed mesh texture coordinates
+--+			mesh->transformedTextureCoordinates.resize(groupTextureCoordinates.size() * mesh->instances);
+--+			mesh->textureCoordinates = &mesh->transformedTextureCoordinates;
+--+			{
+--+				auto idx = 0;
+--+				for (auto i = 0; i < mesh->instances; i++)
+--+				for (auto j = 0; j < groupTextureCoordinates.size(); j++) {
+--+					mesh->transformedTextureCoordinates[idx++].set(groupTextureCoordinates[j]);
+--+				}
+--+			}
+--+		} else {
+--+			mesh->textureCoordinates = &groupTextureCoordinates;
+--+		} 
+-- 		// transformed mesh tangents
+-- 		if (groupTangents.size() > 0) {
+---			mesh->transformedTangents.resize(groupTangents.size());
+--+			mesh->transformedTangents.resize(groupTangents.size() * mesh->instances);
+-- 			mesh->tangents = &mesh->transformedTangents;
+---			for (auto j = 0; j < mesh->tangents->size(); j++) {
+---				mesh->transformedTangents[j].set(groupTangents[j]);
+---			}
+--+			{
+--+				auto idx = 0;
+--+				for (auto i = 0; i < mesh->instances; i++)
+--+				for (auto j = 0; j < groupTangents.size(); j++) {
+--+					mesh->transformedTangents[idx++].set(groupTangents[j]);
+--+				}
+--+			}		
+-- 		}
+-- 		// transformed mesh bitangents
+-- 		if (groupBitangents.size() > 0) {
+---			mesh->transformedBitangents.resize(groupBitangents.size());
+--+			mesh->transformedBitangents.resize(groupBitangents.size() * mesh->instances);
+-- 			mesh->bitangents = &mesh->transformedBitangents;
+---			for (auto j = 0; j < mesh->bitangents->size(); j++) {
+---				mesh->transformedBitangents[j].set(groupBitangents[j]);
+--+			{
+--+				auto idx = 0;
+--+				for (auto i = 0; i < mesh->instances; i++)
+--+				for (auto j = 0; j < groupBitangents.size(); j++) {
+--+					mesh->transformedBitangents[idx++].set(groupBitangents[j]);
+--+				}
+-- 			}
+-- 		}
+-- 	} else {
+-- 		// no transformations on CPU, we can use model data
+-- 		mesh->vertices = &groupVertices;
+-- 		mesh->normals = &groupNormals;
+--+		mesh->textureCoordinates = &groupTextureCoordinates;
+-- 		if (groupTangents.size() > 0) {
+-- 			mesh->tangents = &groupTangents;
+-- 		}
+--@@ -132,14 +165,17 @@ Object3DGroupMesh* Object3DGroupMesh::createMesh(Object3DGroupRenderer* object3D
+-- 	for (auto& facesEntity : group->getFacesEntities()) {
+-- 		indicesCount += 3 * facesEntity.getFaces().size();
+-- 	}
+---	mesh->indices.resize(indicesCount);
+--+	mesh->indices.resize(mesh->instances * indicesCount);
+-- 	{
+-- 		auto j = 0;
+---		for (auto& facesEntity : group->getFacesEntities())
+---		for (auto& face : facesEntity.getFaces())
+---		for (auto& vertexIndex : face.getVertexIndices()) {
+---			mesh->indices[j++] = vertexIndex;
+---		}
+--+		for (auto& facesEntity : group->getFacesEntities()) { 
+--+			for (auto i = 0; i < mesh->instances; i++) { 
+--+				for (auto& face : facesEntity.getFaces()) 
+--+				for (auto& vertexIndex : face.getVertexIndices()) {
+--+					mesh->indices[j++] =  i * groupVertices.size() + vertexIndex;
+--+				}		
+--+			}
+--+		}	
+-- 	}
+-- 	//
+-- 	mesh->recreatedBuffers = false;
+--@@ -148,7 +184,7 @@ Object3DGroupMesh* Object3DGroupMesh::createMesh(Object3DGroupRenderer* object3D
+-- 		mesh->animationProcessingTarget == Engine::AnimationProcessingTarget::CPU_NORENDERING ||
+-- 		mesh->animationProcessingTarget == Engine::AnimationProcessingTarget::GPU) {
+-- 		// group transformations matrix
+---		mesh->cGroupTransformationsMatrix = transformationMatrices.find(group->getId())->second;
+--+		mesh->cGroupTransformationsMatrix = transformationMatrices[0]->find(group->getId())->second;	
+-- 	}
+-- 	// skinning
+-- 	if ((skinning != nullptr &&
+--@@ -156,7 +192,8 @@ Object3DGroupMesh* Object3DGroupMesh::createMesh(Object3DGroupRenderer* object3D
+-- 		// skinning computation caches if computing skinning on CPU
+-- 		if (mesh->animationProcessingTarget == Engine::AnimationProcessingTarget::CPU || mesh->animationProcessingTarget == Engine::AnimationProcessingTarget::CPU_NORENDERING) {
+-- 			mesh->cSkinningJointWeight.resize(groupVertices.size());
+---			mesh->cSkinningJointTransformationsMatrices.resize(groupVertices.size());
+--+			mesh->cSkinningJointTransformationsMatrices.resize(mesh->instances);
+--+			for (auto i = 0; i < mesh->instances; i++) mesh->cSkinningJointTransformationsMatrices[i].resize(groupVertices.size());
+-- 			// compute joint weight caches
+-- 			auto& joints = skinning->getJoints();
+-- 			auto& weights = skinning->getWeights();
+--@@ -167,16 +204,26 @@ Object3DGroupMesh* Object3DGroupMesh::createMesh(Object3DGroupRenderer* object3D
+-- 					mesh->cSkinningMaxVertexWeights = vertexJointWeights;
+-- 
+-- 				mesh->cSkinningJointWeight[vertexIndex].resize(vertexJointWeights);
+---				mesh->cSkinningJointTransformationsMatrices[vertexIndex].resize(vertexJointWeights);
+---				auto jointWeightIdx = 0;
+---				for (auto& jointWeight : jointsWeights[vertexIndex]) {
+---					auto& joint = joints[jointWeight.getJointIndex()];
+---					mesh->cSkinningJointWeight[vertexIndex][jointWeightIdx] = weights[jointWeight.getWeightIndex()];
+---					auto skinningMatrixIt = skinningMatrices->find(joint.getGroupId());
+---					mesh->cSkinningJointTransformationsMatrices[vertexIndex][jointWeightIdx] = skinningMatrixIt->second;
+---					// next
+---					jointWeightIdx++;
+---				}
+--+				for (auto i = 0; i < mesh->instances; i++) mesh->cSkinningJointTransformationsMatrices[i][vertexIndex].resize(vertexJointWeights);
+--+				{
+--+					auto jointWeightIdx = 0;
+--+					for (auto& jointWeight : jointsWeights[vertexIndex]) {
+--+						auto& joint = joints[jointWeight.getJointIndex()];
+--+						mesh->cSkinningJointWeight[vertexIndex][jointWeightIdx] = weights[jointWeight.getWeightIndex()];
+--+						// next
+--+						jointWeightIdx++;
+--+					}
+--+				}	
+--+				for (auto i = 0; i < mesh->instances; i++) { 
+--+					auto jointWeightIdx = 0;
+--+					for (auto& jointWeight : jointsWeights[vertexIndex]) {
+--+						auto& joint = joints[jointWeight.getJointIndex()];
+--+						auto skinningMatrixIt = skinningMatrices[i]->find(joint.getGroupId());
+--+						mesh->cSkinningJointTransformationsMatrices[i][vertexIndex][jointWeightIdx] = skinningMatrixIt->second;
+--+						// next
+--+						jointWeightIdx++;
+--+					}
+--+				}		
+-- 			}
+-- 		}
+-- 	}
+--@@ -210,22 +257,23 @@ void Object3DGroupMesh::computeTransformations(void* context)
+-- 			Vector3* transformedBitangent;
+-- 			float totalWeights;
+-- 			float weightNormalized;
+--+			for (auto i = 0; i < instances; i++)
+-- 			for (auto vertexIndex = 0; vertexIndex < groupVertices.size(); vertexIndex++) {
+-- 				// do vertices
+-- 				vertex = &groupVertices[vertexIndex];
+---				transformedVertex = &transformedVertices[vertexIndex].set(0.0f, 0.0f, 0.0f);
+--+				transformedVertex = &transformedVertices[groupVertices.size() * i + vertexIndex].set(0.0f, 0.0f, 0.0f);
+-- 				normal = &groupNormals[vertexIndex];
+---				transformedNormal = &transformedNormals[vertexIndex].set(0.0f, 0.0f, 0.0f);
+--+				transformedNormal = &transformedNormals[groupVertices.size() * i + vertexIndex].set(0.0f, 0.0f, 0.0f);
+-- 				tangent = tangents != nullptr?&groupTangent[vertexIndex]:nullptr;
+---				transformedTangent = tangents != nullptr?&transformedTangents[vertexIndex].set(0.0f, 0.0f, 0.0f):nullptr;
+--+				transformedTangent = tangents != nullptr?&transformedTangents[groupVertices.size() * i + vertexIndex].set(0.0f, 0.0f, 0.0f):nullptr;
+-- 				bitangent = bitangents != nullptr?&groupBitangent[vertexIndex]:nullptr;
+---				transformedBitangent = bitangents != nullptr?&transformedBitangents[vertexIndex].set(0.0f, 0.0f, 0.0f):nullptr;
+--+				transformedBitangent = bitangents != nullptr?&transformedBitangents[groupVertices.size() * i + vertexIndex].set(0.0f, 0.0f, 0.0f):nullptr;
+-- 				// compute every influence on vertex and vertex normals
+-- 				totalWeights = 0.0f;
+-- 				for (auto vertexJointWeightIdx = 0; vertexJointWeightIdx < jointsWeights[vertexIndex].size(); vertexJointWeightIdx++) {
+-- 					auto weight = cSkinningJointWeight[vertexIndex][vertexJointWeightIdx];
+-- 					// skinning transformation matrix
+---					auto cTransformationsMatrix = cSkinningJointTransformationsMatrices[vertexIndex][vertexJointWeightIdx];
+--+					auto cTransformationsMatrix = cSkinningJointTransformationsMatrices[i][vertexIndex][vertexJointWeightIdx];
+-- 					// vertex
+-- 					transformedVertex->add(cTransformationsMatrix->multiply(*vertex, tmpVector3).scale(weight));
+-- 					// normals
+--@@ -301,7 +349,7 @@ bool Object3DGroupMesh::getRecreatedBuffers()
+-- void Object3DGroupMesh::setupVertexIndicesBuffer(Renderer *renderer, void *context, int32_t vboId) {
+-- 	// upload
+-- 	if (renderer->isUsingShortIndices() == true) {
+---		if (indices.size() > 65535) {
+--+		if (instances * indices.size() > 65535) {
+-- 			Console::println(
+-- 				"Object3DGroupMesh::setupVertexIndicesBuffer(): " +
+-- 				group->getModel()->getName() + ":" +
+--@@ -310,16 +358,18 @@ void Object3DGroupMesh::setupVertexIndicesBuffer(Renderer *renderer, void *conte
+-- 				to_string(indices.size())
+-- 			);
+-- 		}
+---		auto sbIndices = ObjectBuffer::getByteBuffer(context, faceCount * 3 * sizeof(uint16_t))->asShortBuffer();
+--+		auto sbIndices = ObjectBuffer::getByteBuffer(context, instances * faceCount * 3 * sizeof(uint16_t))->asShortBuffer();
+-- 		// create face vertex indices, will never be changed in engine
+--+		for (auto i = 0; i < instances; i++)
+-- 		for (auto index: indices) {
+-- 			sbIndices.put(index);
+-- 		}
+-- 		// done, upload
+-- 		renderer->uploadIndicesBufferObject(context, vboId, sbIndices.getPosition() * sizeof(uint16_t), &sbIndices);
+-- 	} else {
+---		auto ibIndices = ObjectBuffer::getByteBuffer(context, faceCount * 3 * sizeof(uint32_t))->asIntBuffer();
+--+		auto ibIndices = ObjectBuffer::getByteBuffer(context, instances * faceCount * 3 * sizeof(uint32_t))->asIntBuffer();
+-- 		// create face vertex indices, will never be changed in engine
+--+		for (auto i = 0; i < instances; i++)
+-- 		for (auto index: indices) {
+-- 			ibIndices.put(index);
+-- 		}
+--@@ -331,13 +381,11 @@ void Object3DGroupMesh::setupVertexIndicesBuffer(Renderer *renderer, void *conte
+-- 
+-- void Object3DGroupMesh::setupTextureCoordinatesBuffer(Renderer* renderer, void* context, int32_t vboId)
+-- {
+---	// check if we have texture coordinates
+---	auto& groupTextureCoordinates = group->getTextureCoordinates();
+---	if (groupTextureCoordinates.size() == 0) return;
+--+	if (textureCoordinates->size() == 0) return;
+-- 	// create texture coordinates buffer, will never be changed in engine
+---	auto fbTextureCoordinates = ObjectBuffer::getByteBuffer(context, groupTextureCoordinates.size() * 2 * sizeof(float))->asFloatBuffer();
+--+	auto fbTextureCoordinates = ObjectBuffer::getByteBuffer(context, textureCoordinates->size() * 2 * sizeof(float))->asFloatBuffer();
+-- 	// construct texture coordinates byte buffer as this will not change usually
+---	for (auto& textureCoordinate: groupTextureCoordinates) {
+--+	for (auto& textureCoordinate: *textureCoordinates) {
+-- 		fbTextureCoordinates.put(textureCoordinate.getArray());
+-- 	}
+-- 	// done, upload
+--diff --git a/src/tdme/engine/subsystems/rendering/Object3DGroupMesh.h b/src/tdme/engine/subsystems/rendering/Object3DGroupMesh.h
+--index 7830d1bd..1cd11be4 100644
+----- a/src/tdme/engine/subsystems/rendering/Object3DGroupMesh.h
+--+++ b/src/tdme/engine/subsystems/rendering/Object3DGroupMesh.h
+--@@ -45,19 +45,22 @@ class tdme::engine::subsystems::rendering::Object3DGroupMesh final
+-- 	friend class tdme::engine::subsystems::skinning::SkinningShader;
+-- 
+-- private:
+--+	int instances;
+-- 	Object3DGroupRenderer* object3DGroupRenderer;
+---	Group* group ;
+--+	Group* group;
+-- 	int32_t faceCount;
+-- 	const vector<Vector3>* vertices;
+-- 	const vector<Vector3>* normals;
+-- 	const vector<Vector3>* tangents;
+-- 	const vector<Vector3>* bitangents;
+--+	const vector<TextureCoordinate>* textureCoordinates;
+-- 	vector<int32_t> indices;
+-- 	vector<Vector3> transformedVertices;
+-- 	vector<Vector3> transformedNormals;
+-- 	vector<Vector3> transformedTangents;
+-- 	vector<Vector3> transformedBitangents;
+---	map<string, Matrix4x4*>* skinningMatrices;
+--+	vector<TextureCoordinate> transformedTextureCoordinates;
+--+	vector<map<string, Matrix4x4*>*> skinningMatrices;
+-- 	Engine::AnimationProcessingTarget animationProcessingTarget;
+-- 
+-- 	int32_t cSkinningMaxVertexWeights;
+--@@ -65,7 +68,7 @@ private:
+-- 
+-- 	Matrix4x4* cGroupTransformationsMatrix;
+-- 
+---	vector<vector<Matrix4x4*>> cSkinningJointTransformationsMatrices;
+--+	vector<vector<vector<Matrix4x4*>>> cSkinningJointTransformationsMatrices;
+-- 
+-- 	bool skinning;
+-- 	int32_t skinningJoints;
+--@@ -82,11 +85,11 @@ private:
+-- 	 * @param object3DGroupRenderer object 3D group renderer
+-- 	 * @param animationProcessingTarget animation processing target
+-- 	 * @param group group
+---	 * @param transformationMatrices transformationm matrices
+---	 * @param skinningMatrices skinning matrices 
+--+	 * @param transformationMatrices instances transformationm matrices
+--+	 * @param skinningMatrices instances skinning matrices 
+-- 	 * @return object 3d group mesh
+-- 	 */
+---	static Object3DGroupMesh* createMesh(Object3DGroupRenderer* object3DGroupRenderer, Engine::AnimationProcessingTarget animationProcessingTarget, Group* group, map<string, Matrix4x4*>& transformationMatrices, map<string, Matrix4x4*>* skinningMatrices); // TODO: std container: maybe use call by reference
+--+	static Object3DGroupMesh* createMesh(Object3DGroupRenderer* object3DGroupRenderer, Engine::AnimationProcessingTarget animationProcessingTarget, Group* group, const vector<map<string, Matrix4x4*>*>& transformationMatrices, const vector<map<string, Matrix4x4*>*>& skinningMatrices);
+-- 
+-- 	/** 
+-- 	 * Computes mesh transformations
+--diff --git a/src/tdme/engine/subsystems/rendering/Object3DGroupRenderer.h b/src/tdme/engine/subsystems/rendering/Object3DGroupRenderer.h
+--index df8055a1..a02c4ef9 100644
+----- a/src/tdme/engine/subsystems/rendering/Object3DGroupRenderer.h
+--+++ b/src/tdme/engine/subsystems/rendering/Object3DGroupRenderer.h
+--@@ -27,6 +27,7 @@ class tdme::engine::subsystems::rendering::Object3DGroupRenderer final
+-- {
+-- 	friend class Object3DRenderer;
+-- 	friend class tdme::engine::Object3D;
+--+	friend class tdme::engine::subsystems::rendering::Object3DGroupMesh;
+-- 	friend class tdme::engine::subsystems::skinning::SkinningShader;
+-- 
+-- private:
+--diff --git a/src/tdme/engine/subsystems/rendering/Object3DInternal.cpp b/src/tdme/engine/subsystems/rendering/Object3DInternal.cpp
+--index 85f12ab1..24b50673 100644
+----- a/src/tdme/engine/subsystems/rendering/Object3DInternal.cpp
+--+++ b/src/tdme/engine/subsystems/rendering/Object3DInternal.cpp
+--@@ -31,8 +31,8 @@ using tdme::engine::subsystems::rendering::Object3DGroup;
+-- using tdme::engine::subsystems::rendering::ModelUtilitiesInternal;
+-- using tdme::math::Vector3;
+-- 
+---Object3DInternal::Object3DInternal(const string& id, Model* model) :
+---	Object3DBase(model, true, Engine::animationProcessingTarget)
+--+Object3DInternal::Object3DInternal(const string& id, Model* model, int instances) :
+--+	Object3DBase(model, true, Engine::animationProcessingTarget, instances)
+-- {
+-- 	this->id = id;
+-- 	enabled = true;
+--@@ -41,7 +41,7 @@ Object3DInternal::Object3DInternal(const string& id, Model* model) :
+-- 	receivesShadows = false;
+-- 	effectColorMul.set(1.0f, 1.0f, 1.0f, 1.0f);
+-- 	effectColorAdd.set(0.0f, 0.0f, 0.0f, 0.0f);
+---	boundingBox.fromBoundingVolume(model->getBoundingBox());
+--+	boundingBox.fromBoundingVolume(model->getBoundingBox()); // TODO: What to do with the instances here regarding instances?
+-- 	boundingBoxTransformed.fromBoundingVolume(model->getBoundingBox());
+-- 	updateBoundingBox();
+-- }
+--@@ -101,7 +101,7 @@ void Object3DInternal::setTextureMatrix(const Matrix2D3x3& textureMatrix, const
+-- void Object3DInternal::setGroupTransformationsMatrix(const string& id, const Matrix4x4& matrix) {
+-- 	Object3DBase::setGroupTransformationsMatrix(id, matrix);
+-- 	map<string, Matrix4x4*> _overridenTransformationsMatrices;
+---	for (auto overridenTransformationsMatrixIt: overridenTransformationsMatrices) {
+--+	for (auto overridenTransformationsMatrixIt: animations[0]->overridenTransformationsMatrices) {
+-- 		_overridenTransformationsMatrices[overridenTransformationsMatrixIt.first] = new Matrix4x4(*overridenTransformationsMatrixIt.second);
+-- 	}
+-- 	auto newBoundingBox = ModelUtilitiesInternal::createBoundingBox(this->getModel(), _overridenTransformationsMatrices);
+--@@ -112,7 +112,7 @@ void Object3DInternal::setGroupTransformationsMatrix(const string& id, const Mat
+-- void Object3DInternal::unsetGroupTransformationsMatrix(const string& id) {
+-- 	Object3DBase::unsetGroupTransformationsMatrix(id);
+-- 	map<string, Matrix4x4*> _overridenTransformationsMatrices;
+---	for (auto overridenTransformationsMatrixIt: overridenTransformationsMatrices) {
+--+	for (auto overridenTransformationsMatrixIt: animations[0]->overridenTransformationsMatrices) {
+-- 		_overridenTransformationsMatrices[overridenTransformationsMatrixIt.first] = new Matrix4x4(*overridenTransformationsMatrixIt.second);
+-- 	}
+-- 	auto newBoundingBox = ModelUtilitiesInternal::createBoundingBox(this->getModel(), _overridenTransformationsMatrices);
+--diff --git a/src/tdme/engine/subsystems/rendering/Object3DInternal.h b/src/tdme/engine/subsystems/rendering/Object3DInternal.h
+--index 379ccf29..467e2389 100644
+----- a/src/tdme/engine/subsystems/rendering/Object3DInternal.h
+--+++ b/src/tdme/engine/subsystems/rendering/Object3DInternal.h
+--@@ -217,8 +217,9 @@ public:
+-- 	 * Public constructor
+-- 	 * @param id id
+-- 	 * @param model model
+--+	 * @param instances instances to compute and render by multiplying
+-- 	 */
+---	Object3DInternal(const string& id, Model* model);
+--+	Object3DInternal(const string& id, Model* model, int instances);
+-- 
+-- 	/**
+-- 	 * Destructor
+--diff --git a/src/tdme/engine/subsystems/rendering/Object3DModelInternal.cpp b/src/tdme/engine/subsystems/rendering/Object3DModelInternal.cpp
+--index 00ba9b74..28933e31 100644
+----- a/src/tdme/engine/subsystems/rendering/Object3DModelInternal.cpp
+--+++ b/src/tdme/engine/subsystems/rendering/Object3DModelInternal.cpp
+--@@ -3,7 +3,7 @@
+-- using tdme::engine::subsystems::rendering::Object3DModelInternal;
+-- 
+-- Object3DModelInternal::Object3DModelInternal(Model* model) :
+---	Object3DBase(model, false, Engine::AnimationProcessingTarget::CPU_NORENDERING)
+--+	Object3DBase(model, false, Engine::AnimationProcessingTarget::CPU_NORENDERING, 1)
+-- {
+-- }
+-- 
+--diff --git a/src/tdme/engine/subsystems/rendering/Object3DRenderer.cpp b/src/tdme/engine/subsystems/rendering/Object3DRenderer.cpp
+--index 5056811e..7482c4c1 100644
+----- a/src/tdme/engine/subsystems/rendering/Object3DRenderer.cpp
+--+++ b/src/tdme/engine/subsystems/rendering/Object3DRenderer.cpp
+--@@ -399,7 +399,7 @@ void Object3DRenderer::renderObjectsOfSameTypeNonInstanced(const vector<Object3D
+-- 		for (auto faceEntityIdx = 0; faceEntityIdx < facesEntityIdxCount; faceEntityIdx++) {
+-- 			auto facesEntity = &facesEntities[faceEntityIdx];
+-- 			auto isTextureCoordinatesAvailable = facesEntity->isTextureCoordinatesAvailable();
+---			auto faces = facesEntity->getFaces().size();
+--+			auto faces = facesEntity->getFaces().size() * firstObject->instances;
+-- 			// material
+-- 			auto material = facesEntity->getMaterial();
+-- 			// determine if transparent
+--@@ -605,7 +605,7 @@ void Object3DRenderer::renderObjectsOfSameTypeInstanced(int threadIdx, const vec
+-- 		for (auto faceEntityIdx = 0; faceEntityIdx < facesEntityIdxCount; faceEntityIdx++) {
+-- 			auto facesEntity = &facesEntities[faceEntityIdx];
+-- 			auto isTextureCoordinatesAvailable = facesEntity->isTextureCoordinatesAvailable();
+---			auto faces = facesEntity->getFaces().size();
+--+			auto faces = facesEntity->getFaces().size() * firstObject->instances;
+-- 			// material
+-- 			auto material = facesEntity->getMaterial();
+-- 			// determine if transparent
+--diff --git a/src/tdme/engine/subsystems/rendering/TransparentRenderFacesGroup.h b/src/tdme/engine/subsystems/rendering/TransparentRenderFacesGroup.h
+--index c9ac5da2..848e8185 100644
+----- a/src/tdme/engine/subsystems/rendering/TransparentRenderFacesGroup.h
+--+++ b/src/tdme/engine/subsystems/rendering/TransparentRenderFacesGroup.h
+--@@ -40,6 +40,7 @@ using tdme::utils::Console;
+--  */
+-- class tdme::engine::subsystems::rendering::TransparentRenderFacesGroup final
+-- {
+--+	friend class Object3DGroupMesh;
+-- 	friend class Object3DRenderer;
+-- 	friend class Object3DRenderer_TransparentRenderFacesGroupPool;
+-- 
+--diff --git a/src/tdme/engine/subsystems/shadowmapping/ShadowMap.cpp b/src/tdme/engine/subsystems/shadowmapping/ShadowMap.cpp
+--index e646e2ad..9bf11f0e 100644
+----- a/src/tdme/engine/subsystems/shadowmapping/ShadowMap.cpp
+--+++ b/src/tdme/engine/subsystems/shadowmapping/ShadowMap.cpp
+--@@ -10,6 +10,7 @@
+-- #include <tdme/engine/Light.h>
+-- #include <tdme/engine/Object3D.h>
+-- #include <tdme/engine/Object3DRenderGroup.h>
+--+#include <tdme/engine/SkinnedObject3DRenderGroup.h>
+-- #include <tdme/engine/LODObject3D.h>
+-- #include <tdme/engine/ObjectParticleSystem.h>
+-- #include <tdme/engine/ParticleSystemGroup.h>
+--@@ -33,6 +34,7 @@ using tdme::engine::FrameBuffer;
+-- using tdme::engine::Light;
+-- using tdme::engine::Object3D;
+-- using tdme::engine::Object3DRenderGroup;
+--+using tdme::engine::SkinnedObject3DRenderGroup;
+-- using tdme::engine::LODObject3D;
+-- using tdme::engine::ObjectParticleSystem;
+-- using tdme::engine::Partition;
+--@@ -121,6 +123,7 @@ void ShadowMap::render(Light* light)
+-- 	Object3D* object = nullptr;
+-- 	LODObject3D* lodObject = nullptr;
+-- 	Object3DRenderGroup* org = nullptr;
+--+	SkinnedObject3DRenderGroup* sorg = nullptr;
+-- 	ObjectParticleSystem* opse = nullptr;
+-- 	ParticleSystemGroup* psg = nullptr;
+-- 	EntityHierarchy* eh = nullptr;
+--@@ -142,6 +145,13 @@ void ShadowMap::render(Light* light)
+-- 				}
+-- 			}
+-- 		} else
+--+		if ((sorg = dynamic_cast<SkinnedObject3DRenderGroup*>(entity)) != nullptr) {
+--+			if ((object = sorg->getObject()) != nullptr) {
+--+				if (object->isContributesShadows() == false) continue;
+--+				object->preRender(context);
+--+				visibleObjects.push_back(object);
+--+			}
+--+		} else
+-- 		if ((object = dynamic_cast<Object3D*>(entity)) != nullptr) {
+-- 			if (object->isContributesShadows() == false) continue;
+-- 			object->preRender(context);
+--diff --git a/src/tdme/engine/subsystems/skinning/SkinningShader.cpp b/src/tdme/engine/subsystems/skinning/SkinningShader.cpp
+--index 4cfe396c..52286cd6 100644
+----- a/src/tdme/engine/subsystems/skinning/SkinningShader.cpp
+--+++ b/src/tdme/engine/subsystems/skinning/SkinningShader.cpp
+--@@ -93,6 +93,7 @@ void SkinningShader::useProgram()
+-- 
+-- void SkinningShader::computeSkinning(void* context, Object3DGroupMesh* object3DGroupMesh)
+-- {
+--+	/*
+-- 	//
+-- 	auto contextIdx = renderer->getContextIndex(context);
+-- 	auto& skinningContext = contexts[contextIdx];
+--@@ -220,6 +221,7 @@ void SkinningShader::computeSkinning(void* context, Object3DGroupMesh* object3DG
+-- 
+-- 	// do it so
+-- 	renderer->dispatchCompute(context, (int)Math::ceil(vertices.size() / 16.0f), 1, 1);
+--+	*/
+-- }
+-- 
+-- void SkinningShader::unUseProgram()
+--diff --git a/src/tdme/tests/SkinningTest.cpp b/src/tdme/tests/SkinningTest.cpp
+--index 271361c7..c5b5e6d7 100644
+----- a/src/tdme/tests/SkinningTest.cpp
+--+++ b/src/tdme/tests/SkinningTest.cpp
+--@@ -122,37 +122,42 @@ void SkinningTest::initialize()
+-- 	entity->update();
+-- 	engine->addEntity(entity);
+-- 	auto character = ModelReader::read("resources/tests/models/mementoman", "mementoman.dae");
+---	/*
+-- 	auto characters = new SkinnedObject3DRenderGroup("characters", character, 17 * 17);
+---	auto characterIdx = 0;
+---	float z = -15.0f;
+---	for (int characterZ = 0; characterZ < 17; characterZ++) {
+---		float x = -15.0f;
+---		for (int characterX = 0; characterX < 17; characterX++) {
+---			characters->getObjectTransformations(characterIdx).setTranslation(Vector3(x, 0.0f, z));
+---			characters->getObjectTransformations(characterIdx).update();
+---			x+= 1.8f;
+--+	#define SO3DRG
+--+	#if defined(SO3DRG)
+--+		auto characterIdx = 0;
+--+		float z = -15.0f;
+--+		for (int characterZ = 0; characterZ < 17; characterZ++) {
+--+			float x = -15.0f;
+--+			for (int characterX = 0; characterX < 17; characterX++) {
+--+				characters->getObjectTransformations(characterIdx).setTranslation(Vector3(x, 0.0f, z));
+--+				characters->getObjectTransformations(characterIdx).update();
+--+				characterIdx++;
+--+				x+= 1.8f;
+--+			}
+--+			z+= 1.8f;
+-- 		}
+---		z+= 1.8f;
+---	}
+---	characters->updateRenderGroup();
+---	engine->addEntity(characters);
+---	*/
+---	auto characterIdx = 0;
+---	float z = -15.0f;
+---	for (int characterZ = 0; characterZ < 17; characterZ++) {
+---		float x = -15.0f;
+---		for (int characterX = 0; characterX < 17; characterX++) {
+---			auto entity = new Object3D("character." + to_string(characterIdx++), character);
+---			entity->setTranslation(Vector3(x, 0.0f, z));
+---			entity->update();
+---			entity->setContributesShadows(true);
+---			entity->setReceivesShadows(true);
+---			engine->addEntity(entity);
+---			x+= 1.8f;
+--+		characters->updateRenderGroup();
+--+		characters->setContributesShadows(true);
+--+		characters->setReceivesShadows(true);
+--+		engine->addEntity(characters);
+--+	#else
+--+		auto characterIdx = 0;
+--+		float z = -15.0f;
+--+		for (int characterZ = 0; characterZ < 17; characterZ++) {
+--+			float x = -15.0f;
+--+			for (int characterX = 0; characterX < 17; characterX++) {
+--+				auto entity = new Object3D("character." + to_string(characterIdx++), character);
+--+				entity->setTranslation(Vector3(x, 0.0f, z));
+--+				entity->update();
+--+				entity->setContributesShadows(true);
+--+				entity->setReceivesShadows(true);
+--+				engine->addEntity(entity);
+--+				x+= 1.8f;
+--+			}
+--+			z+= 1.8f;
+-- 		}
+---		z+= 1.8f;
+---	}
+--+	#endif
+-- 	Console::println("Spawned characters: " + to_string(characterIdx));
+-- }
+-- 
 -diff --git a/src/tdme/engine/Engine.cpp b/src/tdme/engine/Engine.cpp
 -index 228a4a34..d7a8f1da 100644
 ---- a/src/tdme/engine/Engine.cpp
@@ -2381,18 +4209,9 @@ index ef8a3902..e69de29b 100644
 - }
 - 
 diff --git a/src/tdme/engine/Engine.cpp b/src/tdme/engine/Engine.cpp
-index 228a4a34..d7a8f1da 100644
+index 228a4a34..e4f2b34f 100644
 --- a/src/tdme/engine/Engine.cpp
 +++ b/src/tdme/engine/Engine.cpp
-@@ -473,7 +473,7 @@ void Engine::initialize()
- 				Console::println(string("TDME::Using GL2(" + to_string(glMajorVersion) + "." + to_string(glMinorVersion) + ")"));
- 				renderer = new EngineGL2Renderer(this);
- 			}
--			skinningShaderEnabled = (glMajorVersion == 4 && glMinorVersion >= 3) || glMajorVersion > 4;
-+			skinningShaderEnabled = false; //(glMajorVersion == 4 && glMinorVersion >= 3) || glMajorVersion > 4;
- 			// Console::println(string("TDME::Extensions: ") + gl->glGetString(GL::GL_EXTENSIONS));
- 			shadowMappingEnabled = true;
- 			if (getShadowMapWidth() == 0 || getShadowMapHeight() == 0) setShadowMapSize(2048, 2048);
 @@ -742,6 +742,7 @@ void Engine::determineEntityTypes(
  	vector<ParticleSystemGroup*>& psgs,
  	vector<LinesObject3D*>& linesObjects,
@@ -3555,25 +5374,18 @@ index e646e2ad..9bf11f0e 100644
  			if (object->isContributesShadows() == false) continue;
  			object->preRender(context);
 diff --git a/src/tdme/engine/subsystems/skinning/SkinningShader.cpp b/src/tdme/engine/subsystems/skinning/SkinningShader.cpp
-index 4cfe396c..52286cd6 100644
+index 4cfe396c..fa19e807 100644
 --- a/src/tdme/engine/subsystems/skinning/SkinningShader.cpp
 +++ b/src/tdme/engine/subsystems/skinning/SkinningShader.cpp
-@@ -93,6 +93,7 @@ void SkinningShader::useProgram()
- 
- void SkinningShader::computeSkinning(void* context, Object3DGroupMesh* object3DGroupMesh)
- {
-+	/*
- 	//
- 	auto contextIdx = renderer->getContextIndex(context);
- 	auto& skinningContext = contexts[contextIdx];
-@@ -220,6 +221,7 @@ void SkinningShader::computeSkinning(void* context, Object3DGroupMesh* object3DG
- 
- 	// do it so
- 	renderer->dispatchCompute(context, (int)Math::ceil(vertices.size() / 16.0f), 1, 1);
-+	*/
- }
- 
- void SkinningShader::unUseProgram()
+@@ -210,7 +210,7 @@ void SkinningShader::computeSkinning(void* context, Object3DGroupMesh* object3DG
+ 		auto& skinningJoints = skinning->getJoints();
+ 		auto fbMatrices = ObjectBuffer::getByteBuffer(context, skinningJoints.size() * 16 * sizeof(float))->asFloatBuffer();
+ 		for (auto& joint: skinningJoints) {
+-			fbMatrices.put(object3DGroupMesh->skinningMatrices->find(joint.getGroupId())->second->getArray());
++			fbMatrices.put(object3DGroupMesh->skinningMatrices[0]->find(joint.getGroupId())->second->getArray());
+ 		}
+ 		renderer->uploadSkinningBufferObject(context, (*modelSkinningCacheCached->matricesVboIds[contextIdx])[0], fbMatrices.getPosition() * sizeof(float), &fbMatrices);
+ 	}
 diff --git a/src/tdme/tests/SkinningTest.cpp b/src/tdme/tests/SkinningTest.cpp
 index 271361c7..c5b5e6d7 100644
 --- a/src/tdme/tests/SkinningTest.cpp
diff --git a/shader/gl3/skinning/skinning.c b/shader/gl3/skinning/skinning.c
index 2dd5e2ef..4d9fcc57 100644
--- a/shader/gl3/skinning/skinning.c
+++ b/shader/gl3/skinning/skinning.c
@@ -1,7 +1,7 @@
 #version 430 core
 
 // layouts
-layout(local_size_x=16) in;
+layout(local_size_x=16,local_size_y=16) in;
 layout(std430,binding=0) buffer InVertex { float inVertexFloatArray[]; };
 layout(std430,binding=1) buffer InNormal { float inNormalFloatArray[]; };
 layout(std430,binding=2) buffer InSkinningVertexJoints { int inSkinningVertexJoints[]; };
@@ -12,33 +12,36 @@ layout(std430,binding=6) buffer OutNormal { float outNormalFloatArray[]; };
 layout(std430,binding=7) buffer InSkinningJointsTransformationMatrices{ mat4 inSkinningJointsTransformationsMatrices[]; };
 
 // uniforms
-uniform int skinningCount;
+uniform int vertexCount;
+uniform int matrixCount;
+uniform int instanceCount;
 
 void main() {
 	// TODO: tangents and bitangents
-	int offset = int(gl_GlobalInvocationID.x);
-	if (offset < skinningCount) {
+	int vertexOffset = int(gl_GlobalInvocationID.x);
+	int instance = int(gl_GlobalInvocationID.y);
+	if (instance < instanceCount && vertexOffset < vertexCount) {
 		vec3 skinnedVertex = vec3(0.0, 0.0, 0.0);
 		vec3 skinnedNormal = vec3(0.0, 0.0, 0.0);
 		float totalWeights = 0.0;
-		vec3 inVertex = vec3(inVertexFloatArray[offset * 3 + 0], inVertexFloatArray[offset * 3 + 1], inVertexFloatArray[offset * 3 + 2]);
-		vec3 inNormal = vec3(inNormalFloatArray[offset * 3 + 0], inNormalFloatArray[offset * 3 + 1], inNormalFloatArray[offset * 3 + 2]);
-		for (int i = 0; i < inSkinningVertexJoints[offset]; i++) {
-			mat4 transformationsMatrix = inSkinningJointsTransformationsMatrices[inSkinningVertexJointIdxs[offset * 4 + i]];
-			skinnedVertex+= (transformationsMatrix * vec4(inVertex, 1.0)).xyz * inSkinningVertexJointWeights[offset * 4 + i];
-			skinnedNormal+= (mat3(transformationsMatrix) * inNormal) * inSkinningVertexJointWeights[offset * 4 + i];
-			totalWeights+= inSkinningVertexJointWeights[offset * 4 + i];
+		vec3 inVertex = vec3(inVertexFloatArray[vertexOffset * 3 + 0], inVertexFloatArray[vertexOffset * 3 + 1], inVertexFloatArray[vertexOffset * 3 + 2]);
+		vec3 inNormal = vec3(inNormalFloatArray[vertexOffset * 3 + 0], inNormalFloatArray[vertexOffset * 3 + 1], inNormalFloatArray[vertexOffset * 3 + 2]);
+		for (int i = 0; i < inSkinningVertexJoints[vertexOffset]; i++) {
+			mat4 transformationsMatrix = inSkinningJointsTransformationsMatrices[instance * matrixCount + inSkinningVertexJointIdxs[vertexOffset * 4 + i]];
+			skinnedVertex+= (transformationsMatrix * vec4(inVertex, 1.0)).xyz * inSkinningVertexJointWeights[vertexOffset * 4 + i];
+			skinnedNormal+= (mat3(transformationsMatrix) * inNormal) * inSkinningVertexJointWeights[vertexOffset * 4 + i];
+			totalWeights+= inSkinningVertexJointWeights[vertexOffset * 4 + i];
 		}
 		if (totalWeights != 1.0) {
 			float weightNormalized = totalWeights != 0.0?1.0 / totalWeights:0.0;
 			skinnedVertex*= weightNormalized;
 			skinnedNormal*= weightNormalized;
 		}
-		outVertexFloatArray[offset * 3 + 0] = skinnedVertex.x;
-		outVertexFloatArray[offset * 3 + 1] = skinnedVertex.y;
-		outVertexFloatArray[offset * 3 + 2] = skinnedVertex.z;
-		outNormalFloatArray[offset * 3 + 0] = skinnedNormal.x;
-		outNormalFloatArray[offset * 3 + 1] = skinnedNormal.y;
-		outNormalFloatArray[offset * 3 + 2] = skinnedNormal.z;
+		outVertexFloatArray[instance * vertexCount * 3 + vertexOffset * 3 + 0] = skinnedVertex.x;
+		outVertexFloatArray[instance * vertexCount * 3 + vertexOffset * 3 + 1] = skinnedVertex.y;
+		outVertexFloatArray[instance * vertexCount * 3 + vertexOffset * 3 + 2] = skinnedVertex.z;
+		outNormalFloatArray[instance * vertexCount * 3 + vertexOffset * 3 + 0] = skinnedNormal.x;
+		outNormalFloatArray[instance * vertexCount * 3 + vertexOffset * 3 + 1] = skinnedNormal.y;
+		outNormalFloatArray[instance * vertexCount * 3 + vertexOffset * 3 + 2] = skinnedNormal.z;
 	}
 }
diff --git a/src/tdme/engine/Engine.cpp b/src/tdme/engine/Engine.cpp
index 228a4a34..e4f2b34f 100644
--- a/src/tdme/engine/Engine.cpp
+++ b/src/tdme/engine/Engine.cpp
@@ -742,6 +742,7 @@ void Engine::determineEntityTypes(
 	vector<ParticleSystemGroup*>& psgs,
 	vector<LinesObject3D*>& linesObjects,
 	vector<Object3DRenderGroup*>& objectRenderGroups,
+	vector<SkinnedObject3DRenderGroup*>& skinnedObjectRenderGroups,
 	vector<EntityHierarchy*>& entityHierarchies
 	) {
 	Object3D* object = nullptr;
@@ -751,6 +752,7 @@ void Engine::determineEntityTypes(
 	PointsParticleSystem* ppse = nullptr;
 	FogParticleSystem* fpse = nullptr;
 	Object3DRenderGroup* org = nullptr;
+	SkinnedObject3DRenderGroup* sorg = nullptr;
 	LinesObject3D* lo = nullptr;
 	Entity* subEntity = nullptr;
 	EntityHierarchy* eh = nullptr;
@@ -818,6 +820,10 @@ void Engine::determineEntityTypes(
 			objectRenderGroups.push_back(org);
 			if ((subEntity = org->getEntity()) != nullptr) COMPUTE_ENTITY_TRANSFORMATIONS(subEntity);
 		} else
+		if ((sorg = dynamic_cast<SkinnedObject3DRenderGroup*>(entity)) != nullptr) {
+			skinnedObjectRenderGroups.push_back(sorg);
+			if ((subEntity = sorg->getObject()) != nullptr) COMPUTE_ENTITY_TRANSFORMATIONS(subEntity);
+		} else
 		if ((psg = dynamic_cast<ParticleSystemGroup*>(entity)) != nullptr) {
 			psgs.push_back(psg); \
 			for (auto ps: psg->getParticleSystems()) COMPUTE_ENTITY_TRANSFORMATIONS(ps);
@@ -877,6 +883,7 @@ void Engine::computeTransformations()
 		visiblePsgs,
 		visibleLinesObjects,
 		visibleObjectRenderGroups,
+		visibleSkinnedObjectRenderGroups,
 		visibleObjectEntityHierarchies
 	);
 
@@ -903,6 +910,7 @@ void Engine::computeTransformations()
 		visiblePsgs,
 		visibleLinesObjects,
 		visibleObjectRenderGroups,
+		visibleSkinnedObjectRenderGroups,
 		visibleObjectEntityHierarchies
 	);
 
@@ -1403,6 +1411,7 @@ Entity* Engine::getEntityByMousePosition(
 			vector<ParticleSystemGroup*> psgsEH;
 			vector<LinesObject3D*> linesObjectsEH;
 			vector<Object3DRenderGroup*> objectRenderGroupsEH;
+			vector<SkinnedObject3DRenderGroup*> skinnedObjectRenderGroupsEH;
 			vector<EntityHierarchy*> entityHierarchiesEH;
 			Group* object3DGroupEH = nullptr;
 			determineEntityTypes(
@@ -1416,6 +1425,7 @@ Entity* Engine::getEntityByMousePosition(
 				psgsEH,
 				linesObjectsEH,
 				objectRenderGroupsEH,
+				skinnedObjectRenderGroupsEH,
 				entityHierarchiesEH
 			);
 			auto subEntity = getEntityByMousePosition(
@@ -1601,6 +1611,7 @@ Entity* Engine::doRayCasting(
 			vector<ParticleSystemGroup*> psgsEH;
 			vector<LinesObject3D*> linesObjectsEH;
 			vector<Object3DRenderGroup*> objectRenderGroupsEH;
+			vector<SkinnedObject3DRenderGroup*> skinnedObjectRenderGroupsEH;
 			vector<EntityHierarchy*> entityHierarchiesEH;
 			determineEntityTypes(
 				entity->getEntities(),
@@ -1613,6 +1624,7 @@ Entity* Engine::doRayCasting(
 				psgsEH,
 				linesObjectsEH,
 				objectRenderGroupsEH,
+				skinnedObjectRenderGroupsEH,
 				entityHierarchiesEH
 			);
 			Vector3 contactPointEH;
diff --git a/src/tdme/engine/Engine.h b/src/tdme/engine/Engine.h
index 5b5b84cf..160279de 100644
--- a/src/tdme/engine/Engine.h
+++ b/src/tdme/engine/Engine.h
@@ -45,10 +45,19 @@ using tdme::engine::Camera;
 using tdme::engine::Entity;
 using tdme::engine::EntityHierarchy;
 using tdme::engine::EntityPickingFilter;
+using tdme::engine::FogParticleSystem;
 using tdme::engine::FrameBuffer;
 using tdme::engine::Light;
+using tdme::engine::LinesObject3D;
+using tdme::engine::LODObject3D;
+using tdme::engine::Object3D;
+using tdme::engine::Object3DRenderGroup;
+using tdme::engine::ObjectParticleSystem;
 using tdme::engine::ParticleSystemEntity;
+using tdme::engine::ParticleSystemGroup;
 using tdme::engine::Partition;
+using tdme::engine::PointsParticleSystem;
+using tdme::engine::SkinnedObject3DRenderGroup;
 using tdme::engine::Timing;
 using tdme::engine::model::Color4;
 using tdme::engine::model::Group;
@@ -196,6 +205,7 @@ private:
 	vector<ParticleSystemGroup*> visiblePsgs;
 	vector<LinesObject3D*> visibleLinesObjects;
 	vector<Object3DRenderGroup*> visibleObjectRenderGroups;
+	vector<SkinnedObject3DRenderGroup*> visibleSkinnedObjectRenderGroups;
 	vector<EntityHierarchy*> visibleObjectEntityHierarchies;
 	vector<Entity*> noFrustumCullingEntities;
 
@@ -351,6 +361,7 @@ private:
 	 * @param psgs particle system groups
 	 * @param linesObjects lines objects
 	 * @param objectRenderGroups object render groups
+	 * @param skinnedObjectRenderGroups object render groups
 	 * @param entityHierarchies entity hierarchies
 	 */
 	void determineEntityTypes(
@@ -364,6 +375,7 @@ private:
 		vector<ParticleSystemGroup*>& psgs,
 		vector<LinesObject3D*>& linesObjects,
 		vector<Object3DRenderGroup*>& objectRenderGroups,
+		vector<SkinnedObject3DRenderGroup*>& skinnedObjectRenderGroups,
 		vector<EntityHierarchy*>& entityHierarchies
 	);
 
diff --git a/src/tdme/engine/Object3D.cpp b/src/tdme/engine/Object3D.cpp
index 8d26e6f5..ff9986c3 100644
--- a/src/tdme/engine/Object3D.cpp
+++ b/src/tdme/engine/Object3D.cpp
@@ -21,11 +21,10 @@ using tdme::math::Matrix4x4;
 using tdme::math::Vector3;
 using tdme::math::Quaternion;
 
-Object3D::Object3D(const string& id, Model* model, int instances): Object3D(id, model) {
+Object3D::Object3D(const string& id, Model* model, int instances): Object3DInternal(id, model, instances) {
 }
 
-Object3D::Object3D(const string& id, Model* model) :
-	Object3DInternal(id, model)
+Object3D::Object3D(const string& id, Model* model): Object3DInternal(id, model, 1)
 {
 }
 
diff --git a/src/tdme/engine/Object3D.h b/src/tdme/engine/Object3D.h
index bf993afe..d8fe0115 100644
--- a/src/tdme/engine/Object3D.h
+++ b/src/tdme/engine/Object3D.h
@@ -10,6 +10,7 @@
 #include <tdme/engine/Entity.h>
 #include <tdme/engine/model/fwd-tdme.h>
 #include <tdme/engine/model/Color4.h>
+#include <tdme/engine/model/Model.h>
 #include <tdme/engine/primitives/fwd-tdme.h>
 #include <tdme/engine/subsystems/particlesystem/fwd-tdme.h>
 #include <tdme/engine/subsystems/renderer/fwd-tdme.h>
@@ -80,7 +81,7 @@ private:
 	 * @param context context
 	 */
 	inline void computeTransformations(void* context) {
-		if (hasSkinning == true || hasAnimations == true) {
+		if (getModel()->hasSkinning() == true || getModel()->hasAnimations() == true) {
 			auto timing = engine->getTiming();
 			auto currentFrameAtTime = timing->getCurrentFrameAtTime();
 			auto currentFrame = timing->getFrame();
@@ -135,7 +136,7 @@ private:
 	 * Private constructor
 	 * @param id id
 	 * @param model model
-	 * @param instances render multiple objects at once by duplication
+	 * @param instances instances to compute and render by duplicating
 	 */
 	Object3D(const string& id, Model* model, int instances);
 
diff --git a/src/tdme/engine/SkinnedObject3DRenderGroup.cpp b/src/tdme/engine/SkinnedObject3DRenderGroup.cpp
index 48d5dff2..dd6d4519 100644
--- a/src/tdme/engine/SkinnedObject3DRenderGroup.cpp
+++ b/src/tdme/engine/SkinnedObject3DRenderGroup.cpp
@@ -40,10 +40,7 @@ SkinnedObject3DRenderGroup::SkinnedObject3DRenderGroup(
 {
 	setModel(model);
 	objectTransformations.resize(objectCount);
-	objectAnimations.resize(objectCount);
-	for (auto i = 0; i < objectCount; i++) {
-		objectAnimations[i] = new Object3DAnimation(model, Engine::animationProcessingTarget);
-	} 
+	objectAnimations = object->animations;
 }
 
 SkinnedObject3DRenderGroup::~SkinnedObject3DRenderGroup() {
@@ -75,6 +72,7 @@ void SkinnedObject3DRenderGroup::updateBoundingBox() {
 }
 
 void SkinnedObject3DRenderGroup::updateRenderGroup() {
+	for (auto i = 0; i < objectCount; i++) objectAnimations[i]->setTransformations(objectTransformations[i]);
 	updateBoundingBox();
 }
 
diff --git a/src/tdme/engine/subsystems/rendering/ModelUtilitiesInternal.cpp b/src/tdme/engine/subsystems/rendering/ModelUtilitiesInternal.cpp
index 5c693cfe..8378cb7f 100644
--- a/src/tdme/engine/subsystems/rendering/ModelUtilitiesInternal.cpp
+++ b/src/tdme/engine/subsystems/rendering/ModelUtilitiesInternal.cpp
@@ -42,7 +42,7 @@ using tdme::math::Vector3;
 BoundingBox* ModelUtilitiesInternal::createBoundingBox(Model* model, const map<string, Matrix4x4*> overridenGroupTransformationsMatrices)
 {
 	Object3DModelInternal object3dModel(model);
-	object3dModel.overridenTransformationsMatrices = overridenGroupTransformationsMatrices;
+	object3dModel.animations[0]->overridenTransformationsMatrices = overridenGroupTransformationsMatrices;
 	auto boundingBox = ModelUtilitiesInternal::createBoundingBox(&object3dModel);
 	if (boundingBox == nullptr) boundingBox = ModelUtilitiesInternal::createBoundingBoxNoMesh(&object3dModel);
 	return boundingBox;
@@ -66,7 +66,7 @@ BoundingBox* ModelUtilitiesInternal::createBoundingBox(Object3DModelInternal* ob
 		// calculate transformations matrices without world transformations
 		auto parentTransformationsMatrix = object3DModelInternal->getModel()->getImportTransformationsMatrix();
 		parentTransformationsMatrix.multiply(object3DModelInternal->getTransformationsMatrix());
-		object3DModelInternal->computeTransformationsMatrices(model->getSubGroups(), parentTransformationsMatrix, &animationState, object3DModelInternal->transformationsMatrices[0], 0);
+		object3DModelInternal->animations[0]->computeTransformationsMatrices(model->getSubGroups(), parentTransformationsMatrix, &animationState, object3DModelInternal->animations[0]->transformationsMatrices[0], 0);
 		Object3DGroup::computeTransformations(nullptr, object3DModelInternal->object3dGroups);
 		// parse through object groups to determine min, max
 		for (auto object3DGroup : object3DModelInternal->object3dGroups) {
@@ -118,7 +118,7 @@ BoundingBox* ModelUtilitiesInternal::createBoundingBoxNoMesh(Object3DModelIntern
 		// calculate transformations matrices without world transformations
 		auto parentTransformationsMatrix = object3DModelInternal->getModel()->getImportTransformationsMatrix();
 		parentTransformationsMatrix.multiply(object3DModelInternal->getTransformationsMatrix());
-		object3DModelInternal->computeTransformationsMatrices(model->getSubGroups(), parentTransformationsMatrix, &animationState, object3DModelInternal->transformationsMatrices[0], 0);
+		object3DModelInternal->animations[0]->computeTransformationsMatrices(model->getSubGroups(), parentTransformationsMatrix, &animationState, object3DModelInternal->animations[0]->transformationsMatrices[0], 0);
 		for (auto groupIt: model->getGroups()) {
 			auto& transformedGroupMatrix = object3DModelInternal->getGroupTransformationsMatrix(groupIt.second->getId());
 			transformedGroupMatrix.multiply(vertex.set(0.0f, 0.0f, 0.0f), vertex);
diff --git a/src/tdme/engine/subsystems/rendering/Object3DAnimation.cpp b/src/tdme/engine/subsystems/rendering/Object3DAnimation.cpp
index 8a9046e8..52e1a986 100644
--- a/src/tdme/engine/subsystems/rendering/Object3DAnimation.cpp
+++ b/src/tdme/engine/subsystems/rendering/Object3DAnimation.cpp
@@ -41,6 +41,7 @@ Object3DAnimation::Object3DAnimation(Model* model, Engine::AnimationProcessingTa
 {
 	this->animationProcessingTarget = animationProcessingTarget;
 	this->model = model;
+	this->objectTransformationsMatrix.identity();
 	// skinning
 	hasSkinning = false;
 	if (model->hasSkinning() == true) {
@@ -366,7 +367,7 @@ inline void Object3DAnimation::updateSkinningTransformationsMatrices(const map<s
 	}
 }
 
-void Object3DAnimation::computeTransformations(const Matrix4x4& objectTransformationsMatrix, AnimationState& baseAnimation, map<string, Matrix4x4*>& transformationsMatrices, void* context, int64_t lastFrameAtTime, int64_t currentFrameAtTime)
+void Object3DAnimation::computeTransformations(AnimationState& baseAnimation, map<string, Matrix4x4*>& transformationsMatrices, void* context, int64_t lastFrameAtTime, int64_t currentFrameAtTime)
 {
 	// do transformations if we have a animation
 	if (baseAnimation.setup != nullptr) {
@@ -386,9 +387,7 @@ void Object3DAnimation::computeTransformations(const Matrix4x4& objectTransforma
 		// set up parent transformations matrix
 		Matrix4x4 parentTransformationsMatrix;
 		parentTransformationsMatrix.set(model->getImportTransformationsMatrix());
-		if (animationProcessingTarget == Engine::AnimationProcessingTarget::CPU_NORENDERING) {
-			parentTransformationsMatrix.multiply(objectTransformationsMatrix);
-		}
+		parentTransformationsMatrix.multiply(objectTransformationsMatrix);
 		// calculate transformations matrices
 		computeTransformationsMatrices(model->getSubGroups(), parentTransformationsMatrix, &baseAnimation, transformationsMatrices, 0);
 		//
@@ -398,26 +397,24 @@ void Object3DAnimation::computeTransformations(const Matrix4x4& objectTransforma
 		// set up parent transformations matrix
 		Matrix4x4 parentTransformationsMatrix;
 		parentTransformationsMatrix.set(model->getImportTransformationsMatrix());
-		if (animationProcessingTarget == Engine::AnimationProcessingTarget::CPU_NORENDERING) {
-			parentTransformationsMatrix.multiply(objectTransformationsMatrix);
-		}
+		parentTransformationsMatrix.multiply(objectTransformationsMatrix);
 		// calculate transformations matrices
 		computeTransformationsMatrices(model->getSubGroups(), parentTransformationsMatrix, &baseAnimation, transformationsMatrices, 0);
 	}
 }
 
-void Object3DAnimation::computeTransformations(void* context, const Matrix4x4& objectTransformationsMatrix, int64_t lastFrameAtTime, int64_t currentFrameAtTime) {
+void Object3DAnimation::computeTransformations(void* context, int64_t lastFrameAtTime, int64_t currentFrameAtTime) {
 	// compute last animation matrices if required
 	auto baseAnimationIdxLast = transformationsMatrices.size() > 1?(baseAnimationIdx + 1) % 2:-1;
 	if (baseAnimationIdxLast != -1 &&
 		baseAnimations[baseAnimationIdxLast].lastAtTime != -1LL) {
-		computeTransformations(objectTransformationsMatrix, baseAnimations[baseAnimationIdxLast], transformationsMatrices[1 + baseAnimationIdxLast], context, lastFrameAtTime, currentFrameAtTime);
+		computeTransformations(baseAnimations[baseAnimationIdxLast], transformationsMatrices[1 + baseAnimationIdxLast], context, lastFrameAtTime, currentFrameAtTime);
 	} else {
 		baseAnimationIdxLast = -1;
 	}
 
 	// compute current animation matrices
-	computeTransformations(objectTransformationsMatrix, baseAnimations[baseAnimationIdx], transformationsMatrices[transformationsMatrices.size() > 1?1 + baseAnimationIdx:baseAnimationIdx], context, lastFrameAtTime, currentFrameAtTime);
+	computeTransformations(baseAnimations[baseAnimationIdx], transformationsMatrices[transformationsMatrices.size() > 1?1 + baseAnimationIdx:baseAnimationIdx], context, lastFrameAtTime, currentFrameAtTime);
 
 	// blend if required
 	if (transformationsMatrices.size() > 1) {
diff --git a/src/tdme/engine/subsystems/rendering/Object3DAnimation.h b/src/tdme/engine/subsystems/rendering/Object3DAnimation.h
index 0850dcad..40023973 100644
--- a/src/tdme/engine/subsystems/rendering/Object3DAnimation.h
+++ b/src/tdme/engine/subsystems/rendering/Object3DAnimation.h
@@ -10,7 +10,7 @@
 #include <tdme/engine/model/fwd-tdme.h>
 #include <tdme/engine/subsystems/rendering/fwd-tdme.h>
 #include <tdme/engine/subsystems/rendering/AnimationState.h>
-#include <tdme/math/fwd-tdme.h>
+#include <tdme/math/Matrix4x4.h>
 
 using std::map;
 using std::vector;
@@ -30,6 +30,10 @@ using tdme::math::Matrix4x4;
 class tdme::engine::subsystems::rendering::Object3DAnimation
 {
 	friend class tdme::engine::SkinnedObject3DRenderGroup;
+	friend class tdme::engine::subsystems::rendering::ModelUtilitiesInternal;
+	friend class tdme::engine::subsystems::rendering::Object3DBase;
+	friend class tdme::engine::subsystems::rendering::Object3DGroup;
+	friend class tdme::engine::subsystems::rendering::Object3DInternal;
 
 private:
 	/**
@@ -53,8 +57,9 @@ private:
 	 */
 	int32_t determineSkinnedGroups(const map<string, Group*>&, vector<Group*>& skinningGroups, int32_t idx);
 
-protected:
+private:
 	Model* model;
+	Matrix4x4 objectTransformationsMatrix;
 	Engine::AnimationProcessingTarget animationProcessingTarget;
 	map<string, Matrix4x4*> overridenTransformationsMatrices;
 	vector<map<string, Matrix4x4*>> transformationsMatrices;
@@ -67,6 +72,14 @@ protected:
 	map<string, AnimationState*> overlayAnimationsById;
 	map<string, AnimationState*> overlayAnimationsByJointId;
 
+	/**
+	 * Set transformations
+	 * @param transformations transformations
+	 */
+	void setTransformations(const Transformations& transformations) {
+		this->objectTransformationsMatrix = transformations.getTransformationsMatrix();
+	} 
+
 	/**
 	 * Creates all groups transformation matrices
 	 * @param matrices matrices
@@ -86,14 +99,13 @@ protected:
 
 	/**
 	 * Compute transformations for given animation state into given transformations matrices
-	 * @param objectTransformationsMatrix object transformations matrix
 	 * @param baseAnimation base animation
 	 * @param transformationsMatrices transformations matrices
 	 * @param context context
 	 * @param lastFrameAtTime time of last animation computation
 	 * @param currentFrameAtTime time of current animation computation
 	 */
-	void computeTransformations(const Matrix4x4& objectTransformationsMatrix, AnimationState& baseAnimation, map<string, Matrix4x4*>& transformationsMatrices, void* context, int64_t lastFrameAtTime, int64_t currentFrameAtTime);
+	void computeTransformations(AnimationState& baseAnimation, map<string, Matrix4x4*>& transformationsMatrices, void* context, int64_t lastFrameAtTime, int64_t currentFrameAtTime);
 
 	/**
 	 * Update skinning transformations matrices
@@ -205,10 +217,9 @@ public:
 	/**
 	 * Pre render step, computes transformations
 	 * @param context context
-	 * @param objectTransformationsMatrix object transformations matrix
 	 * @param lastFrameAtTime time of last animation computation
 	 * @param currentFrameAtTime time of current animation computation
 	 */
-	void computeTransformations(void* context, const Matrix4x4& objectTransformationsMatrix, int64_t lastFrameAtTime, int64_t currentFrameAtTime);
+	void computeTransformations(void* context, int64_t lastFrameAtTime, int64_t currentFrameAtTime);
 
 };
diff --git a/src/tdme/engine/subsystems/rendering/Object3DBase.cpp b/src/tdme/engine/subsystems/rendering/Object3DBase.cpp
index 9f202319..d8602ee9 100644
--- a/src/tdme/engine/subsystems/rendering/Object3DBase.cpp
+++ b/src/tdme/engine/subsystems/rendering/Object3DBase.cpp
@@ -19,6 +19,7 @@
 #include <tdme/engine/primitives/Triangle.h>
 #include <tdme/engine/subsystems/manager/MeshManager.h>
 #include <tdme/engine/subsystems/rendering/AnimationState.h>
+#include <tdme/engine/subsystems/rendering/Object3DAnimation.h>
 #include <tdme/engine/subsystems/rendering/Object3DBase_TransformedFacesIterator.h>
 #include <tdme/engine/subsystems/rendering/Object3DGroup.h>
 #include <tdme/engine/subsystems/rendering/Object3DGroupMesh.h>
@@ -48,6 +49,7 @@ using tdme::engine::primitives::BoundingVolume;
 using tdme::engine::primitives::Triangle;
 using tdme::engine::subsystems::manager::MeshManager;
 using tdme::engine::subsystems::rendering::AnimationState;
+using tdme::engine::subsystems::rendering::Object3DAnimation;
 using tdme::engine::subsystems::rendering::Object3DBase_TransformedFacesIterator;
 using tdme::engine::subsystems::rendering::Object3DGroup;
 using tdme::engine::subsystems::rendering::Object3DGroupMesh;
@@ -56,11 +58,16 @@ using tdme::utils::Console;
 using tdme::math::Matrix4x4;
 using tdme::math::Vector3;
 
-Object3DBase::Object3DBase(Model* model, bool useManagers, Engine::AnimationProcessingTarget animationProcessingTarget): Object3DAnimation(model, animationProcessingTarget)
+Object3DBase::Object3DBase(Model* model, bool useManagers, Engine::AnimationProcessingTarget animationProcessingTarget, int instances)
 {
 	this->model = model;
 	this->animationProcessingTarget = animationProcessingTarget;
 	this->usesManagers = useManagers;
+	this->instances = instances;
+	this->animations.resize(instances);
+	for (auto i = 0; i < animations.size(); i++) {
+		animations[i] = new Object3DAnimation(model, animationProcessingTarget);
+	} 
 	transformedFacesIterator = nullptr;
 	// object 3d groups
 	Object3DGroup::createGroups(this, useManagers, animationProcessingTarget, object3dGroups);
@@ -141,6 +148,12 @@ void Object3DBase::initialize()
 		auto object3DGroup = object3dGroups[i];
 		// initiate mesh if not yet done, happens usually after disposing from engine and readding to engine
 		if (object3DGroup->mesh == nullptr) {
+			vector<map<string, Matrix4x4*>*> instancesTransformationsMatrices;
+			vector<map<string, Matrix4x4*>*> instancesSkinningGroupsMatrices;
+			for (auto animation: object3DGroup->object->animations) {
+				instancesTransformationsMatrices.push_back(&animation->transformationsMatrices[0]);
+				instancesSkinningGroupsMatrices.push_back(animation->getSkinningGroupsMatrices(object3DGroup->group));
+			} 
 			if (usesManagers == true) {
 				object3DGroup->mesh = meshManager->getMesh(object3DGroup->id);
 				if (object3DGroup->mesh == nullptr) {
@@ -148,8 +161,8 @@ void Object3DBase::initialize()
 						object3DGroup->renderer,
 						animationProcessingTarget,
 						object3DGroup->group,
-						object3DGroup->object->transformationsMatrices[0],
-						getSkinningGroupsMatrices(object3DGroup->group)
+						instancesTransformationsMatrices,
+						instancesSkinningGroupsMatrices
 					);
 				}
 			} else {
@@ -157,8 +170,8 @@ void Object3DBase::initialize()
 					object3DGroup->renderer,
 					animationProcessingTarget,
 					object3DGroup->group,
-					object3DGroup->object->transformationsMatrices[0],
-					getSkinningGroupsMatrices(object3DGroup->group)
+					instancesTransformationsMatrices,
+					instancesSkinningGroupsMatrices
 				);
 			}
 		}
diff --git a/src/tdme/engine/subsystems/rendering/Object3DBase.h b/src/tdme/engine/subsystems/rendering/Object3DBase.h
index 28429d3e..6dcd3d74 100644
--- a/src/tdme/engine/subsystems/rendering/Object3DBase.h
+++ b/src/tdme/engine/subsystems/rendering/Object3DBase.h
@@ -33,9 +33,10 @@ using tdme::engine::subsystems::rendering::Object3DGroupMesh;
  * Object3D base class
  * @author Andreas Drewke
  */
-class tdme::engine::subsystems::rendering::Object3DBase: public Transformations, public Object3DAnimation
+class tdme::engine::subsystems::rendering::Object3DBase: public Transformations
 {
 	friend class Object3DGroup;
+	friend class Object3DGroupMesh;
 	friend class Object3DBase_TransformedFacesIterator;
 	friend class ModelUtilitiesInternal;
 
@@ -46,14 +47,18 @@ protected:
 	Model* model;
 	vector<Object3DGroup*> object3dGroups;
 	bool usesManagers;
+	int instances;
+	vector<Object3DAnimation*> animations;
+	Engine::AnimationProcessingTarget animationProcessingTarget;
 
 	/**
 	 * Public constructor
 	 * @param model model
 	 * @param useManagers use mesh and object 3d group renderer model manager
 	 * @param animationProcessingTarget animation processing target
+	 * @param instances instances to compute and render by multiplying
 	 */
-	Object3DBase(Model* model, bool useManagers, Engine::AnimationProcessingTarget animationProcessingTarget);
+	Object3DBase(Model* model, bool useManagers, Engine::AnimationProcessingTarget animationProcessingTarget, int instances);
 
 	/**
 	 * Destructor
@@ -76,7 +81,7 @@ public:
 	 * @param currentFrameAtTime time of current animation computation
 	 */
 	virtual inline void computeTransformations(void* context, int64_t lastFrameAtTime, int64_t currentFrameAtTime){
-		Object3DAnimation::computeTransformations(context, Transformations::getTransformationsMatrix(), lastFrameAtTime, currentFrameAtTime);
+		for (auto animation: animations) animation->computeTransformations(context, lastFrameAtTime, currentFrameAtTime);
 		Object3DGroup::computeTransformations(context, object3dGroups);
 	} 
 
@@ -113,4 +118,111 @@ public:
 	 * Disposes this object3d 
 	 */
 	virtual void dispose();
+
+	/** 
+	 * Sets up a base animation to play
+	 * @param id id
+	 * @param speed speed whereas 1.0 is default speed
+	 */
+	inline void setAnimation(const string& id, float speed = 1.0f) {
+		animations[0]->setAnimation(id, speed);
+	}
+
+	/**
+	 * Set up animation speed
+	 * @param speed speed whereas 1.0 is default speed
+	 */
+	inline void setAnimationSpeed(float speed) {
+		animations[0]->setAnimationSpeed(speed);
+	}
+
+	/** 
+	 * Overlays a animation above the base animation
+	 * @param id id
+	 */
+	inline void addOverlayAnimation(const string& id) {
+		animations[0]->addOverlayAnimation(id);
+	}
+
+	/** 
+	 * Removes a overlay animation
+	 * @param id id
+	 */
+	inline void removeOverlayAnimation(const string& id) {
+		animations[0]->removeOverlayAnimation(id);
+	}
+
+	/** 
+	 * Removes all finished overlay animations
+	 */
+	inline void removeOverlayAnimationsFinished() {
+		animations[0]->removeOverlayAnimationsFinished();
+	}
+
+	/** 
+	 * Removes all overlay animations
+	 */
+	inline void removeOverlayAnimations() {
+		animations[0]->removeOverlayAnimations();
+	}
+
+	/** 
+	 * @return active animation setup id
+	 */
+	inline const string getAnimation() {
+		return animations[0]->getAnimation();
+	}
+
+	/** 
+	 * Returns current base animation time 
+	 * @return 0.0 <= time <= 1.0
+	 */
+	inline float getAnimationTime() {
+		return animations[0]->getAnimationTime();
+	}
+
+	/** 
+	 * Returns if there is currently running a overlay animation with given id
+	 * @param id id
+	 * @return animation is running
+	 */
+	inline bool hasOverlayAnimation(const string& id) {
+		return animations[0]->hasOverlayAnimation(id);
+	}
+
+	/** 
+	 * Returns current overlay animation time
+	 * @param id id 
+	 * @return 0.0 <= time <= 1.0
+	 */
+	inline float getOverlayAnimationTime(const string& id) {
+		return animations[0]->getOverlayAnimationTime(id);
+	}
+
+	/** 
+	 * Returns transformation matrix for given group
+	 * @param id group id
+	 * @return transformation matrix or identity matrix if not found
+	 */
+	inline const Matrix4x4 getGroupTransformationsMatrix(const string& id) {
+		return animations[0]->getGroupTransformationsMatrix(id);
+	}
+
+	/**
+	 * Set transformation matrix for given group
+	 * @param id group id
+	 * @param matrix transformation matrix
+	 */
+	inline void setGroupTransformationsMatrix(const string& id, const Matrix4x4& matrix) {
+		animations[0]->setGroupTransformationsMatrix(id, matrix);
+	}
+
+	/**
+	 * Unset transformation matrix for given group
+	 * @param id group id
+	 */
+	inline void unsetGroupTransformationsMatrix(const string& id) {
+		animations[0]->unsetGroupTransformationsMatrix(id);
+	}
+
 };
diff --git a/src/tdme/engine/subsystems/rendering/Object3DGroup.cpp b/src/tdme/engine/subsystems/rendering/Object3DGroup.cpp
index 120181be..ab8652ba 100644
--- a/src/tdme/engine/subsystems/rendering/Object3DGroup.cpp
+++ b/src/tdme/engine/subsystems/rendering/Object3DGroup.cpp
@@ -86,7 +86,9 @@ void Object3DGroup::createGroups(Object3DBase* object3D, const map<string, Group
 				":" +
 				group->getId() +
 				":" +
-				to_string(animationProcessingTarget);
+				to_string(animationProcessingTarget) +
+				":" +
+				to_string(object3D->instances);
 			if (group->getSkinning() != nullptr || (animationProcessingTarget == Engine::AnimationProcessingTarget::CPU_NORENDERING)) {
 				object3DGroup->id =
 					object3DGroup->id +
@@ -97,6 +99,12 @@ void Object3DGroup::createGroups(Object3DBase* object3D, const map<string, Group
 			object3DGroup->group = group;
 			object3DGroup->animated = animated;
 			object3DGroup->renderer = new Object3DGroupRenderer(object3DGroup);
+			vector<map<string, Matrix4x4*>*> instancesTransformationsMatrices;
+			vector<map<string, Matrix4x4*>*> instancesSkinningGroupsMatrices;
+			for (auto animation: object3D->animations) {
+				instancesTransformationsMatrices.push_back(&animation->transformationsMatrices[0]);
+				instancesSkinningGroupsMatrices.push_back(animation->getSkinningGroupsMatrices(object3DGroup->group));
+			} 
 			if (useManagers == true) {
 				auto meshManager = Engine::getInstance()->getMeshManager();
 				object3DGroup->mesh = meshManager->getMesh(object3DGroup->id);
@@ -105,8 +113,8 @@ void Object3DGroup::createGroups(Object3DBase* object3D, const map<string, Group
 						object3DGroup->renderer,
 						animationProcessingTarget,
 						group,
-						object3D->transformationsMatrices[0],
-						object3D->getSkinningGroupsMatrices(group)
+						instancesTransformationsMatrices,
+						instancesSkinningGroupsMatrices
 					);
 					meshManager->addMesh(object3DGroup->id, object3DGroup->mesh);
 				}
@@ -115,8 +123,8 @@ void Object3DGroup::createGroups(Object3DBase* object3D, const map<string, Group
 					object3DGroup->renderer,
 					animationProcessingTarget,
 					group,
-					object3D->transformationsMatrices[0],
-					object3D->getSkinningGroupsMatrices(group)
+					instancesTransformationsMatrices,
+					instancesSkinningGroupsMatrices
 				);
 			}
 			object3DGroup->textureMatricesByEntities.resize(group->getFacesEntities().size());
@@ -141,7 +149,7 @@ void Object3DGroup::createGroups(Object3DBase* object3D, const map<string, Group
 				object3DGroup->materialNormalTextureIdsByEntities[j] = TEXTUREID_NONE;
 			}
 			// determine group transformations matrix
-			object3DGroup->groupTransformationsMatrix = object3D->transformationsMatrices[0].find(group->getId())->second;
+			object3DGroup->groupTransformationsMatrix = object3D->animations[0]->transformationsMatrices[0].find(group->getId())->second;
 		}
 		// but still check sub groups
 		createGroups(object3D, group->getSubGroups(), animated, useManagers, animationProcessingTarget, object3DGroups);
diff --git a/src/tdme/engine/subsystems/rendering/Object3DGroup.h b/src/tdme/engine/subsystems/rendering/Object3DGroup.h
index 3cc19c49..85c94e3c 100644
--- a/src/tdme/engine/subsystems/rendering/Object3DGroup.h
+++ b/src/tdme/engine/subsystems/rendering/Object3DGroup.h
@@ -41,6 +41,7 @@ class tdme::engine::subsystems::rendering::Object3DGroup final
 	friend class ModelUtilitiesInternal;
 	friend class Object3DBase;
 	friend class Object3DBase_TransformedFacesIterator;
+	friend class Object3DGroupMesh;
 	friend class Object3DGroupRenderer;
 	friend class Object3DInternal;
 	friend class Object3DRenderer;
diff --git a/src/tdme/engine/subsystems/rendering/Object3DGroupMesh.cpp b/src/tdme/engine/subsystems/rendering/Object3DGroupMesh.cpp
index c6e60b7f..880258c5 100644
--- a/src/tdme/engine/subsystems/rendering/Object3DGroupMesh.cpp
+++ b/src/tdme/engine/subsystems/rendering/Object3DGroupMesh.cpp
@@ -15,6 +15,7 @@
 #include <tdme/engine/model/Skinning.h>
 #include <tdme/engine/model/TextureCoordinate.h>
 #include <tdme/engine/subsystems/rendering/ObjectBuffer.h>
+#include <tdme/engine/subsystems/rendering/Object3DBase.h>
 #include <tdme/engine/subsystems/rendering/Object3DGroupMesh.h>
 #include <tdme/engine/subsystems/rendering/Object3DGroupRenderer.h>
 #include <tdme/engine/subsystems/renderer/Renderer.h>
@@ -38,6 +39,7 @@ using tdme::engine::model::Joint;
 using tdme::engine::model::JointWeight;
 using tdme::engine::model::Skinning;
 using tdme::engine::model::TextureCoordinate;
+using tdme::engine::subsystems::rendering::Object3DBase;
 using tdme::engine::subsystems::rendering::Object3DGroupRenderer;
 using tdme::engine::subsystems::rendering::ObjectBuffer;
 using tdme::engine::subsystems::renderer::Renderer;
@@ -59,16 +61,16 @@ Object3DGroupMesh::Object3DGroupMesh()
 	skinning = false;
 	skinningJoints = -1;
 	object3DGroupRenderer = nullptr;
-	skinningMatrices = nullptr;
 	faceCount = 0;
 	recreatedBuffers = false;
 	animationProcessingTarget = Engine::AnimationProcessingTarget::NONE;
 }
 
-Object3DGroupMesh* Object3DGroupMesh::createMesh(Object3DGroupRenderer* object3DGroupRenderer, Engine::AnimationProcessingTarget animationProcessingTarget, Group* group, map<string, Matrix4x4*>& transformationMatrices, map<string, Matrix4x4*>* skinningMatrices)
+Object3DGroupMesh* Object3DGroupMesh::createMesh(Object3DGroupRenderer* object3DGroupRenderer, Engine::AnimationProcessingTarget animationProcessingTarget, Group* group, const vector<map<string, Matrix4x4*>*>& transformationMatrices, const vector<map<string, Matrix4x4*>*>& skinningMatrices)
 {
 	auto mesh = new Object3DGroupMesh();
 	//
+	mesh->instances = object3DGroupRenderer->object3DGroup->object->instances;
 	mesh->object3DGroupRenderer = object3DGroupRenderer;
 	mesh->group = group;
 	// group data
@@ -86,40 +88,71 @@ Object3DGroupMesh* Object3DGroupMesh::createMesh(Object3DGroupRenderer* object3D
 	mesh->skinning = skinning != nullptr;
 	mesh->skinningMatrices = skinningMatrices;
 	// set up transformed vertices, normals and friends
-	if ((skinning != nullptr && animationProcessingTarget == Engine::AnimationProcessingTarget::CPU) ||
+	if (mesh->instances > 1 || (skinning != nullptr && animationProcessingTarget == Engine::AnimationProcessingTarget::CPU) ||
 		animationProcessingTarget == Engine::AnimationProcessingTarget::CPU_NORENDERING) {
 		// transformed mesh vertices
-		mesh->transformedVertices.resize(groupVertices.size());
+		mesh->transformedVertices.resize(groupVertices.size() * mesh->instances);
 		mesh->vertices = &mesh->transformedVertices;
-		for (auto j = 0; j < mesh->vertices->size(); j++) {
-			mesh->transformedVertices[j].set(groupVertices[j]);
-		}
+		{
+			auto idx = 0;
+			for (auto i = 0; i < mesh->instances; i++)
+			for (auto j = 0; j < groupVertices.size(); j++) {
+				mesh->transformedVertices[idx++].set(groupVertices[j]);
+			}
+		}		
 		// transformed mesh normals
-		mesh->transformedNormals.resize(groupNormals.size());
+		mesh->transformedNormals.resize(groupNormals.size() * mesh->instances);
 		mesh->normals = &mesh->transformedNormals;
-		for (auto j = 0; j < mesh->normals->size(); j++) {
-			mesh->transformedNormals[j].set(groupNormals[j]);
+		{
+			auto idx = 0;
+			for (auto i = 0; i < mesh->instances; i++)
+			for (auto j = 0; j < groupNormals.size(); j++) {
+				mesh->transformedNormals[idx++].set(groupNormals[j]);
+			}
 		}
+		if (mesh->instances > 1) {
+			// transformed mesh texture coordinates
+			mesh->transformedTextureCoordinates.resize(groupTextureCoordinates.size() * mesh->instances);
+			mesh->textureCoordinates = &mesh->transformedTextureCoordinates;
+			{
+				auto idx = 0;
+				for (auto i = 0; i < mesh->instances; i++)
+				for (auto j = 0; j < groupTextureCoordinates.size(); j++) {
+					mesh->transformedTextureCoordinates[idx++].set(groupTextureCoordinates[j]);
+				}
+			}
+		} else {
+			mesh->textureCoordinates = &groupTextureCoordinates;
+		} 
 		// transformed mesh tangents
 		if (groupTangents.size() > 0) {
-			mesh->transformedTangents.resize(groupTangents.size());
+			mesh->transformedTangents.resize(groupTangents.size() * mesh->instances);
 			mesh->tangents = &mesh->transformedTangents;
-			for (auto j = 0; j < mesh->tangents->size(); j++) {
-				mesh->transformedTangents[j].set(groupTangents[j]);
-			}
+			{
+				auto idx = 0;
+				for (auto i = 0; i < mesh->instances; i++)
+				for (auto j = 0; j < groupTangents.size(); j++) {
+					mesh->transformedTangents[idx++].set(groupTangents[j]);
+				}
+			}		
 		}
 		// transformed mesh bitangents
 		if (groupBitangents.size() > 0) {
-			mesh->transformedBitangents.resize(groupBitangents.size());
+			mesh->transformedBitangents.resize(groupBitangents.size() * mesh->instances);
 			mesh->bitangents = &mesh->transformedBitangents;
-			for (auto j = 0; j < mesh->bitangents->size(); j++) {
-				mesh->transformedBitangents[j].set(groupBitangents[j]);
+			{
+				auto idx = 0;
+				for (auto i = 0; i < mesh->instances; i++)
+				for (auto j = 0; j < groupBitangents.size(); j++) {
+					mesh->transformedBitangents[idx++].set(groupBitangents[j]);
+				}
 			}
 		}
 	} else {
 		// no transformations on CPU, we can use model data
 		mesh->vertices = &groupVertices;
 		mesh->normals = &groupNormals;
+		mesh->textureCoordinates = &groupTextureCoordinates;
 		if (groupTangents.size() > 0) {
 			mesh->tangents = &groupTangents;
 		}
@@ -132,14 +165,17 @@ Object3DGroupMesh* Object3DGroupMesh::createMesh(Object3DGroupRenderer* object3D
 	for (auto& facesEntity : group->getFacesEntities()) {
 		indicesCount += 3 * facesEntity.getFaces().size();
 	}
-	mesh->indices.resize(indicesCount);
+	mesh->indices.resize(mesh->instances * indicesCount);
 	{
 		auto j = 0;
-		for (auto& facesEntity : group->getFacesEntities())
-		for (auto& face : facesEntity.getFaces())
-		for (auto& vertexIndex : face.getVertexIndices()) {
-			mesh->indices[j++] = vertexIndex;
-		}
+		for (auto& facesEntity : group->getFacesEntities()) { 
+			for (auto i = 0; i < mesh->instances; i++) { 
+				for (auto& face : facesEntity.getFaces()) 
+				for (auto& vertexIndex : face.getVertexIndices()) {
+					mesh->indices[j++] =  i * groupVertices.size() + vertexIndex;
+				}		
+			}
+		}	
 	}
 	//
 	mesh->recreatedBuffers = false;
@@ -148,7 +184,7 @@ Object3DGroupMesh* Object3DGroupMesh::createMesh(Object3DGroupRenderer* object3D
 		mesh->animationProcessingTarget == Engine::AnimationProcessingTarget::CPU_NORENDERING ||
 		mesh->animationProcessingTarget == Engine::AnimationProcessingTarget::GPU) {
 		// group transformations matrix
-		mesh->cGroupTransformationsMatrix = transformationMatrices.find(group->getId())->second;
+		mesh->cGroupTransformationsMatrix = transformationMatrices[0]->find(group->getId())->second;	
 	}
 	// skinning
 	if ((skinning != nullptr &&
@@ -156,7 +192,8 @@ Object3DGroupMesh* Object3DGroupMesh::createMesh(Object3DGroupRenderer* object3D
 		// skinning computation caches if computing skinning on CPU
 		if (mesh->animationProcessingTarget == Engine::AnimationProcessingTarget::CPU || mesh->animationProcessingTarget == Engine::AnimationProcessingTarget::CPU_NORENDERING) {
 			mesh->cSkinningJointWeight.resize(groupVertices.size());
-			mesh->cSkinningJointTransformationsMatrices.resize(groupVertices.size());
+			mesh->cSkinningJointTransformationsMatrices.resize(mesh->instances);
+			for (auto i = 0; i < mesh->instances; i++) mesh->cSkinningJointTransformationsMatrices[i].resize(groupVertices.size());
 			// compute joint weight caches
 			auto& joints = skinning->getJoints();
 			auto& weights = skinning->getWeights();
@@ -167,16 +204,26 @@ Object3DGroupMesh* Object3DGroupMesh::createMesh(Object3DGroupRenderer* object3D
 					mesh->cSkinningMaxVertexWeights = vertexJointWeights;
 
 				mesh->cSkinningJointWeight[vertexIndex].resize(vertexJointWeights);
-				mesh->cSkinningJointTransformationsMatrices[vertexIndex].resize(vertexJointWeights);
-				auto jointWeightIdx = 0;
-				for (auto& jointWeight : jointsWeights[vertexIndex]) {
-					auto& joint = joints[jointWeight.getJointIndex()];
-					mesh->cSkinningJointWeight[vertexIndex][jointWeightIdx] = weights[jointWeight.getWeightIndex()];
-					auto skinningMatrixIt = skinningMatrices->find(joint.getGroupId());
-					mesh->cSkinningJointTransformationsMatrices[vertexIndex][jointWeightIdx] = skinningMatrixIt->second;
-					// next
-					jointWeightIdx++;
-				}
+				for (auto i = 0; i < mesh->instances; i++) mesh->cSkinningJointTransformationsMatrices[i][vertexIndex].resize(vertexJointWeights);
+				{
+					auto jointWeightIdx = 0;
+					for (auto& jointWeight : jointsWeights[vertexIndex]) {
+						auto& joint = joints[jointWeight.getJointIndex()];
+						mesh->cSkinningJointWeight[vertexIndex][jointWeightIdx] = weights[jointWeight.getWeightIndex()];
+						// next
+						jointWeightIdx++;
+					}
+				}	
+				for (auto i = 0; i < mesh->instances; i++) { 
+					auto jointWeightIdx = 0;
+					for (auto& jointWeight : jointsWeights[vertexIndex]) {
+						auto& joint = joints[jointWeight.getJointIndex()];
+						auto skinningMatrixIt = skinningMatrices[i]->find(joint.getGroupId());
+						mesh->cSkinningJointTransformationsMatrices[i][vertexIndex][jointWeightIdx] = skinningMatrixIt->second;
+						// next
+						jointWeightIdx++;
+					}
+				}		
 			}
 		}
 	}
@@ -210,22 +257,23 @@ void Object3DGroupMesh::computeTransformations(void* context)
 			Vector3* transformedBitangent;
 			float totalWeights;
 			float weightNormalized;
+			for (auto i = 0; i < instances; i++)
 			for (auto vertexIndex = 0; vertexIndex < groupVertices.size(); vertexIndex++) {
 				// do vertices
 				vertex = &groupVertices[vertexIndex];
-				transformedVertex = &transformedVertices[vertexIndex].set(0.0f, 0.0f, 0.0f);
+				transformedVertex = &transformedVertices[groupVertices.size() * i + vertexIndex].set(0.0f, 0.0f, 0.0f);
 				normal = &groupNormals[vertexIndex];
-				transformedNormal = &transformedNormals[vertexIndex].set(0.0f, 0.0f, 0.0f);
+				transformedNormal = &transformedNormals[groupVertices.size() * i + vertexIndex].set(0.0f, 0.0f, 0.0f);
 				tangent = tangents != nullptr?&groupTangent[vertexIndex]:nullptr;
-				transformedTangent = tangents != nullptr?&transformedTangents[vertexIndex].set(0.0f, 0.0f, 0.0f):nullptr;
+				transformedTangent = tangents != nullptr?&transformedTangents[groupVertices.size() * i + vertexIndex].set(0.0f, 0.0f, 0.0f):nullptr;
 				bitangent = bitangents != nullptr?&groupBitangent[vertexIndex]:nullptr;
-				transformedBitangent = bitangents != nullptr?&transformedBitangents[vertexIndex].set(0.0f, 0.0f, 0.0f):nullptr;
+				transformedBitangent = bitangents != nullptr?&transformedBitangents[groupVertices.size() * i + vertexIndex].set(0.0f, 0.0f, 0.0f):nullptr;
 				// compute every influence on vertex and vertex normals
 				totalWeights = 0.0f;
 				for (auto vertexJointWeightIdx = 0; vertexJointWeightIdx < jointsWeights[vertexIndex].size(); vertexJointWeightIdx++) {
 					auto weight = cSkinningJointWeight[vertexIndex][vertexJointWeightIdx];
 					// skinning transformation matrix
-					auto cTransformationsMatrix = cSkinningJointTransformationsMatrices[vertexIndex][vertexJointWeightIdx];
+					auto cTransformationsMatrix = cSkinningJointTransformationsMatrices[i][vertexIndex][vertexJointWeightIdx];
 					// vertex
 					transformedVertex->add(cTransformationsMatrix->multiply(*vertex, tmpVector3).scale(weight));
 					// normals
@@ -301,7 +349,7 @@ bool Object3DGroupMesh::getRecreatedBuffers()
 void Object3DGroupMesh::setupVertexIndicesBuffer(Renderer *renderer, void *context, int32_t vboId) {
 	// upload
 	if (renderer->isUsingShortIndices() == true) {
-		if (indices.size() > 65535) {
+		if (instances * indices.size() > 65535) {
 			Console::println(
 				"Object3DGroupMesh::setupVertexIndicesBuffer(): " +
 				group->getModel()->getName() + ":" +
@@ -310,16 +358,18 @@ void Object3DGroupMesh::setupVertexIndicesBuffer(Renderer *renderer, void *conte
 				to_string(indices.size())
 			);
 		}
-		auto sbIndices = ObjectBuffer::getByteBuffer(context, faceCount * 3 * sizeof(uint16_t))->asShortBuffer();
+		auto sbIndices = ObjectBuffer::getByteBuffer(context, instances * faceCount * 3 * sizeof(uint16_t))->asShortBuffer();
 		// create face vertex indices, will never be changed in engine
+		for (auto i = 0; i < instances; i++)
 		for (auto index: indices) {
 			sbIndices.put(index);
 		}
 		// done, upload
 		renderer->uploadIndicesBufferObject(context, vboId, sbIndices.getPosition() * sizeof(uint16_t), &sbIndices);
 	} else {
-		auto ibIndices = ObjectBuffer::getByteBuffer(context, faceCount * 3 * sizeof(uint32_t))->asIntBuffer();
+		auto ibIndices = ObjectBuffer::getByteBuffer(context, instances * faceCount * 3 * sizeof(uint32_t))->asIntBuffer();
 		// create face vertex indices, will never be changed in engine
+		for (auto i = 0; i < instances; i++)
 		for (auto index: indices) {
 			ibIndices.put(index);
 		}
@@ -331,13 +381,11 @@ void Object3DGroupMesh::setupVertexIndicesBuffer(Renderer *renderer, void *conte
 
 void Object3DGroupMesh::setupTextureCoordinatesBuffer(Renderer* renderer, void* context, int32_t vboId)
 {
-	// check if we have texture coordinates
-	auto& groupTextureCoordinates = group->getTextureCoordinates();
-	if (groupTextureCoordinates.size() == 0) return;
+	if (textureCoordinates->size() == 0) return;
 	// create texture coordinates buffer, will never be changed in engine
-	auto fbTextureCoordinates = ObjectBuffer::getByteBuffer(context, groupTextureCoordinates.size() * 2 * sizeof(float))->asFloatBuffer();
+	auto fbTextureCoordinates = ObjectBuffer::getByteBuffer(context, textureCoordinates->size() * 2 * sizeof(float))->asFloatBuffer();
 	// construct texture coordinates byte buffer as this will not change usually
-	for (auto& textureCoordinate: groupTextureCoordinates) {
+	for (auto& textureCoordinate: *textureCoordinates) {
 		fbTextureCoordinates.put(textureCoordinate.getArray());
 	}
 	// done, upload
diff --git a/src/tdme/engine/subsystems/rendering/Object3DGroupMesh.h b/src/tdme/engine/subsystems/rendering/Object3DGroupMesh.h
index 7830d1bd..1cd11be4 100644
--- a/src/tdme/engine/subsystems/rendering/Object3DGroupMesh.h
+++ b/src/tdme/engine/subsystems/rendering/Object3DGroupMesh.h
@@ -45,19 +45,22 @@ class tdme::engine::subsystems::rendering::Object3DGroupMesh final
 	friend class tdme::engine::subsystems::skinning::SkinningShader;
 
 private:
+	int instances;
 	Object3DGroupRenderer* object3DGroupRenderer;
-	Group* group ;
+	Group* group;
 	int32_t faceCount;
 	const vector<Vector3>* vertices;
 	const vector<Vector3>* normals;
 	const vector<Vector3>* tangents;
 	const vector<Vector3>* bitangents;
+	const vector<TextureCoordinate>* textureCoordinates;
 	vector<int32_t> indices;
 	vector<Vector3> transformedVertices;
 	vector<Vector3> transformedNormals;
 	vector<Vector3> transformedTangents;
 	vector<Vector3> transformedBitangents;
-	map<string, Matrix4x4*>* skinningMatrices;
+	vector<TextureCoordinate> transformedTextureCoordinates;
+	vector<map<string, Matrix4x4*>*> skinningMatrices;
 	Engine::AnimationProcessingTarget animationProcessingTarget;
 
 	int32_t cSkinningMaxVertexWeights;
@@ -65,7 +68,7 @@ private:
 
 	Matrix4x4* cGroupTransformationsMatrix;
 
-	vector<vector<Matrix4x4*>> cSkinningJointTransformationsMatrices;
+	vector<vector<vector<Matrix4x4*>>> cSkinningJointTransformationsMatrices;
 
 	bool skinning;
 	int32_t skinningJoints;
@@ -82,11 +85,11 @@ private:
 	 * @param object3DGroupRenderer object 3D group renderer
 	 * @param animationProcessingTarget animation processing target
 	 * @param group group
-	 * @param transformationMatrices transformationm matrices
-	 * @param skinningMatrices skinning matrices 
+	 * @param transformationMatrices instances transformationm matrices
+	 * @param skinningMatrices instances skinning matrices 
 	 * @return object 3d group mesh
 	 */
-	static Object3DGroupMesh* createMesh(Object3DGroupRenderer* object3DGroupRenderer, Engine::AnimationProcessingTarget animationProcessingTarget, Group* group, map<string, Matrix4x4*>& transformationMatrices, map<string, Matrix4x4*>* skinningMatrices); // TODO: std container: maybe use call by reference
+	static Object3DGroupMesh* createMesh(Object3DGroupRenderer* object3DGroupRenderer, Engine::AnimationProcessingTarget animationProcessingTarget, Group* group, const vector<map<string, Matrix4x4*>*>& transformationMatrices, const vector<map<string, Matrix4x4*>*>& skinningMatrices);
 
 	/** 
 	 * Computes mesh transformations
diff --git a/src/tdme/engine/subsystems/rendering/Object3DGroupRenderer.h b/src/tdme/engine/subsystems/rendering/Object3DGroupRenderer.h
index df8055a1..a02c4ef9 100644
--- a/src/tdme/engine/subsystems/rendering/Object3DGroupRenderer.h
+++ b/src/tdme/engine/subsystems/rendering/Object3DGroupRenderer.h
@@ -27,6 +27,7 @@ class tdme::engine::subsystems::rendering::Object3DGroupRenderer final
 {
 	friend class Object3DRenderer;
 	friend class tdme::engine::Object3D;
+	friend class tdme::engine::subsystems::rendering::Object3DGroupMesh;
 	friend class tdme::engine::subsystems::skinning::SkinningShader;
 
 private:
diff --git a/src/tdme/engine/subsystems/rendering/Object3DInternal.cpp b/src/tdme/engine/subsystems/rendering/Object3DInternal.cpp
index 85f12ab1..24b50673 100644
--- a/src/tdme/engine/subsystems/rendering/Object3DInternal.cpp
+++ b/src/tdme/engine/subsystems/rendering/Object3DInternal.cpp
@@ -31,8 +31,8 @@ using tdme::engine::subsystems::rendering::Object3DGroup;
 using tdme::engine::subsystems::rendering::ModelUtilitiesInternal;
 using tdme::math::Vector3;
 
-Object3DInternal::Object3DInternal(const string& id, Model* model) :
-	Object3DBase(model, true, Engine::animationProcessingTarget)
+Object3DInternal::Object3DInternal(const string& id, Model* model, int instances) :
+	Object3DBase(model, true, Engine::animationProcessingTarget, instances)
 {
 	this->id = id;
 	enabled = true;
@@ -41,7 +41,7 @@ Object3DInternal::Object3DInternal(const string& id, Model* model) :
 	receivesShadows = false;
 	effectColorMul.set(1.0f, 1.0f, 1.0f, 1.0f);
 	effectColorAdd.set(0.0f, 0.0f, 0.0f, 0.0f);
-	boundingBox.fromBoundingVolume(model->getBoundingBox());
+	boundingBox.fromBoundingVolume(model->getBoundingBox()); // TODO: What to do with the instances here regarding instances?
 	boundingBoxTransformed.fromBoundingVolume(model->getBoundingBox());
 	updateBoundingBox();
 }
@@ -101,7 +101,7 @@ void Object3DInternal::setTextureMatrix(const Matrix2D3x3& textureMatrix, const
 void Object3DInternal::setGroupTransformationsMatrix(const string& id, const Matrix4x4& matrix) {
 	Object3DBase::setGroupTransformationsMatrix(id, matrix);
 	map<string, Matrix4x4*> _overridenTransformationsMatrices;
-	for (auto overridenTransformationsMatrixIt: overridenTransformationsMatrices) {
+	for (auto overridenTransformationsMatrixIt: animations[0]->overridenTransformationsMatrices) {
 		_overridenTransformationsMatrices[overridenTransformationsMatrixIt.first] = new Matrix4x4(*overridenTransformationsMatrixIt.second);
 	}
 	auto newBoundingBox = ModelUtilitiesInternal::createBoundingBox(this->getModel(), _overridenTransformationsMatrices);
@@ -112,7 +112,7 @@ void Object3DInternal::setGroupTransformationsMatrix(const string& id, const Mat
 void Object3DInternal::unsetGroupTransformationsMatrix(const string& id) {
 	Object3DBase::unsetGroupTransformationsMatrix(id);
 	map<string, Matrix4x4*> _overridenTransformationsMatrices;
-	for (auto overridenTransformationsMatrixIt: overridenTransformationsMatrices) {
+	for (auto overridenTransformationsMatrixIt: animations[0]->overridenTransformationsMatrices) {
 		_overridenTransformationsMatrices[overridenTransformationsMatrixIt.first] = new Matrix4x4(*overridenTransformationsMatrixIt.second);
 	}
 	auto newBoundingBox = ModelUtilitiesInternal::createBoundingBox(this->getModel(), _overridenTransformationsMatrices);
diff --git a/src/tdme/engine/subsystems/rendering/Object3DInternal.h b/src/tdme/engine/subsystems/rendering/Object3DInternal.h
index 379ccf29..467e2389 100644
--- a/src/tdme/engine/subsystems/rendering/Object3DInternal.h
+++ b/src/tdme/engine/subsystems/rendering/Object3DInternal.h
@@ -217,8 +217,9 @@ public:
 	 * Public constructor
 	 * @param id id
 	 * @param model model
+	 * @param instances instances to compute and render by multiplying
 	 */
-	Object3DInternal(const string& id, Model* model);
+	Object3DInternal(const string& id, Model* model, int instances);
 
 	/**
 	 * Destructor
diff --git a/src/tdme/engine/subsystems/rendering/Object3DModelInternal.cpp b/src/tdme/engine/subsystems/rendering/Object3DModelInternal.cpp
index 00ba9b74..28933e31 100644
--- a/src/tdme/engine/subsystems/rendering/Object3DModelInternal.cpp
+++ b/src/tdme/engine/subsystems/rendering/Object3DModelInternal.cpp
@@ -3,7 +3,7 @@
 using tdme::engine::subsystems::rendering::Object3DModelInternal;
 
 Object3DModelInternal::Object3DModelInternal(Model* model) :
-	Object3DBase(model, false, Engine::AnimationProcessingTarget::CPU_NORENDERING)
+	Object3DBase(model, false, Engine::AnimationProcessingTarget::CPU_NORENDERING, 1)
 {
 }
 
diff --git a/src/tdme/engine/subsystems/rendering/Object3DRenderer.cpp b/src/tdme/engine/subsystems/rendering/Object3DRenderer.cpp
index 5056811e..7482c4c1 100644
--- a/src/tdme/engine/subsystems/rendering/Object3DRenderer.cpp
+++ b/src/tdme/engine/subsystems/rendering/Object3DRenderer.cpp
@@ -399,7 +399,7 @@ void Object3DRenderer::renderObjectsOfSameTypeNonInstanced(const vector<Object3D
 		for (auto faceEntityIdx = 0; faceEntityIdx < facesEntityIdxCount; faceEntityIdx++) {
 			auto facesEntity = &facesEntities[faceEntityIdx];
 			auto isTextureCoordinatesAvailable = facesEntity->isTextureCoordinatesAvailable();
-			auto faces = facesEntity->getFaces().size();
+			auto faces = facesEntity->getFaces().size() * firstObject->instances;
 			// material
 			auto material = facesEntity->getMaterial();
 			// determine if transparent
@@ -605,7 +605,7 @@ void Object3DRenderer::renderObjectsOfSameTypeInstanced(int threadIdx, const vec
 		for (auto faceEntityIdx = 0; faceEntityIdx < facesEntityIdxCount; faceEntityIdx++) {
 			auto facesEntity = &facesEntities[faceEntityIdx];
 			auto isTextureCoordinatesAvailable = facesEntity->isTextureCoordinatesAvailable();
-			auto faces = facesEntity->getFaces().size();
+			auto faces = facesEntity->getFaces().size() * firstObject->instances;
 			// material
 			auto material = facesEntity->getMaterial();
 			// determine if transparent
diff --git a/src/tdme/engine/subsystems/rendering/TransparentRenderFacesGroup.h b/src/tdme/engine/subsystems/rendering/TransparentRenderFacesGroup.h
index c9ac5da2..848e8185 100644
--- a/src/tdme/engine/subsystems/rendering/TransparentRenderFacesGroup.h
+++ b/src/tdme/engine/subsystems/rendering/TransparentRenderFacesGroup.h
@@ -40,6 +40,7 @@ using tdme::utils::Console;
  */
 class tdme::engine::subsystems::rendering::TransparentRenderFacesGroup final
 {
+	friend class Object3DGroupMesh;
 	friend class Object3DRenderer;
 	friend class Object3DRenderer_TransparentRenderFacesGroupPool;
 
diff --git a/src/tdme/engine/subsystems/shadowmapping/ShadowMap.cpp b/src/tdme/engine/subsystems/shadowmapping/ShadowMap.cpp
index e646e2ad..9bf11f0e 100644
--- a/src/tdme/engine/subsystems/shadowmapping/ShadowMap.cpp
+++ b/src/tdme/engine/subsystems/shadowmapping/ShadowMap.cpp
@@ -10,6 +10,7 @@
 #include <tdme/engine/Light.h>
 #include <tdme/engine/Object3D.h>
 #include <tdme/engine/Object3DRenderGroup.h>
+#include <tdme/engine/SkinnedObject3DRenderGroup.h>
 #include <tdme/engine/LODObject3D.h>
 #include <tdme/engine/ObjectParticleSystem.h>
 #include <tdme/engine/ParticleSystemGroup.h>
@@ -33,6 +34,7 @@ using tdme::engine::FrameBuffer;
 using tdme::engine::Light;
 using tdme::engine::Object3D;
 using tdme::engine::Object3DRenderGroup;
+using tdme::engine::SkinnedObject3DRenderGroup;
 using tdme::engine::LODObject3D;
 using tdme::engine::ObjectParticleSystem;
 using tdme::engine::Partition;
@@ -121,6 +123,7 @@ void ShadowMap::render(Light* light)
 	Object3D* object = nullptr;
 	LODObject3D* lodObject = nullptr;
 	Object3DRenderGroup* org = nullptr;
+	SkinnedObject3DRenderGroup* sorg = nullptr;
 	ObjectParticleSystem* opse = nullptr;
 	ParticleSystemGroup* psg = nullptr;
 	EntityHierarchy* eh = nullptr;
@@ -142,6 +145,13 @@ void ShadowMap::render(Light* light)
 				}
 			}
 		} else
+		if ((sorg = dynamic_cast<SkinnedObject3DRenderGroup*>(entity)) != nullptr) {
+			if ((object = sorg->getObject()) != nullptr) {
+				if (object->isContributesShadows() == false) continue;
+				object->preRender(context);
+				visibleObjects.push_back(object);
+			}
+		} else
 		if ((object = dynamic_cast<Object3D*>(entity)) != nullptr) {
 			if (object->isContributesShadows() == false) continue;
 			object->preRender(context);
diff --git a/src/tdme/engine/subsystems/skinning/SkinningShader.cpp b/src/tdme/engine/subsystems/skinning/SkinningShader.cpp
index 4cfe396c..e7971406 100644
--- a/src/tdme/engine/subsystems/skinning/SkinningShader.cpp
+++ b/src/tdme/engine/subsystems/skinning/SkinningShader.cpp
@@ -79,8 +79,12 @@ void SkinningShader::initialize()
 	if (renderer->linkProgram(programId) == false) return;
 
 	//
-	uniformSkinningCount = renderer->getProgramUniformLocation(programId, "skinningCount");
-	if (uniformSkinningCount == -1) return;
+	uniformVertexCount = renderer->getProgramUniformLocation(programId, "vertexCount");
+	if (uniformVertexCount == -1) return;
+	uniformMatrixCount = renderer->getProgramUniformLocation(programId, "matrixCount");
+	if (uniformMatrixCount == -1) return;
+	uniformInstanceCount = renderer->getProgramUniformLocation(programId, "instanceCount");
+	if (uniformInstanceCount == -1) return;
 
 	//
 	initialized = true;
@@ -208,18 +212,26 @@ void SkinningShader::computeSkinning(void* context, Object3DGroupMesh* object3DG
 	{
 		auto skinning = group->getSkinning();
 		auto& skinningJoints = skinning->getJoints();
-		auto fbMatrices = ObjectBuffer::getByteBuffer(context, skinningJoints.size() * 16 * sizeof(float))->asFloatBuffer();
+		auto fbMatrices = ObjectBuffer::getByteBuffer(context, object3DGroupMesh->instances * skinningJoints.size() * 16 * sizeof(float))->asFloatBuffer();
+		for (auto i = 0; i < object3DGroupMesh->instances; i++)
 		for (auto& joint: skinningJoints) {
-			fbMatrices.put(object3DGroupMesh->skinningMatrices->find(joint.getGroupId())->second->getArray());
+			fbMatrices.put(object3DGroupMesh->skinningMatrices[i]->find(joint.getGroupId())->second->getArray());
 		}
 		renderer->uploadSkinningBufferObject(context, (*modelSkinningCacheCached->matricesVboIds[contextIdx])[0], fbMatrices.getPosition() * sizeof(float), &fbMatrices);
+		renderer->setProgramUniformInteger(context, uniformMatrixCount, skinningJoints.size());
 	}
 
 	// skinning count
-	renderer->setProgramUniformInteger(context, uniformSkinningCount, vertices.size());
-
+	renderer->setProgramUniformInteger(context, uniformVertexCount, vertices.size());
+	renderer->setProgramUniformInteger(context, uniformInstanceCount, object3DGroupMesh->instances);
+	
 	// do it so
-	renderer->dispatchCompute(context, (int)Math::ceil(vertices.size() / 16.0f), 1, 1);
+	renderer->dispatchCompute(
+		context, 
+		(int)Math::ceil(vertices.size() / 16.0f),
+		(int)Math::ceil(object3DGroupMesh->instances / 16.0f),
+		1
+	);
 }
 
 void SkinningShader::unUseProgram()
diff --git a/src/tdme/engine/subsystems/skinning/SkinningShader.h b/src/tdme/engine/subsystems/skinning/SkinningShader.h
index 29fcf028..e229c8c3 100644
--- a/src/tdme/engine/subsystems/skinning/SkinningShader.h
+++ b/src/tdme/engine/subsystems/skinning/SkinningShader.h
@@ -40,7 +40,9 @@ private:
 
 	int32_t programId { -1 };
 	int32_t shaderId { -1 };
-	int32_t uniformSkinningCount { -1 };
+	int32_t uniformVertexCount { -1 };
+	int32_t uniformMatrixCount { -1 };
+	int32_t uniformInstanceCount { -1 };
 	bool isRunning;
 	bool initialized;
 	Renderer* renderer { nullptr };
diff --git a/src/tdme/tests/SkinningTest.cpp b/src/tdme/tests/SkinningTest.cpp
index 271361c7..df66cb2d 100644
--- a/src/tdme/tests/SkinningTest.cpp
+++ b/src/tdme/tests/SkinningTest.cpp
@@ -112,7 +112,7 @@ void SkinningTest::initialize()
 	light0->setSpotExponent(0.0f);
 	light0->setSpotCutOff(180.0f);
 	light0->setEnabled(true);
-	auto ground = new OrientedBoundingBox(Vector3(0.0f, 0.0f, 0.0f), OrientedBoundingBox::AABB_AXIS_X, OrientedBoundingBox::AABB_AXIS_Y, OrientedBoundingBox::AABB_AXIS_Z, Vector3(16.0f, 1.0f, 15.0f));
+	auto ground = new OrientedBoundingBox(Vector3(0.0f, 0.0f, 0.0f), OrientedBoundingBox::AABB_AXIS_X, OrientedBoundingBox::AABB_AXIS_Y, OrientedBoundingBox::AABB_AXIS_Z, Vector3(32.0f, 1.0f, 32.0f));
 	auto groundModel = PrimitiveModel::createModel(ground, "ground_model");
 	groundModel->getMaterials()["tdme.primitive.material"]->setAmbientColor(Color4(0.8f, 0.8f, 0.8f, 1.0f));
 	groundModel->getMaterials()["tdme.primitive.material"]->setDiffuseColor(Color4(1.0f, 1.0f, 1.0f, 1.0f));
@@ -122,37 +122,42 @@ void SkinningTest::initialize()
 	entity->update();
 	engine->addEntity(entity);
 	auto character = ModelReader::read("resources/tests/models/mementoman", "mementoman.dae");
-	/*
-	auto characters = new SkinnedObject3DRenderGroup("characters", character, 17 * 17);
-	auto characterIdx = 0;
-	float z = -15.0f;
-	for (int characterZ = 0; characterZ < 17; characterZ++) {
-		float x = -15.0f;
-		for (int characterX = 0; characterX < 17; characterX++) {
-			characters->getObjectTransformations(characterIdx).setTranslation(Vector3(x, 0.0f, z));
-			characters->getObjectTransformations(characterIdx).update();
-			x+= 1.8f;
+	auto characters = new SkinnedObject3DRenderGroup("characters", character, 17 * 2 * 17 * 2);
+	#define SO3DRG
+	#if defined(SO3DRG)
+		auto characterIdx = 0;
+		float z = -15.0f * 2.0f;
+		for (int characterZ = 0; characterZ < 17 * 2; characterZ++) {
+			float x = -15.0f * 2.0f;
+			for (int characterX = 0; characterX < 17 * 2; characterX++) {
+				characters->getObjectTransformations(characterIdx).setTranslation(Vector3(x, 0.0f, z));
+				characters->getObjectTransformations(characterIdx).update();
+				characterIdx++;
+				x+= 1.8f;
+			}
+			z+= 1.8f;
 		}
-		z+= 1.8f;
-	}
-	characters->updateRenderGroup();
-	engine->addEntity(characters);
-	*/
-	auto characterIdx = 0;
-	float z = -15.0f;
-	for (int characterZ = 0; characterZ < 17; characterZ++) {
-		float x = -15.0f;
-		for (int characterX = 0; characterX < 17; characterX++) {
-			auto entity = new Object3D("character." + to_string(characterIdx++), character);
-			entity->setTranslation(Vector3(x, 0.0f, z));
-			entity->update();
-			entity->setContributesShadows(true);
-			entity->setReceivesShadows(true);
-			engine->addEntity(entity);
-			x+= 1.8f;
+		characters->updateRenderGroup();
+		characters->setContributesShadows(true);
+		characters->setReceivesShadows(true);
+		engine->addEntity(characters);
+	#else
+		auto characterIdx = 0;
+		float z = -15.0f;
+		for (int characterZ = 0; characterZ < 17; characterZ++) {
+			float x = -15.0f;
+			for (int characterX = 0; characterX < 17; characterX++) {
+				auto entity = new Object3D("character." + to_string(characterIdx++), character);
+				entity->setTranslation(Vector3(x, 0.0f, z));
+				entity->update();
+				entity->setContributesShadows(true);
+				entity->setReceivesShadows(true);
+				engine->addEntity(entity);
+				x+= 1.8f;
+			}
+			z+= 1.8f;
 		}
-		z+= 1.8f;
-	}
+	#endif
 	Console::println("Spawned characters: " + to_string(characterIdx));
 }
 
